/**
 * Copyright (c) 2015 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var events = require('events');

/**
 * A utility structure that allows one to increment and decrement a count, firing bound handlers
 * when the count becomes `0`
 */
var Counter = module.exports = function() {
    var _count = 0;
    var _emitter = new events.EventEmitter();

    var that = {};

    /**
     * Increment the current count by the provided amount
     *
     * @param  {Number}     [incrBy]    How much to increment the counter by. Default: 1
     */
    that.incr = function(incrBy) {
        incrBy = incrBy || 1;
        _count += incrBy;
    };

    /**
     * Decrement the current count by the provided amount. If decrementing by this amount brings the
     * count down to 0, then whatever handlers are waiting on it to become `0` will be fired. The
     * value of the counter cannot be less than `0`, therefore decrementing an empty counter will
     * result in no change, and no offset for future incrementing
     *
     * @param  {Number}     [decrBy]    How much to decrement the counter by. Default: 1
     */
    that.decr = function(decrBy) {
        decrBy = decrBy || 1;

        // If the count is already "empty", just ensure we're settled at 0 and don't fire any events
        if (_count <= 0) {
            _count = 0;
            return;
        }

        // Decrement by the provided amount, and if we become empty, fire the empty event in case
        // anyone is waiting
        _count -= decrBy;
        if (_count <= 0) {
            _count = 0;
            _emitter.emit('empty');
        }
    };

    /**
     * Fire the given handler when the count becomes `0`. If the count is currently `0`, the handler
     * is fired immediately
     *
     * @param  {Function}   handler     Invoked when the count becomes `0`
     */
    that.whenZero = function(handler) {
        if (_count <= 0) {
            return handler();
        }

        return _emitter.once('empty', handler);
    };

    return that;
};
