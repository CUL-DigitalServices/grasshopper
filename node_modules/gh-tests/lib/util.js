/**
 * Copyright (c) 2014 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var _ = require('lodash');
var assert = require('assert');
var util = require('util');

var DB = require('gh-core/lib/db');
var Grasshopper = require('gh-core');
var RestAPI = require('gh-rest');
var RestUtil = require('gh-rest/lib/util');

/**
 * Create the initial test configuration
 *
 * @return {Object}    config    JSON object containing configuration values for Cassandra, Redis, logging and telemetry
 */
var createInitialTestConfig = module.exports.createInitialTestConfig = function() {
    // Require the configuration file, from here on the configuration should be
    // passed around instead of required
    var config = require('../../../config');
    // Streams can't be deep copied so we stash them in a variable, delete them from the config
    // and add them to the final config
    var logConfig = config.log;
    delete config.log;
    config = _.cloneDeep(config);
    config.log = logConfig;
    config.log.streams = [{
        'level': 'trace',
        'path': './tests.log'
    }];

    // Ensure that test data does not find its way into the main database
    config.db.database = 'grasshoppertest';
    config.db.dropOnStartup = true;

    // Ensure that the tests always run on the correct hostname/ports
    config.servers.adminHostname = 'admin.grasshopper.com';
    config.servers.adminPort = 2000;
    config.servers.appsPort = 2001;

    return config;
};

/**
 * Set up Grasshopper so tests can be safely executed
 *
 * @param  {Object}      config         The application configuration
 * @param  {Function}    callback       Standard callback function
 */
var setUpBeforeTests = module.exports.setUpBeforeTests = function(config, callback) {
    Grasshopper.init(config, function(err) {
        if (err) {
            return callback(new Error(err.msg));
        }

        // Pipe REST events to our test logger
        _bindRequestLogger();

        // Get a global admin rest client
        getGlobalAdminRestClient(function(globalAdminRestClient) {

            // Create 2 tenants with 2 apps each
            // TODO: Use REST api once the endpoints have been implemented
            DB.Tenant.create({'displayName': 'Cambridge University'}).done(function(err, cambridgeTenant) {
                if (err) {
                    return callback(new Error(err.msg));
                }
                // TODO: Use REST api once the endpoints have been implemented
                DB.Tenant.create({'displayName': 'Oxford University'}).done(function(err, oxfordTenant) {
                    if (err) {
                        return callback(new Error(err.msg));
                    }

                    createDefaultTestApps(globalAdminRestClient, cambridgeTenant, 'timetable.cam.ac.uk', function(err, cambridge2013App, cambridge2014App, cambridge2013Admin, cambridge2014Admin) {
                        if (err) {
                            return callback(new Error(err.msg));
                        }
                        createDefaultTestApps(globalAdminRestClient, oxfordTenant, 'timetable.oxford.ac.uk', function(err, oxford2013App, oxford2014App, oxford2013Admin, oxford2014Admin) {
                            if (err) {
                                return callback(new Error(err.msg));
                            }

                            // Expose the tenant and apps on the global object
                            global.tests = {
                                'tenants': {
                                    'cam': cambridgeTenant,
                                    'oxford': oxfordTenant
                                },
                                'apps': {
                                    'cam2013': cambridge2013App,
                                    'cam2014': cambridge2014App,
                                    'oxford2013': oxford2013App,
                                    'oxford2014': oxford2014App
                                },
                                'admins': {
                                    'cam2013': cambridge2013Admin,
                                    'cam2014': cambridge2014Admin,
                                    'oxford2013': oxford2013Admin,
                                    'oxford2014': oxford2014Admin
                                }
                            };

                            return callback();
                        });
                    });
                });
            });
        });
    });
};

/**
 * Bind request logging for gh-rest unit test debugging
 *
 * @api private
 */
var _bindRequestLogger = function() {
    var requestLog = require('gh-core/lib/logger').logger('request-log');

    RestUtil.on('request', function(restCtx, url, method, data) {
        requestLog().trace({
            'restCtx': restCtx,
            'url': url,
            'method': method,
            'data': data
        }, 'Performing REST request');
    });

    RestUtil.on('response', function(body, res) {
        requestLog().trace({ 'res': res, 'body': body }, 'REST Request complete');
    });

    RestUtil.on('error', function(err, body, res) {
        requestLog().error({
            'err': err,
            'res': res,
            'body': body
        }, 'An error occurred sending a REST request');
    });
};

/**
 * Create 2 timetable applications for a tenant. Each app represents a different year
 *
 * @param  {RestClient}     globalAdminRestClient   A rest client that is authenticated as the global admin
 * @param  {Tenant}         tenant                  The tenant on which to create the application
 * @param  {String}         hostSuffix              The suffix for the applications their hostnames
 * @param  {Function}       callback                Standard callback function
 * @param  {Object}         callback.err            An error that occurred, if any
 * @param  {App}            callback.app2013        The 2013 application
 * @param  {App}            callback.app2014        The 2014 application
 * @param  {User}           callback.admin2013      A user that can administer the 2013 application
 * @param  {User}           callback.admin2014      A user that can administer the 2014 application
 * @api private
 */
var createDefaultTestApps = function(globalAdminRestClient, tenant, hostSuffix, callback) {
    createDefaultTestApp(globalAdminRestClient, tenant, hostSuffix, 2013, function(err, app2013, admin2013) {
        if (err) {
            return callback(err);
        }

        createDefaultTestApp(globalAdminRestClient, tenant, hostSuffix, 2014, function(err, app2014, admin2014) {
            if (err) {
                return callback(err);
            }

            return callback(null, app2013, app2014, admin2013, admin2014);
        });
    });
};

/**
 * Create a timetable application for a given tenant and year
 *
 * @param  {RestClient}     globalAdminRestClient   A rest client that is authenticated as the global admin
 * @param  {Tenant}         tenant                  The tenant on which to create the application
 * @param  {String}         hostSuffix              The suffix for the applications their hostnames
 * @param  {Number}         year                    The year for which to create the application
 * @param  {Function}       callback                Standard callback function
 * @param  {Object}         callback.err            An error that occurred, if any
 * @param  {App}            callback.app            The application
 * @param  {App}            callback.app            A user that can administer the application
 * @api private
 */
var createDefaultTestApp = function(globalAdminRestClient, tenant, hostSuffix, year, callback) {
    var app = {
        'displayName': year,
        'hostname': util.format('%s.%s', year, hostSuffix),
        'type': 'timetable',
        'enabled': true,
        'TenantId': tenant.id
    };
    // TODO: Use REST api once the endpoints have been implemented
    DB.App.create(app).done(function(err, app) {
        if (err) {
            return callback(err);
        }

        // Create a user that can act as an admin for this app
        generateTestUser(globalAdminRestClient, tenant.id, 'localhost:2001', app.hostname, function(err, user) {
            if (err) {
                return callback(err);
            }

            // TODO: Make that user an admin of the app
            return callback(null, app, user);
        });
    });
};

/**
 * Get a REST client that is authenticated as the global admin
 *
 * @param  {Function}       callback                Standard callback function
 * @param  {RestClient}     callback.client         An authenticated rest client
 */
var getGlobalAdminRestClient = module.exports.getGlobalAdminRestClient = function(callback) {
    var options = {
        'host': 'localhost:2000',
        'hostHeader': 'admin.grasshopper.com',
        'authenticationType': 'local',
        'username': 'administrator',
        'password': 'password'
    };
    RestAPI.createClient(options, function(err, client) {
        assert.ok(!err);
        return callback(client);
    });
};

/**
 * Generate a number of random users that can be used inside of tests
 *
 * @param  {RestContext}    restCtx             Standard REST Context object that contains the current tenant URL and the current user credentials
 * @param  {Number}         total               The total number of test users that need to be created. If not provided, a single test user will be created
 * @param  {Function}       callback            Standard callback function
 * @param  {Object}         callback.user1      An object with key `user` containing the User object, and `restContext` containing that user's rest context for one of the users that was created
 * @param  {Object}         [callback.user2]    Another user that was created
 * @param  {Object}         [callback....]      Each user that was generated as new callback arguments
 */
var generateTestUsers = module.exports.generateTestUsers = function(restClient, total, callback, _createdUsers) {
    _createdUsers = _createdUsers || [];
    if (total === 0) {
        return callback.apply(callback, _createdUsers);
    }

    generateTestUser(restClient, null, null, null, function(err, user) {
        assert.ok(!err);

        _createdUsers.push(user);
        // Recursively continue creating users
        return generateTestUsers(restClient, total - 1, callback, _createdUsers);
    });
};

/**
 * Generate a number of random users that can be used inside of tests
 *
 * @param  {RestContext}    restCtx             Standard REST Context object that contains the current tenant URL and the current user credentials
 * @param  {Number}         total               The total number of test users that need to be created. If not provided, a single test user will be created
 * @param  {Function}       callback            Standard callback function
 * @param  {Object}         callback.user1      An object with key `user` containing the User object, and `restContext` containing that user's rest context for one of the users that was created
 * @param  {Object}         [callback.user2]    Another user that was created
 * @param  {Object}         [callback....]      Each user that was generated as new callback arguments
 */
var generateTestUser = function(restClient, tenantId, host, hostHeader, callback) {
    // Create the user record through the REST api
    var username = generateTestUserId('random-user');
    var email = generateTestEmailAddress(username);
    var opts = {
        'username': username,
        'password': 'password',
        'displayName': generateTestUserId('random-user'),
        'email': email
    };
    restClient.user.create(opts, tenantId, function(err, profile) {
        if (err) {
            return callback(err);
        }

        // Create a REST Client that is authenticated as the new user
        var options = _.clone(restClient.options);
        options.authenticationType = 'local';
        options.host = host || restClient.options.host;
        options.hostHeader = hostHeader || restClient.options.hostHeader;
        options.username = opts.username;
        options.password = opts.password;
        RestAPI.createClient(options, function(err, client) {
            if (err) {
                return callback(err);
            }

            var user = {
                'profile': profile,
                'client': client
            };
            return callback(null, user);
        });
    });
};

/**
 * Generate a random unique user id that can be used inside of tests
 *
 * @param  {String}     [seed]  String that should be used as the first part of the generated user id. Defaults to "user"
 * @return {String}             A random user id
 */
var generateTestUserId = module.exports.generateTestUserId = function(seed) {
    seed = seed || 'user';
    return util.format('%s-%s', seed, generateString());
};

/**
 * Generate a unique and random email address based on an optional seed
 *
 * @param  {String}     [seed]      The seed / prefix of the email address. Defaults to "email"
 * @param  {String}     [domain]    The domain on which to put the email. Defaults to "gh-email.com"
 * @return {String}                 A random email address
 */
var generateTestEmailAddress = module.exports.generateTestEmailAddress = function(seed, domain) {
    seed = seed || 'email';
    domain = domain || 'gh-email.com';
    return util.format('%s_%s@%s', seed, generateString(), domain);
};

/**
 * Generate a random string
 *
 * @param  {Number}     [letters]   The number of letters that should be in the string, defaults to `10`
 * @return {String}                 A random string of letters
 */
var generateString = module.exports.generateString = function(letters) {
    letters = letters || 10;
    var alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
    var word = '';
    for (var i = 0; i < letters; i++) {
        word += alphabet[_.random(alphabet.length)];
    }
    return word;
};
