/**
 * Copyright (c) 2014 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var _ = require('lodash');
var lynx = require('lynx');

var ConfigAPI = require('gh-config');

// The statsd object from the main `config.js` file
var config = null;

// We expose the functionality to configure certain apps to publish to a separate
// statsd instance. We cache each instance in this object
var statsdInstances = {};

/**
 * Initialise the statsd module
 *
 * @param  {Object}     config      The statsd object from the main `config.js` file
 */
var init = module.exports.init = function(_config) {
    config = _config;

    // Cache the statsd instances
    cacheStatsdInstances();
};

// Ensure that we're always connected to the statsd instance that's configured in the database
ConfigAPI.on('cached', function() {
    cacheStatsdInstances();
});

/**
 * Cache all the statsd instances
 *
 * @api private
 */
var cacheStatsdInstances = function() {
    // Reset all the statsd instances
    statsdInstances = {};

    // If we've disabled statsd in the main config, we return immediately
    if (!config.enabled) {
        return;
    }

    // Cache the shared statsd instance
    if (config) {
        statsdInstances.shared = new lynx(config.host, config.port, {'scope': config.scope});
    }

    // Get all the configuration objects in the system
    var configs = ConfigAPI.getAllCachedConfigs();
    _.each(configs, function(config, appId) {
        if (config.statsd) {
            // A statsd config field is stored as ip:port:prefix
            var parts = config.statsd.split(':');
            statsdInstances[appId] = new lynx(parts[0], parts[1], {'scope': parts[2]});
        }
    });
};

/**
 * Get an object that can interact with statsd. If statsd is disabled, each operation
 * will essentially become a noop.
 *
 * @param  {Number}         appId       The id of the application for which to publish a metric to statsd
 * @return {Lynx}                       An object that allows you to push data to statsd
 * @see https://github.com/dscape/lynx
 */
var getInstance = module.exports.getInstance = function(appId) {
    // We will return a lynx-facade so we can send statsd metrics
    // to both a general instance that keeps track of all metrics
    // and an app-specific instance
    var facade = {};

    facade.increment = function(metric, value) {
        // Pass this function call on to the shared instance
        if (statsdInstances.shared) {
            statsdInstances.shared.increment(metric, value);
        }

        // Check if there's a specific instance for this app id
        // and if there is, track it with that statsd instance
        if (statsdInstances[appId]) {
            statsdInstances[appId].increment(metric, value);
        }
    };
    facade.timing = function(metric, time) {
        // Pass this function call on to the shared instance
        if (statsdInstances.shared) {
            statsdInstances.shared.timing(metric, time);
        }

        // Check if there's a specific instance for this app id
        // and if there is, track it with that statsd instance
        if (statsdInstances[appId]) {
            statsdInstances[appId].timing(metric, time);
        }
    };

    // Return the facade to the caller
    return facade;
};
