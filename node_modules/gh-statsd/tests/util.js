/**
 * Copyright (c) 2015 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var dgram = require('dgram');

/**
 * Mock a statsd server
 *
 * @param  {Number}     port            The port on which the statsd server will be running
 * @param  {Function}   callback        Standard callback function
 * @return {Socket}                     The statsd socket. The socket will have an extra `getMessages` function that will return all the messages that have been sent to the socket
 */
var mockStatsdServer = module.exports.mockStatsdServer = function(port, callback) {
    var server = dgram.createSocket('udp4');
    server.bind(port, '127.0.0.1');

    var messages = {};
    server.on('message', function(msg, rinfo) {
        // Convert the buffer to a string and parse the statsd command
        // A typical buffer might look like:
        //     gh.http.200.count:1|c
        var data = msg.toString().split(':');

        messages[data[0]] = messages[data[0]] || [];
        messages[data[0]].push(data[1]);
    });

    /**
     * Get the messages that have been published to this statsd instance
     *
     * @param  {Function}   callback            A function that gets invoked when the messages have been collected
     * @param  {Object[]}   callback.messages   The messages that have been published on the socket. Example key -> values are: `gh.http.200.count` -> ['1', '1']
     */
    server.getMessages = function(callback) {
        // We add a time-out to give the statsd module a bit of time to get its messages down to the
        // statsd instance. Ideally, we would add event tracking in the statsd API that allows us to
        // check whether there are pending messages. This would probably be more overhead than it's
        // worth so we simply add a little time-out
        setTimeout(callback, 500, messages);
    };

    return server;
};
