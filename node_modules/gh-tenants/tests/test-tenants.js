/**
 * Copyright (c) 2014 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var _ = require('lodash');
var assert = require('assert');

var TestsUtil = require('gh-tests/lib/util');

var TenantsTestUtil = require('./util');


describe('Tenants', function() {

    describe('Get all tenants', function() {

        /**
         * Test that verifies that all tenants can be retrieved
         */
        it('verify get all tenants', function(callback) {
            TestsUtil.getGlobalAdminRestClient(function(globalAdminClient) {
                // Retrieve all tenants
                TenantsTestUtil.assertGetTenants(globalAdminClient, null, function(tenants) {
                    var total = tenants.length;

                    // Verify that the default Cambridge tenant is present
                    var cambridgeTenant = _.where(tenants, {'displayName': tests.tenants.cam.displayName})[0];
                    TenantsTestUtil.assertTenant(cambridgeTenant, tests.tenants.cam);

                    // Verify that the default Oxford tenant is present
                    var oxfordTenant = _.where(tenants, {'displayName': tests.tenants.oxford.displayName})[0];
                    TenantsTestUtil.assertTenant(oxfordTenant, tests.tenants.oxford);

                    // Verify that the Georgia Tech tenant is not present
                    var gtTenant = _.where(tenants, {'displayName': 'Georgia Tech'})[0];
                    assert.ok(!gtTenant);

                    // Create the Georgia Tech tenant
                    TenantsTestUtil.assertCreateTenant(globalAdminClient, 'Georgia Tech', function(createdGtTenant) {

                        // Retrieve all tenants
                        TenantsTestUtil.assertGetTenants(globalAdminClient, total + 1, function(tenants) {

                            // Verify that the Georgia tenant is present
                            var gtTenant = _.where(tenants, {'displayName': 'Georgia Tech'})[0];
                            TenantsTestUtil.assertTenant(gtTenant, createdGtTenant);

                            return callback();
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies authorization for retrieving all tenants
         */
        it('verify get all tenants authorization', function(callback) {
            // Verify that an anonymous global administrator user is not able to retrieve all tenants
            TestsUtil.getAnonymousGlobalAdminRestClient(function(anonymousGlobalAdminClient) {
                TenantsTestUtil.assertGetTenantsFails(anonymousGlobalAdminClient, 401, callback);
            });
        });
    });

    describe('Get tenant', function() {

        /**
         * Test that verifies that a tenant can be retrieved
         */
        it('verify get tenant', function(callback) {
            TestsUtil.getGlobalAdminRestClient(function(globalAdminClient) {
                // Create a new tenant
                TenantsTestUtil.assertCreateTenant(globalAdminClient, 'Marist College', function(createdMaristTenant) {
                    // Verify that the created tenant can be retrieved
                    TenantsTestUtil.assertGetTenant(globalAdminClient, createdMaristTenant.id, createdMaristTenant, function(tenant) {
                        return callback();
                    });
                });
            });
        });

        /**
         * Test that verifies authorization for retrieving a tenant
         */
        it('verify get tenant authorization', function(callback) {
            // Verify that an anonymous global administrator user is not able to get a tenant
            TestsUtil.getAnonymousGlobalAdminRestClient(function(anonymousGlobalAdminClient) {
                TenantsTestUtil.assertGetTenantFails(anonymousGlobalAdminClient, tests.tenants.cam.id, 401, callback);
            });
        });

        /**
         * Test that verifies validation for retrieving a tenant
         */
        it('verify get tenant validation', function(callback) {
            TestsUtil.getGlobalAdminRestClient(function(globalAdminClient) {
                // Verify that a valid tenant id is required when getting a tenant
                TenantsTestUtil.assertGetTenantFails(globalAdminClient, 'foo', 400, function() {
                    // Verify that an existing tenant id is required when getting a tenant
                    TenantsTestUtil.assertGetTenantFails(globalAdminClient, 4242, 404, callback);
                });
            });
        });
    });

    describe('Create tenant', function() {

        /**
         * Test that verifies that a new tenant can be created
         */
        it('verify create tenant', function(callback) {
            TestsUtil.getGlobalAdminRestClient(function(globalAdminClient) {
                // Verify that a new tenant can be created
                TenantsTestUtil.assertCreateTenant(globalAdminClient, 'University of Amsterdam', function(createdAmsterdamTenant) {
                    // Verify that a tenant with the same name can be created
                    TenantsTestUtil.assertCreateTenant(globalAdminClient, 'University of Amsterdam', function(createdAmsterdamTenant2) {
                        assert.notEqual(createdAmsterdamTenant.id, createdAmsterdamTenant2.id);
                        return callback();
                    });
                });
            });
        });

        /**
         * Test that verifies authorization for creating a new tenant
         */
        it('verify create tenant authorization', function(callback) {
            // Verify that an anonymous global administrator user is not able to create a new tenant
            TestsUtil.getAnonymousGlobalAdminRestClient(function(anonymousGlobalAdminClient) {
                TenantsTestUtil.assertCreateTenantFails(anonymousGlobalAdminClient, 'Harvard University', 401, callback);
            });
        });

        /**
         * Test that verifies validation for creating a new tenant
         */
        it('verify create tenant validation', function(callback) {
            // Verify that a name is required when creating a new tenant
            TestsUtil.getGlobalAdminRestClient(function(globalAdminClient) {
                TenantsTestUtil.assertCreateTenantFails(globalAdminClient, null, 400, function() {
                    // Verify that a valid name is required when creating a new tenant
                    TenantsTestUtil.assertCreateTenantFails(globalAdminClient, '', 400, function() {
                        TenantsTestUtil.assertCreateTenantFails(globalAdminClient, TestsUtil.generateString(257), 400, callback);
                    });
                });
            });
        });
    });

    describe('Update tenant', function() {

        /**
         * Test that verifies that a tenant can be updated
         */
        it('verify update tenant', function(callback) {
            TestsUtil.getGlobalAdminRestClient(function(globalAdminClient) {
                // Verify that a tenant can be updated
                TenantsTestUtil.assertCreateTenant(globalAdminClient, 'UC Berkeley', function(createdUCBTenant) {
                    TenantsTestUtil.assertUpdateTenant(globalAdminClient, createdUCBTenant, 'University of California Berkeley', function(updatedUCBTenant) {
                        return callback();
                    });
                });
            });
        });

        /**
         * Test that verifies authorization for updating a tenant
         */
        it('verify update tenant authorization', function(callback) {
            // Verify that an anonymous global administrator user is not able to update a tenant
            TestsUtil.getGlobalAdminRestClient(function(globalAdminClient) {
                TenantsTestUtil.assertCreateTenant(globalAdminClient, 'Princeton University', function(createdPrincetonTenant) {
                    TestsUtil.getAnonymousGlobalAdminRestClient(function(anonymousGlobalAdminClient) {
                        TenantsTestUtil.assertUpdateTenantFails(anonymousGlobalAdminClient, createdPrincetonTenant.id, 'MIT', 401, callback);
                    });
                });
            });
        });

        /**
         * Test that verifies validation for updating a tenant
         */
        it('verify update tenant validation', function(callback) {
            // Verify that an updated name is required when updating a tenant
            TestsUtil.getGlobalAdminRestClient(function(globalAdminClient) {
                TenantsTestUtil.assertCreateTenant(globalAdminClient, 'Princeton University', function(createdPrincetonTenant) {
                    TenantsTestUtil.assertUpdateTenantFails(globalAdminClient, createdPrincetonTenant.id, null, 400, function() {
                        // Verify that a valid updated name is required when updating a tenant
                        TenantsTestUtil.assertUpdateTenantFails(globalAdminClient, createdPrincetonTenant.id, '', 400, function() {
                            TenantsTestUtil.assertUpdateTenantFails(globalAdminClient, createdPrincetonTenant.id, TestsUtil.generateString(257), 400, function() {
                                // Verify that an existing tenant id is required when updating a tenant
                                TenantsTestUtil.assertUpdateTenantFails(globalAdminClient, 42, 'MIT', 404, callback);
                            });
                        });
                    });
                });
            });
        });
    });
});
