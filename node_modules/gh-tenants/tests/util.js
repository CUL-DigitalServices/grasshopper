/**
 * Copyright (c) 2014 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var assert = require('assert');

/**
 * Assert that a tenant has all expected properties
 *
 * @param  {Tenant}             tenant              The tenant to assert the properties for
 * @param  {Tenant}             expectedTenant      The tenant to which the provided tenant should be compared
 * @throws {AssertionError}                         Error thrown when an assertion failed
 */
var assertTenant = module.exports.assertTenant = function(tenant, expectedTenant) {
    assert.ok(tenant);
    assert.ok(tenant.id);
    assert.ok(tenant.displayName);
    assert.ok(tenant.createdAt);
    assert.ok(tenant.updatedAt);

    assert.strictEqual(tenant.id, expectedTenant.id);
    assert.strictEqual(tenant.displayName, expectedTenant.displayName);
    assert.strictEqual(tenant.createdAt, expectedTenant.createdAt);
    assert.strictEqual(tenant.updatedAt, expectedTenant.updatedAt);
};

/**
 * Assert that all tenants can be retrieved
 *
 * @param  {RestClient}         client              The REST client to make the request with
 * @param  {Number}             [expectedTotal]     The expected total number of tenants
 * @param  {Function}           callback            Standard callback function
 * @param  {Tenants[]}          callback.tenants    All available tenants
 * @throws {AssertionError}                         Error thrown when an assertion failed
 */
var assertGetTenants = module.exports.assertGetTenants = function(client, expectedTotal, callback) {
    client.tenant.getTenants(function(err, tenants) {
        assert.ok(!err);
        assert.ok(tenants);

        if (expectedTotal) {
            assert.strictEqual(tenants.length, expectedTotal);
        } else {
            assert.ok(tenants.length >= 1);
        }

        return callback(tenants);
    });
};

/**
 * Assert that all tenants can not be retrieved
 *
 * @param  {RestClient}         client              The REST client to make the request with
 * @param  {Number}             code                The expected HTTP error code
 * @param  {Function}           callback            Standard callback function
 * @throws {AssertionError}                         Error thrown when an assertion failed
 */
var assertGetTenantsFails = module.exports.assertGetTenantsFails = function(client, code, callback) {
    client.tenant.getTenants(function(err, tenants) {
        assert.ok(err);
        assert.strictEqual(err.code, code);
        assert.ok(!tenants);

        return callback();
    });
};

/**
 * Assert that a tenant can be retrieved
 *
 * @param  {RestClient}         client              The REST client to make the request with
 * @param  {Number}             id                  The id of the tenant to retrieve
 * @param  {Tenant}             [expectedTenant]    The expected tenant to be retrieved
 * @param  {Function}           callback            Standard callback function
 * @param  {Tenant}             callback.tenant     The requested tenant
 * @throws {AssertionError}                         Error thrown when an assertion failed
 */
var assertGetTenant = module.exports.assertGetTenant = function(client, id, expectedTenant, callback) {
    client.tenant.getTenant(id, function(err, tenant) {
        assert.ok(!err);
        assert.ok(tenant);
        assert.ok(tenant.id);
        assert.ok(tenant.displayName);
        assert.ok(tenant.createdAt);
        assert.ok(tenant.updatedAt);

        if (expectedTenant) {
            assert.strictEqual(tenant.id, expectedTenant.id);
            assert.strictEqual(tenant.displayName, expectedTenant.displayName);
            assert.strictEqual(tenant.createdAt, expectedTenant.createdAt);
            assert.strictEqual(tenant.updatedAt, expectedTenant.updatedAt);
        }

        return callback(tenant);
    });
};

/**
 * Assert that a tenant can not be retrieved
 *
 * @param  {RestClient}         client              The REST client to make the request with
 * @param  {Number}             id                  The id of the tenant to retrieve
 * @param  {Number}             code                The expected HTTP error code
 * @param  {Function}           callback            Standard callback function
 * @throws {AssertionError}                         Error thrown when an assertion failed
 */
var assertGetTenantFails = module.exports.assertGetTenantFails = function(client, id, code, callback) {
    client.tenant.getTenant(id, function(err, tenant) {
        assert.ok(err);
        assert.strictEqual(err.code, code);
        assert.ok(!tenant);

        return callback();
    });
};

/**
 * Assert that a new tenant can be created
 *
 * @param  {RestClient}         client              The REST client to make the request with
 * @param  {String}             displayName         The name of the tenant
 * @param  {Function}           callback            Standard callback function
 * @param  {Tenant}             callback.tenant     The created tenant
 * @throws {AssertionError}                         Error thrown when an assertion failed
 */
var assertCreateTenant = module.exports.assertCreateTenant = function(client, displayName, callback) {
    client.tenant.createTenant(displayName, function(err, createdTenant) {
        assert.ok(!err);
        assert.ok(createdTenant);
        assert.ok(createdTenant.id);
        assert.ok(createdTenant.createdAt);
        assert.ok(createdTenant.updatedAt);
        assert.strictEqual(createdTenant.displayName, displayName);

        return callback(createdTenant);
    });
};

/**
 * Assert that a new tenant can not be created
 *
 * @param  {RestClient}         client              The REST client to make the request with
 * @param  {String}             displayName         The name of the tenant
 * @param  {Number}             code                The expected HTTP error code
 * @param  {Function}           callback            Standard callback function
 * @throws {AssertionError}                         Error thrown when an assertion failed
 */
var assertCreateTenantFails = module.exports.assertCreateTenantFails = function(client, displayName, code, callback) {
    client.tenant.createTenant(displayName, function(err, createdTenant) {
        assert.ok(err);
        assert.strictEqual(err.code, code);
        assert.ok(!createdTenant);

        return callback();
    });
};

/**
 * Assert that a tenant can be updated
 *
 * @param  {RestClient}         client              The REST client to make the request with
 * @param  {Tenant}             tenant              The tenant to update
 * @param  {String}             displayName         Updated tenant name
 * @param  {Function}           callback            Standard callback function
 * @param  {Tenant}             callback.tenant     The updated tenant
 * @throws {AssertionError}                         Error thrown when an assertion failed
 */
var assertUpdateTenant = module.exports.assertUpdateTenant = function(client, tenant, displayName, callback) {
    client.tenant.updateTenant(tenant.id, displayName, function(err, updatedTenant) {
        assert.ok(!err);
        assert.ok(updatedTenant);
        assert.strictEqual(updatedTenant.id, tenant.id);
        assert.strictEqual(updatedTenant.displayName, displayName);
        assert.strictEqual(updatedTenant.createdAt, tenant.createdAt);
        assert.notEqual(updatedTenant.updatedAt, tenant.updatedAt);

        return callback(updatedTenant);
    });
};

/**
 * Assert that a tenant can not be updated
 *
 * @param  {RestClient}         client              The REST client to make the request with
 * @param  {Number}             id                  The id of the tenant to update
 * @param  {String}             displayName         Updated tenant name
 * @param  {Number}             code                The expected HTTP error code
 * @param  {Function}           callback            Standard callback function
 * @throws {AssertionError}                         Error thrown when an assertion failed
 */
var assertUpdateTenantFails = module.exports.assertUpdateTenantFails = function(client, id, displayName, code, callback) {
    client.tenant.updateTenant(id, displayName, function(err, updatedTenant) {
        assert.ok(err);
        assert.strictEqual(err.code, code);
        assert.ok(!updatedTenant);

        return callback();
    });
};
