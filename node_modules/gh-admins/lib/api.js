/**
 * Copyright (c) 2014 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var DB = require('gh-core/lib/db');
var GrasshopperUtil = require('gh-core/lib/util');
var log = require('gh-core/lib/logger').logger('gh-users');

var AdminsDAO = require('./internal/dao');

/**
 * Get all global administrators
 *
 * @param  {Number}             [limit]                     The maximum number of results to retrieve. Default: 10
 * @param  {Number}             [offset]                    The paging number of the results to retrieve
 * @param  {Function}           callback                    Standard callback function
 * @param  {Object}             callback.err                An error object, if any
 * @param  {GlobalAdminList}    callback.globalAdmins       All available global administrators
 */
var getGlobalAdmins = module.exports.getGlobalAdmins = function(limit, offset, callback) {
    // TODO: Check that user is a global adminstrator

    // Ensure that the paging values are valid
    limit = GrasshopperUtil.getNumberParam(limit, 10, 1, 25);
    offset = GrasshopperUtil.getNumberParam(offset, 0, 0);

    AdminsDAO.getGlobalAdmins(limit, offset, callback);
};

/**
 * Get a global administrator by username
 *
 * @param  {String}             username                    The username of the global administrator to retrieve
 * @param  {Function}           callback                    Standard callback function
 * @param  {Object}             callback.err                An error object, if any
 * @param  {GlobalAdmin}        callback.globalAdmin        The requested global administrator
 */
var getGlobalAdminByUsername = module.exports.getGlobalAdminByUsername = function(username, callback) {
    // TODO: Check that user is a global adminstrator
    // TODO: username validation

    AdminsDAO.getGlobalAdminByUsername(username, callback);
};

/**
 * Create a new global administrator
 *
 * @param  {String}             username                    The username for the global administrator
 * @param  {String}             password                    The password for the global administrator
 * @param  {String}             displayName                 The name of the global administrator
 * @param  {Function}           callback                    Standard callback function
 * @param  {Object}             callback.err                An error object, if any
 * @param  {GlobalAdmin}        callback.globalAdmin        The created global administrator
 */
var createGlobalAdmin = module.exports.createGlobalAdmin = function(username, password, displayName, callback) {
    // TODO: Check that user is a global adminstrator
    // TODO: username validation
    // TODO: displayName validation
    // TODO: apssword validation

    // Ensure that a global administrator with the provided username doesn't alrady exist
    getGlobalAdminByUsername(username, function(err, globalAdmin) {
        if (!(err && err.code === 404)) {
            log().error({'err': err, 'username': username}, 'Failed to create a new global administrator');
            return callback({'code': 500, 'msg': 'A global administrator with the provided username already exists'});
        }

        AdminsDAO.createGlobalAdmin(username, password, displayName, callback);
    });
};

var updateGlobalAdmin = module.exports.updateGlobalAdmin = function(globalAdmin, displayName, callback) {

};

var updateGlobalAdminPassword = module.exports.updateGlobalAdminPassword = function(globalAdmin, password, callback) {

};
