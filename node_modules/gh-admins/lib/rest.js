/**
 * Copyright (c) 2014 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var GrassHopper = require('gh-core');

var AdminsAPI = require('gh-admins');

/**
 * @REST getGlobalAdmins
 *
 * Get all global administrators
 *
 * @Server      admin
 * @Method      GET
 * @Path        /admins
 * @QueryParam  {number}                [limit]                 The maximum number of results to retrieve. Default: 10
 * @QueryParam  {number}                [offset]                The paging number of the results to retrieve
 * @Return      {GlobalAdminList}                               The users for the requested tenant or app
 */
GrassHopper.globalAdminServer.on('get', '/api/admins', function(req, res) {
    AdminsAPI.getGlobalAdmins(req.query.limit, req.query.offset, function(err, globalAdmins) {
        if (err) {
            return res.status(err.code).send(err.msg);
        }

        res.status(200).send(globalAdmins);
    });
});

/**
 * @REST getMe
 *
 * Get the current global administrator
 *
 * @Server      admin
 * @Method      GET
 * @Path        /me
 * @Return      {Me}                                            The current global administrator
 */
GrassHopper.globalAdminServer.on('get', '/api/me', function(req, res) {
    res.send(501);
});

/**
 * @REST createGlobalAdmin
 *
 * Create a new global administrator
 *
 * @Server      admin
 * @Method      POST
 * @Path        /admins
 * @FormParam   {string}                displayName             The name of the global administrator
 * @FormParam   {string}                password                The password for the global administrator
 * @FormParam   {string}                username                The username for the global administrator
 * @Return      {GlobalAdmin}                                   The created global administrator
 */
GrassHopper.globalAdminServer.on('post', '/api/admins', function(req, res) {
    AdminsAPI.createGlobalAdmin(req.body.username, req.body.password, req.body.displayName, function(err, globalAdmin) {
        if (err) {
            return res.status(err.code).send(err.msg);
        }

        res.status(201).send(globalAdmin);
    });
});

/**
 * @REST updateGlobalAdmin
 *
 * Update a global administrator
 *
 * @Server      admin
 * @Method      POST
 * @Path        /admins/{id}
 * @PathParam   {number}                id                      The id of the global administrator to update
 * @FormParam   {string}                displayName             Updated global administrator name
 * @Return      {GlobalAdmin}                                   The updated global administrator
 */
GrassHopper.globalAdminServer.on('post', '/api/admins/:id', function(req, res) {
    res.send(501);
});

