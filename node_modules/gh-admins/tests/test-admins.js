/**
 * Copyright (c) 2015 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var _ = require('lodash');
var assert = require('assert');

var AuthTestsUtil = require('gh-auth/tests/util');
var TestsUtil = require('gh-tests/lib/util');

var AdminsTestsUtil = require('./util');

var anonymousGlobalAdminClient = null;
var globalAdminClient = null;

beforeEach(function(callback) {
    // Get the anonymous and authenticated global admin clients
    TestsUtil.getAnonymousGlobalAdminRestClient(function(_anonymousGlobalAdminClient) {
        anonymousGlobalAdminClient = _anonymousGlobalAdminClient;
        TestsUtil.getGlobalAdminRestClient(function(_globalAdminClient) {
            globalAdminClient = _globalAdminClient;
            return callback();
        });
    });
});

describe('Admins', function() {

    describe('Get Global Admins', function() {

        /**
         * Test that verifies a list of global admins can be fetched
         */
        it('verify a list of global admins can be fetched', function(callback) {
            // Ensure we have more than 1 global admin to test with
            AdminsTestsUtil.assertGetMe(globalAdminClient, function(globalAdmin) {
                var username = TestsUtil.generateTestUserId();
                AdminsTestsUtil.assertCreateGlobalAdmin(globalAdminClient, username, username, username, function(createdGlobalAdmin) {
                    // Get all global admins in pages, ensuring each page contains just 1 global
                    // admin, including the initial one and the created one
                    AdminsTestsUtil.assertGetAllGlobalAdmins(globalAdminClient, {'batchSize': 1}, function(allGlobalAdmins, responses) {
                        assert.ok(responses.length > 1);

                        // When fetching with size 1, we'll always have one extra request for the
                        // empty response. So subtract `responses.length` by 1 for the assertion
                        assert.strictEqual(allGlobalAdmins.length, responses.length - 1);
                        AdminsTestsUtil.assertGlobalAdmin(_.findWhere(allGlobalAdmins, {'id': globalAdmin.id}), {'exists': true});
                        AdminsTestsUtil.assertGlobalAdmin(_.findWhere(allGlobalAdmins, {'id': createdGlobalAdmin.id}), {'exists': true});
                        return callback();
                    });
                });
            });
        });

        /**
         * Test that verifies the authorization of getting a list of global admins
         */
        it('verify authorization of getting a list of global admins', function(callback) {
            // Ensure anonymous user cannot get global admin list
            return AdminsTestsUtil.assertGetGlobalAdminsFails(anonymousGlobalAdminClient, null, 401, callback);
        });
    });

    describe('Me', function() {

        /**
         * Test that verifies the "me" feed will be anonymous for anonymous users
         */
        it('verify the "me" feed will be anonymous for anonymous users', function(callback) {
            AdminsTestsUtil.assertGetMe(anonymousGlobalAdminClient, function(me) {
                AdminsTestsUtil.assertMe(me, {'authenticated': false});
                return callback();
            });
        });

        /**
         * Test that verifies the "me" feed will specify the expected admin's profile information
         */
        it('verify the "me" feed will specify the expected admin\'s profile information', function(callback) {
            var username = TestsUtil.generateTestUserId();
            AdminsTestsUtil.assertCreateGlobalAdmin(globalAdminClient, username, username, username, function(createdGlobalAdmin, createdGlobalAdminClient) {

                // Ensure the Me feed indicates the admin is logged in
                AdminsTestsUtil.assertGetMe(createdGlobalAdminClient, function(me) {
                    AdminsTestsUtil.assertMe(me, {'authenticated': createdGlobalAdmin});
                    return callback();
                });
            });
        });
    });

    describe('Create', function() {

        /**
         * Test that verifies the validation of creating a global admin
         */
        it('verify validation of creating a global admin', function(callback) {
            var username = TestsUtil.generateTestUserId();

            // Ensure parameter validation
            AdminsTestsUtil.assertCreateGlobalAdminFails(globalAdminClient, '', username, username, 400, function() {
                AdminsTestsUtil.assertCreateGlobalAdminFails(globalAdminClient, username, '', username, 400, function() {
                    AdminsTestsUtil.assertCreateGlobalAdminFails(globalAdminClient, username, username, '', 400, function() {

                        // Sanity check creation succeeds
                        AdminsTestsUtil.assertCreateGlobalAdmin(globalAdminClient, username, username, username, function(createdGlobalAdmin) {

                            // Ensure we cannot create an admin with the same username
                            return AdminsTestsUtil.assertCreateGlobalAdminFails(globalAdminClient, username, username, username, 400, callback);
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies the authorization of creating a global admin
         */
        it('verify authorization of creating a global admin', function(callback) {
            var username = TestsUtil.generateTestUserId();

            // Ensure anonymous can't create a global admin
            AdminsTestsUtil.assertCreateGlobalAdminFails(anonymousGlobalAdminClient, username, username, username, 401, function(createdGlobalAdmin) {

                // Sanity check global admin can create one
                AdminsTestsUtil.assertCreateGlobalAdmin(globalAdminClient, username, username, username, function(createdGlobalAdmin) {
                    return callback();
                });
            });
        });
    });

    describe('Update', function() {

        /**
         * Test that verifies a global admin can be updated
         */
        it('verify updating a global admin', function(callback) {
            var username = TestsUtil.generateTestUserId();
            AdminsTestsUtil.assertCreateGlobalAdmin(globalAdminClient, username, username, username, function(createdGlobalAdmin, createdGlobalAdminClient) {

                // Ensure a global admin can update their own properties, as well as another
                AdminsTestsUtil.assertUpdateGlobalAdmin(globalAdminClient, createdGlobalAdmin.id, 'display name', function() {
                    AdminsTestsUtil.assertUpdateGlobalAdmin(createdGlobalAdminClient, createdGlobalAdmin.id, username, function() {
                        return callback();
                    });
                });
            });
        });

        /**
         * Test that verifies the validation of updating a global admin
         */
        it('verify validation of updating a global admin', function(callback) {
            var username = TestsUtil.generateTestUserId();
            AdminsTestsUtil.assertCreateGlobalAdmin(globalAdminClient, username, username, username, function(createdGlobalAdmin, createdGlobalAdminClient) {

                // Ensure valid global admin id
                AdminsTestsUtil.assertUpdateGlobalAdminFails(globalAdminClient, '', 'display name', 400, function() {
                    AdminsTestsUtil.assertUpdateGlobalAdminFails(globalAdminClient, 'not an id', 'display name', 400, function() {

                        // Ensure valid display name
                        AdminsTestsUtil.assertUpdateGlobalAdminFails(globalAdminClient, createdGlobalAdmin.id, '', 400, function() {

                            // Ensure the display name hasn't changed
                            AdminsTestsUtil.assertGetMe(createdGlobalAdminClient, function(me) {
                                AdminsTestsUtil.assertMe(me, {'authenticated': createdGlobalAdmin});

                                // Sanity check we can udpate the display name
                                AdminsTestsUtil.assertUpdateGlobalAdmin(globalAdminClient, createdGlobalAdmin.id, 'display name', function() {
                                    return callback();
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies the authorization of updating a global admin
         */
        it('verify authorization of updating a global admin', function(callback) {
            var username = TestsUtil.generateTestUserId();
            AdminsTestsUtil.assertCreateGlobalAdmin(globalAdminClient, username, username, username, function(createdGlobalAdmin, createdGlobalAdminClient) {

                // Ensure anonymous user can't update a global admin
                AdminsTestsUtil.assertUpdateGlobalAdminFails(anonymousGlobalAdminClient, createdGlobalAdmin.id, 'display name', 401, function() {

                    // Ensure the created global admin hasn't changed
                    AdminsTestsUtil.assertGetMe(createdGlobalAdminClient, function(me) {
                        AdminsTestsUtil.assertMe(me, {'authenticated': createdGlobalAdmin});

                        // Sanity check we can update the created global admin
                        AdminsTestsUtil.assertUpdateGlobalAdmin(createdGlobalAdminClient, createdGlobalAdmin.id, 'display name', function() {
                            return callback();
                        });
                    });
                });
            });
        });
    });

    describe('Delete', function() {

        /**
         * Test that verifies a global admin can delete another global admin
         */
        it('verify a global admin can delete another global admin', function(callback) {
            // Create a global admin user that we can delete
            var username = TestsUtil.generateTestUserId();
            AdminsTestsUtil.assertCreateGlobalAdmin(globalAdminClient, username, username, username, function(createdGlobalAdmin) {

                // Delete the global admin, ensuring they no longer exist
                return AdminsTestsUtil.assertDeleteGlobalAdmin(globalAdminClient, createdGlobalAdmin.id, callback);
            });
        });

        /**
         * Test that verifies a global admin can delete their own user account
         */
        it('verify a global admin can delete their own user account', function(callback) {
            // Create a global admin to try and delete
            var username = TestsUtil.generateTestUserId();
            AdminsTestsUtil.assertCreateGlobalAdmin(globalAdminClient, username, username, username, function(createdGlobalAdmin, createdGlobalAdminClient) {
                return AdminsTestsUtil.assertDeleteGlobalAdmin(createdGlobalAdminClient, createdGlobalAdmin.id, callback);
            });
        });

        /**
         * Test that verifies the last global admin cannot be deleted
         */
        it('verify we cannot be left with no global admins', function(callback) {
            // Get the main global admin to try and delete
            AdminsTestsUtil.assertGetMe(globalAdminClient, function(globalAdminMe) {

                // Compile a list of all global admin ids except for the main one
                AdminsTestsUtil.assertGetAllGlobalAdmins(globalAdminClient, null, function(globalAdmins) {

                    // Delete all global admins except for the main one
                    var globalAdminIds = _.chain(globalAdmins)
                        .pluck('id')
                        .without(globalAdminMe.id)
                        .value();
                    AdminsTestsUtil.assertDeleteGlobalAdmins(globalAdminClient, globalAdminIds, function() {

                        // Ensure that the global admin now trying to delete themself (the only
                        // remaining global admin) fails
                        return AdminsTestsUtil.assertDeleteGlobalAdminFails(globalAdminClient, globalAdminMe.id, 400, callback);
                    });
                });
            });
        });

        /**
         * Test that verifies validation of the delete global admin parameters
         */
        it('verify validation of deleting a global admin', function(callback) {
            // Create a global administrator to sanity check deletes with
            var username = TestsUtil.generateTestUserId();
            AdminsTestsUtil.assertCreateGlobalAdmin(globalAdminClient, username, username, username, function(createdGlobalAdmin) {

                AdminsTestsUtil.assertDeleteGlobalAdminFails(globalAdminClient, 'not an id', 400, function() {
                    AdminsTestsUtil.assertDeleteGlobalAdminFails(globalAdminClient, '-1', 404, function() {

                        // Sanity check we can delete a global admin
                        return AdminsTestsUtil.assertDeleteGlobalAdmin(globalAdminClient, createdGlobalAdmin.id, callback);
                    });
                });
            });
        });

        /**
         * Test that verifies the authorization of deleting a global admin
         */
        it('verify authorization of deleting a global admin', function(callback) {
            var username = TestsUtil.generateTestUserId();
            AdminsTestsUtil.assertCreateGlobalAdmin(globalAdminClient, username, username, username, function(createdGlobalAdmin) {

                // Ensure anonymous cannot delete a global admin
                AdminsTestsUtil.assertDeleteGlobalAdminFails(anonymousGlobalAdminClient, createdGlobalAdmin.id, 401, function() {

                    // Sanity check we can delete the global admin
                    return AdminsTestsUtil.assertDeleteGlobalAdmin(globalAdminClient, createdGlobalAdmin.id, callback);
                });
            });
        });
    });
});
