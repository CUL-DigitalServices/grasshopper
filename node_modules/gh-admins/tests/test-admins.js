/**
 * Copyright (c) 2015 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var _ = require('lodash');
var assert = require('assert');

var AuthTestsUtil = require('gh-auth/tests/util');
var TestsUtil = require('gh-tests/lib/util');

var AdminsTestsUtil = require('./util');

describe('Admins', function() {

    describe('Delete', function() {

        /**
         * Test that verifies a global admin can delete another global admin
         */
        it('verify a global admin can delete another global admin', function(callback) {
            // Create the global admin rest client to test with
            TestsUtil.getGlobalAdminRestClient(function(globalAdminClient) {

                // Create a global admin user that we can delete
                var username = TestsUtil.generateTestUserId();
                AdminsTestsUtil.assertCreateGlobalAdmin(globalAdminClient, username, username, username, function(createdGlobalAdmin) {

                    // Delete the global admin, ensuring they no longer exist
                    return AdminsTestsUtil.assertDeleteGlobalAdmin(globalAdminClient, createdGlobalAdmin.id, callback);
                });
            });
        });

        /**
         * Test that verifies a global admin can delete their own user account
         */
        it('verify a global admin can delete their own user account', function(callback) {
            TestsUtil.getGlobalAdminRestClient(function(globalAdminClient) {
                var username = TestsUtil.generateTestUserId();
                AdminsTestsUtil.assertCreateGlobalAdmin(globalAdminClient, username, username, username, function(createdGlobalAdmin) {

                    // Delete the global admin, ensuring they no longer exist
                    return AdminsTestsUtil.assertDeleteGlobalAdmin(globalAdminClient, createdGlobalAdmin.id, callback);
                });
            });
        });

        /**
         * Test that verifies the last global admin cannot be deleted
         */
        it('verify we cannot be left with no global admins', function(callback) {
            TestsUtil.getGlobalAdminRestClient(function(globalAdminClient) {

                // Get the main global admin to try and delete them
                AdminsTestsUtil.assertGetMe(globalAdminClient, function(globalAdminMe) {

                    // Compile a list of all global admin ids except for the main one
                    AdminsTestsUtil.assertGetAllGlobalAdmins(globalAdminClient, null, function(globalAdmins) {

                        // Delete all global admins except for the main one
                        var globalAdminIds = _.chain(globalAdmins)
                            .pluck('id')
                            .without(globalAdminMe.id)
                            .value();
                        AdminsTestsUtil.assertDeleteGlobalAdmins(globalAdminClient, globalAdminIds, function() {

                            // Ensure that the global admin now trying to delete themself (the only
                            // remaining global admin) fails
                            return AdminsTestsUtil.assertDeleteGlobalAdminFails(globalAdminClient, globalAdminMe.id, 400, callback);
                        });
                    });
                });
            });
        });
    });
});
