/**
 * Copyright (c) 2015 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var _ = require('lodash');
var assert = require('assert');
var util = require('util');

var AuthTestsUtil = require('gh-auth/tests/util');
var TestsUtil = require('gh-tests/lib/util');

/**
 * Ensure the global admin passes all provided assertions
 *
 * @param  {GlobalAdmin}    globalAdmin             The global admin on which to perform assertions
 * @param  {Object}         assertions              An object specifying the assertions to perform
 * @param  {Object}         [assertions.equals]     Perform a strict equality check on the global admin with the given object
 * @param  {Boolean}        [assertions.exists]     Specifies if the global admin should exist (i.e., not be falsey)
 * @param  {Object}         [assertions.has]        Specifies individual properties (an incomplete set of property assertions) that should exist and have a specified value
 * @param  {String[]}       [assertions.missing]    Specifies property keys that should not be present on the global admin
 * @throws {AssertionError}                         Thrown if any of the specified assertions fail
 */
var assertGlobalAdmin = module.exports.assertGlobalAdmin = function(globalAdmin, assertions) {
    if (_.isEmpty(assertions)) {
        assert.fail('Expected at least one assertion');
    }

    _.each(assertions, function(val, name) {
        if (name === 'equals') {
            // Equality assertion, ensure the global admin shares all the properties of the `val`
            assert.deepEqual(globalAdmin, val, 'Expected global admin to be equal, but it was different');
        } else if (name === 'exists') {
            // Existential assertion, just ensure the global admin is truthy
            if (val) {
                assert.ok(globalAdmin, 'Expected global admin to exist, but it was falsey');
            } else {
                assert.ok(!globalAdmin, 'Expected global admin to be falsey, but it existed');
            }
        } else if (name === 'has') {
            _.each(val, function(val, key) {
                assert.strictEqual(globalAdmin[key], val, util.format('Expected "%s" to equal "%s" but it was different', key, val));
            });
        } else if (name === 'missing') {
            var invalidKeys = _.chain(globalAdmin)
                .keys()
                .intersection(val)
                .value();
            assert.ok(_.isEmpty(invalidKeys), util.format('Invalid keys existed on global admin profile: "%s"', invalidKeys.join('", "')));
        } else {
            assert.fail('Invalid assertion name specified');
        }
    });
};

/**
 * Get all global admins available. This automatically pages through the global admins if there are
 * more than expected on the first page
 *
 * @param  {RestClient}     client                  The REST client to make the request with
 * @param  {Object}         opts                    Optional arguments
 * @param  {Number}         opts.batchSize          The size of batches for the paging requests
 * @param  {Function}       callback                Invoked when all global admins have been fetched
 * @param  {GlobalAdmin[]}  callback.globalAdmins   All global admins in the system
 * @throws {AssertionError}                         Thrown if any request or assertions fail
 */
var assertGetAllGlobalAdmins = module.exports.assertGetAllGlobalAdmins = function(client, opts, callback, _allGlobalAdmins, _allResponses, _offset) {
    _offset = _offset || 0;

    opts = opts || {};
    opts = _.defaults(opts, {'batchSize': 50});

    // Get the next page of global admins
    var requestOpts = {'limit': opts.batchSize, 'start': _offset};
    assertGetGlobalAdmins(client, requestOpts, function(response) {
        _allGlobalAdmins = _.union(_allGlobalAdmins, response.rows);
        if (response.rows.length < opts.batchSize) {
            return callback(_allGlobalAdmins);
        }

        return assertGetAllGlobalAdmins(client, opts, callback, _allGlobalAdmins, _offset + opts.batchSize);
    });
};

/**
 * Get a page of global admins in the system, ensuring that it passes basic assertions about the
 * result
 *
 * @param  {RestClient}         client              The REST client to make the request with
 * @param  {Object}             [opts]              Optional parameters
 * @param  {Number}             [opts.limit]        The maximum number of items to return
 * @param  {Number}             [opts.offset]       The offset at which to start returning items
 * @param  {Function}           callback            Invoked when the global admins have been fetched and validated
 * @param  {GlobalAdminList}    callback.response   The global admin list response
 * @throws {AssertionError}                         Thrown if any request or assertions fail
 */
var assertGetGlobalAdmins = module.exports.assertGetGlobalAdmins = function(client, opts, callback) {
    client.admin.getGlobalAdmins(opts, function(err, response) {
        assert.ok(!err);
        assert.ok(response);
        assert.ok(_.isNumber(response.count));
        assert.ok(response.count >= response.rows.length);
        return callback(response);
    });
};

/**
 * Create a global administrator, ensuring the user is created as expected
 *
 * @param  {RestClient}     client                  The REST client to make the request with
 * @param  {String}         username                The username of the global administrator
 * @param  {String}         password                The password of the global administrator
 * @param  {String}         displayName             The display name of the global administrator
 * @param  {Function}       callback                Invoked when the global admin is successfully created
 * @param  {Object}         callback.err            An error that occurred, if any
 * @param  {GlobalAdmin}    callback.globalAdmin    The global admin that was created
 * @throws {AssertionError}                         Thrown if any request or assertions fail
 */
var assertCreateGlobalAdmin = module.exports.assertCreateGlobalAdmin = function(client, username, password, displayName, callback) {
    client.admin.createGlobalAdmin(username, password, displayName, function(err, globalAdmin) {
        assert.ok(!err);

        // Ensure the returned global admin has the expected properties
        assertGlobalAdmin(globalAdmin, {
            'has': {
                'username': username,
                'displayName': displayName
            },
            'missing': ['password']
        });

        // Ensure re-accessing the admin from the server has the expected properties
        assertGetAllGlobalAdmins(client, null, function(globalAdmins) {
            globalAdmin = _.findWhere(globalAdmins, {'id': globalAdmin.id});
            assertGlobalAdmin(globalAdmin, {
                'has': {
                    'username': username,
                    'displayName': displayName
                },
                'missing': ['password']
            });

            return callback(globalAdmin);
        });
    });
};

/**
 * Delete all global administrators identified by the list of ids, ensuring that all the deletes
 * have the expected side effects
 *
 * @param  {RestClient}     client      The REST client to make the request with
 * @param  {String[]}       ids         The ids of the global admins to delete
 * @param  {Function}       callback    Invoked when all global admins are successfully deleted
 * @throws {AssertionError}             Thrown if any request or assertions fail
 */
var assertDeleteGlobalAdmins = module.exports.assertDeleteGlobalAdmins = function(client, ids, callback) {
    if (_.isEmpty(ids)) {
        return callback();
    }

    ids = ids.slice();
    assertDeleteGlobalAdmin(client, ids.shift(), function() {
        return assertDeleteGlobalAdmins(client, ids, callback);
    });
};

/**
 * Delete a global administrator, ensuring the user is created as expected
 *
 * @param  {RestClient}     client                  The REST client to make the request with
 * @param  {Number}         id                      The id of the global admin to delete
 * @param  {Function}       callback                Standard callback function
 * @param  {GlobalAdmin}    callback.globalAdmin    The global admin that was created
 * @throws {AssertionError}                         Thrown if any request or assertions fail
 */
var assertDeleteGlobalAdmin = module.exports.assertDeleteGlobalAdmin = function(client, id, callback) {
    // Get the global admin user we're about to delete
    assertGetAllGlobalAdmins(client, null, function(globalAdmins) {
        var globalAdmin = _.findWhere(globalAdmins, {'id': id});

        // Delete the global admin
        client.admin.deleteGlobalAdmin(id, function(err) {
            assert.ok(!err);

            // Ensure the global admin no longer exists
            assertGetAllGlobalAdmins(client, null, function(globalAdmins) {
                assertGlobalAdmin(_.findWhere(globalAdmins, {'id': id}), {'exists': false});

                // Ensure we can no longer authenticate as this global admin
                TestsUtil.getAnonymousGlobalAdminRestClient(function(anonymousClient) {
                    return AuthTestsUtil.assertLoginFails(anonymousClient, globalAdmin.username, globalAdmin.password, callback);
                });
            });
        });
    });
};

/**
 * Attempt to delete a global administrator, ensuring that the request fails in the expected manner
 *
 * @param  {RestClient}     client      The REST client to make the request with
 * @param  {String}         id          The id of the global admin to attempt to delete
 * @param  {Number}         code        The expected HTTP code of the delete request
 * @param  {Function}       callback    Invoked when all assertions succeed
 * @throws {AssertionError}             Thrown if the request does not fail in the expected manner
 */
var assertDeleteGlobalAdminFails = module.exports.assertDeleteGlobalAdminFails = function(client, id, code, callback) {
    client.admin.deleteGlobalAdmin(id, function(err) {
        assert.ok(err);
        assert.strictEqual(err.code, code);
        return callback();
    });
};

/**
 * Get the "me" object of the currently authenticated user, assuming we have a global administrator
 * authenticated
 *
 * @param  {RestClient}     client      The REST client to make the request with
 * @param  {Function}       callback    Invoked when all assertions succeed
 * @throws {AssertionError}             Thrown if any request or assertions fail
 */
var assertGetMe = module.exports.assertGetMe = function(client, callback) {
    client.admin.getMe(function(err, me) {
        assert.ok(!err);
        return callback(me);
    });
};
