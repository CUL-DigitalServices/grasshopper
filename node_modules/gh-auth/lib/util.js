/**
 * Copyright (c) 2014 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var crypto = require('crypto');

/**
 * Hashes a string using SHA512
 *
 * @param  {String}     password        The password that needs to be hashed
 * @param  {String}     [salt]          A random salt that will be prepended to the password for hashing, if no value is provided, a random value will be generated for you
 * @return {String}                     The hashed password
 */
var hashPassword = module.exports.hashPassword = function(password, salt) {
    // Prepend a random number to prevent rainbow table attacks
    salt = salt || crypto.randomBytes(16).toString('hex');
    password = salt + password;
    return salt + '$' + crypto.createHash('sha512').update(password).digest('hex');
};

/**
 * Checks whether a provided plain-text password matches a stored hashed password
 *
 * @param  {String}     plainTextPassword   The plain-text password provided by the user
 * @param  {String}     hashedPassword      The hashed password stored for the user
 * @return {Boolean}                        True if the provided password matches the stored hashed password, false if they are different
 */
var comparePassword = module.exports.comparePassword = function(plainTextPassword, hashedPassword) {
    // Get the salt of the hashed password
    var salt = hashedPassword.split('$')[0];

    // Check if the provided password with the extracted salt is the same as the stored password
    return (hashPassword(plainTextPassword, salt) === hashedPassword);
};
