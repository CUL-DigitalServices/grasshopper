/**
 * Copyright (c) 2014 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var bcrypt = require('bcryptjs');

var log = require('gh-core/lib/logger').logger('gh-auth');

/**
 * Hash a password
 *
 * @param  {String}     password                        The password to hash
 * @param  {Function}   callback                        Standard callback function
 * @param  {Object}     callback.err                    An error that occurred, if any
 * @param  {String}     callback.hashedPassword         The hashed password
 */
var hashPassword = module.exports.hashPassword = function(password, callback) {
    bcrypt.hash(password, 8, function(err, hash) {
        if (err) {
            log().error({'err': err, 'password': password}, 'Failed to hash a password');
            return callback({'code': 500, 'msg': 'An error occured when hashing a password'});
        }

        return callback(null, hash);
    });
};

/**
 * Compare a password against a password hash
 *
 * @param  {String}     password                        The password to compare against the password hash
 * @param  {String}     hashedPassword                  The hashed password to compare against the password
 * @param  {Function}   callback                        Standard callback function
 * @param  {Object}     callback.err                    An error that occurred, if any
 * @param  {Boolean}    callback.match                  Whether the password and the compared password match
 */
var comparePassword = module.exports.comparePassword = function(password, hashedPassword, callback) {
    bcrypt.compare(password, hashedPassword, function(err, match) {
        if (err) {
            log().error({'err': err, 'password': password}, 'Failed to compare a password against a hashed password');
            return callback({'code': 500, 'msg': 'An error occured when comparing a password against a hashed password'});
        }

        return callback(null, match);
    });
};
