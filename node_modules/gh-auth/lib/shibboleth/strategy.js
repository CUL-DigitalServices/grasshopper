/**
 * Copyright (c) 2014 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var passport = require('passport');
var util = require('util');

var ConfigAPI = require('gh-config');

var AuthConstants = require('gh-auth/lib/constants');

/**
 * A Shibboleth passport authentication strategy
 *
 * @param  {Function}   verify                  A standard passport verify function that gets called so the user account can be retrieved or created
 * @param  {Object}     verify.profile          An object that contains the profile information. The amount of information in this object depends on the amount of attributes released by the IdP
 * @param  {Function}   verify.done             A function that should be executed once the user account has been retrieved or created
 * @param  {Object}     verify.done.err         An error that occured, if any
 * @param  {User}       verify.done.user        The user object
 * @param  {Boolean}    verify.done.created     Whether or not a new user was created
 */
var Strategy = function(verify) {
    this.name = AuthConstants.strategies.SHIBBOLETH;
    this.verify = verify;
    passport.Strategy.call(this);
};

/**
 * Inherit from `passport.Strategy`.
 */
util.inherits(Strategy, passport.Strategy);

/**
 * Authenticate request based on the contents of request headers
 *
 * @param  {Request}    req             The ExpressJS request object
 * @param  {App}        app             The application to which the user should be authenticated
 * @api protected
 */
Strategy.prototype.authenticate = function(req, app) {
    var self = this;

    /*
     * If the user has authenticated through Shibboleth and is returning from the Identity Provider (IdP),
     * there should be a `shib-session-id` header in the request. If the user is indicating that he
     * wants to log in with Shibboleth, no such header will be present.
     *
     * It's up to the front-end load-balancer to *NOT* proxy these headers.
     */
    var sessionId = req.headers['shib-session-id'];
    if (sessionId) {
        /*
         * The user is coming back from the IdP. mod_shib will pass all the user his attributes as headers.
         *
         * The following is a subset of the possible headers that the Shibboleth SP software proxies:
         *  - remote_user                   :   Identifies the user with the application. Shibboleth needs to have been configured appropriately so that it knows on which attributes this value is based on
         *  - Shib-Application-ID           :   The applicationId property derived for the request.
         *  - Shib-Session-ID               :   The internal session key assigned to the session associated with the request.
         *  - Shib-Identity-Provider        :   The entityID of the IdP that authenticated the user associated with the request.
         *
         * Depending on what profile attributes the IdP releases, other headers might be in the request.
         * As the headers are exposed as a simple JSON object on the request, we can pass them straight
         * into the verify function, which can then take care of getting/creating the OAE user object.
         */
        self.verify(req, app, req.headers, function(err, user) {
            if (err) {
                return self.error(new Error(err.msg));
            }

            // We pass the user object on to passport so it can be stored in the express session object
            return self.success(user);
        });
    } else {
        /*
         * There is no session yet. We redirect the user to Shibboleth. We append the entityID of the IdP
         * in the redirectUrl so mod_shib knows where to send the user. The IdP's entityID is crucial so it
         * has to be configured in order for this to work
         *
         * For example, If we want to authentication with the Cambridge IdP
         *      /Shibboleth.sso/Login?target=/api/auth/shibboleth/sp/callback&entityId=https://shib.raven.cam.ac.uk/shibboleth
         *
         * The `target` parameter in the above example is where the IdP should send the user to
         * once he is succesfully logged in
         */
        var shibIdpEntityId = ConfigAPI.config(app.id).shibIdpEntityId;
        if (!shibIdpEntityId) {
            self.redirect('/?authentication=failed&reason=misconfigured');
        }
        var redirectUrl = util.format('/Shibboleth.sso/Login?target=%s', encodeURIComponent('/api/auth/shibboleth/sp/callback'));
        redirectUrl += util.format('&entityID=%s', encodeURIComponent(shibIdpEntityId));
        return self.redirect(redirectUrl);
    }
};

/**
 * Expose `Strategy`
 */
module.exports = Strategy;
