/**
 * Copyright (c) 2014 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var GrassHopper = require('gh-core');

/**
 * @REST logout
 *
 * Log out
 *
 * @Server      admin,app
 * @Method      POST
 * @Path        /auth/logout
 * @Return      {void}
 */
var logout = function(req, res) {
    res.send(501);
};

GrassHopper.globalAdminServer.post('/api/auth/logout', logout);
GrassHopper.appServer.post('/api/auth/logout', logout);


//////////////////////////
// Local authentication //
//////////////////////////

/**
 * @REST localLogin
 *
 * Log in using local authentication
 *
 * @Server      admin,app
 * @Method      POST
 * @Path        /auth/login
 * @FormParam   {string}        password                    The password for the user
 * @FormParam   {string}        username                    The username for the user
 * @Return      {User}                                      The logged in user
 */
var localLogin = function(req, res) {
    res.send(501);
};

GrassHopper.globalAdminServer.post('/api/auth/login', localLogin);
GrassHopper.appServer.post('/api/auth/login', localLogin);

/**
 * @REST changePassword
 *
 * Change a user's local password
 *
 * @Server      admin,app
 * @Method      POST
 * @Path        /users/{id}/password
 * @PathParam   {string}        id                          The id of user for which to change the local password
 * @FormParam   {string}        newPassword                 The new password for the user
 * @FormParam   {string}        [oldPassword]               The previous password for the user. This is only required when the current user is not an administrator
 * @Return      {void}
 */
var changePassword = function(req, res) {
    res.send(501);
};

GrassHopper.globalAdminServer.post('/api/users/:id/password', changePassword);
GrassHopper.appServer.post('/api/users/:id/password', changePassword);


///////////////////////////////
// Shibboleth authentication //
///////////////////////////////

/**
 * @REST shibbolethLogin
 *
 * Log in using Shibboleth authentication
 *
 * @Server      app
 * @Method      POST
 * @Path        /auth/shibboleth
 * @Return      {void}
 */
GrassHopper.appServer.post('/api/auth/shibboleth', function(req, res) {
    res.send(501);
});

/**
 * @REST redirectToIdentityProvider
 *
 * Redirect the user to the configured identity provider
 *
 * @Api         private
 * @Server      app
 * @Method      GET
 * @Path        /auth/shibboleth/sp
 * @QueryParam  {string}        [app]                       The id of the app on which the user wants to authenticate
 * @QueryParam  {string}        [signature]                 The signature for the app id
 * @QueryParam  {number}        [expires]                   The timestamp (millis since epoch) at which the signature expires
 * @Return      {void}
 */
GrassHopper.appServer.get('/api/auth/shibboleth/sp', function(req, res) {
    res.send(501);
});

/**
 * @REST identityProviderCallback
 *
 * Authenticate the user and redirect back to the originating app
 *
 * @Api         private
 * @Server      app
 * @Method      GET
 * @Path        /auth/shibboleth/sp/callback
 * @Return      {void}
 */
GrassHopper.appServer.get('/api/auth/shibboleth/sp/callback', function(req, res) {
    res.send(501);
});

/**
 * @REST redirectToOriginatingApp
 *
 * Redirect an authenticated user back to their originating app
 *
 * @Api         private
 * @Server      app
 * @Method      GET
 * @Path        /auth/shibboleth/callback
 * @QueryParam  {number}        [userId]                    The id of the user that needs to be signed in
 * @QueryParam  {string}        [signature]                 The signature for the user id
 * @QueryParam  {number}        [expires]                   The timestamp (millis since epoch) at which the signature expires
 * @Return      {void}
 */
GrassHopper.appServer.get('/api/auth/shibboleth/callback', function(req, res) {
    res.send(501);
});
