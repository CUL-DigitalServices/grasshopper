/**
 * Copyright (c) 2014 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var util = require('util');

var AppsDAO = require('gh-apps/lib/internal/dao');
var ConfigAPI = require('gh-config');
var Context = require('gh-context').Context;
var GrasshopperUtil = require('gh-core/lib/util');
var Signature = require('gh-core/lib/signature');
var UsersDAO = require('gh-users/lib/internal/dao');
var Validator = require('gh-core/lib/validator').Validator;

var config = null;

/**
 * Refresh the shibboleth configuration
 *
 * @param  {Object}     _config     The configuration object as defined in `config.js`
 */
var refreshConfiguration = module.exports.refreshConfiguration = function(_config) {
    config = _config;
};

/**
 * Get the hostname of the "application" that is exposing the SP logic
 *
 * @return {String}     The hostname of the "application" that is exposing the SP logic
 */
var getSPHost = module.exports.getSPHost = function() {
    return config.servers.shibbolethSPHost;
};

/**
 * Whether or not the Shibboleth authentication strategy is enabled for a given application
 *
 * @param  {Number}         id          The id of the application to check for
 * @return {Boolean}                    `true` if Shibboleth authentication is enabled, `false` otherwise
 */
var isEnabled = module.exports.isEnabled = function(id) {
    return ConfigAPI.config(id).enableShibbolethAuth;
};

/**
 * Get the url to the Shibboleth Service Provider.
 *
 * @param  {Number}     app         The id of the application for which to get the Shibboleth Service Provider URL
 * @return {String}                 The URL to the Shibboleth Service Provider
 */
var getServiceProviderUrl = module.exports.getServiceProviderUrl = function(app) {
    // The URL at which the Shibboleth SP software (`Apache` + `mod_shib`) is running
    var spURL = util.format('https://%s', getSPHost());

    // Generate a signature
    var data = {'app': app};
    var signature = Signature.createExpiringSignature(data, 60, 60);

    // Create and return the full URL
    return util.format('%s/api/auth/shibboleth/sp?app=%s&signature=%s&expires=%s', spURL, app, signature.signature, signature.expires);
};

/**
 * Validate the given application id and signature parameters. This method will ensure
 * that an application with the given id exists and has enabled Shibboleth as
 * one of their authentication strategies.
 *
 * @param  {Number}     app                 The id of the application to validate and retrieve
 * @param  {String}     signature           The signature for the app id
 * @param  {Number}     expires             When the signature expires (in ms since epoch)
 * @param  {Function}   callback            Standard callback function
 * @param  {Object}     callback.err        An error object, if any
 * @param  {App}        callback.app        The full application object for the given id
 */
var validateInitiateParameters = module.exports.validateInitiateParameters = function(app, signature, expires, callback) {
    app = GrasshopperUtil.getNumberParam(app);
    expires = GrasshopperUtil.getNumberParam(expires);

    var validator = new Validator();
    validator.check(app, {'code': 400, 'msg': 'Missing tenant alias parameter'}).notEmpty(app);
    validator.check(signature, {'code': 400, 'msg': 'Missing signature parameter'}).notEmpty(signature);
    validator.check(expires, {'code': 400, 'msg': 'Missing expires parameter'}).notEmpty(expires);
    validator.check(expires, {'code': 400, 'msg': 'Invalid expires parameter'}).isNumeric();
    validator.check(expires, {'code': 400, 'msg': 'Invalid expires parameter'}).min(Date.now());
    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    }

    var data = {'app': app};
    var isValid = Signature.verifyExpiringSignature(data, expires, signature);
    if (!isValid) {
        return callback({'code': 401, 'msg': 'Invalid or missing signature parameters'});
    }

    return getShibbolethEnabledApplication(app, callback);
};

/**
 * Given an application id, get the full app object. This method will
 * perform some extra validation such as checking whether an application
 * with that id exists and whether Shibboleth is enabled for
 * the specified application
 *
 * @param  {Number}     app                 The id of the application to retrieve
 * @param  {Function}   callback            Standard callback function
 * @param  {Object}     callback.err        An error object, if any
 * @param  {App}        callback.app        The full app object for the given id
 */
var getShibbolethEnabledApplication = module.exports.getShibbolethEnabledApplication = function(app, callback) {
    AppsDAO.getApp(app, function(err, app) {
        if (err) {
            return callback(err);
        } else if (!isEnabled(app.id)) {
            return callback({'code': 400, 'msg': 'Shibboleth is not enabled for this application'});
        }

        return callback(null, app);
    });
};

/**
 * Get the URL to which a user should be redirected once `mod_shib` has
 * validated the request. This URL will contain a signed user ID
 *
 * @param  {App}        app         The application to which the users should be redirected back
 * @param  {User}       user        The user object identifying the user who should be authenticated on the application
 * @return {String}                 The full URL to which the user should be redirected
 */
var getAuthenticatedUserRedirectUrl = module.exports.getAuthenticatedUserRedirectUrl = function(app, user) {
    var data = {'user': user.id};
    var signature = Signature.createExpiringSignature(data, 60, 60);
    return util.format('https://%s/api/auth/shibboleth/callback?user=%s&signature=%s&expires=%s', app.host, user.id, signature.signature, signature.expires);
};

/**
 * Get a user by its id. A signature is passed in that will be validated prior
 * to retrieving the user object
 *
 * @param  {App}        app                 The application on which the user is trying to log on
 * @param  {Number}     user                The id of the user that should be retrieved
 * @param  {String}     signature           The signature for the tenant alias
 * @param  {Number}     expires             When the signature expires (in ms since epoch)
 * @param  {Function}   callback            Standard callback function
 * @param  {Object}     callback.err        An error object, if any
 * @param  {User}       callback.user       The retrieved user
 */
var getUser = module.exports.getUser = function(app, user, signature, expires, callback) {
    user = GrasshopperUtil.getNumberParam(user);
    expires = GrasshopperUtil.getNumberParam(expires);

    var validator = new Validator();
    validator.check(user, {'code': 400, 'msg': 'Missing user id parameter'}).notEmpty(user);
    validator.check(user, {'code': 400, 'msg': 'Invalid user id parameter'}).isNumeric();
    validator.check(signature, {'code': 400, 'msg': 'Missing signature parameter'}).notEmpty(signature);
    validator.check(expires, {'code': 400, 'msg': 'Missing expires parameter'}).notEmpty(expires);
    validator.check(expires, {'code': 400, 'msg': 'Invalid expires parameter'}).isNumeric();
    validator.check(expires, {'code': 400, 'msg': 'Invalid expires parameter'}).min(Date.now());
    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    }

    // Ensure the signature is valid
    var data = {'user': user};
    var isValid = Signature.verifyExpiringSignature(data, expires, signature);
    if (!isValid) {
        return callback({'code': 401, 'msg': 'Invalid or missing signature parameters'});

    // Ensure Shibboleth is enabled on this application
    } else if (!isEnabled(app.id)) {
        return callback({'code': 400, 'msg': 'Shibboleth authentication is not enabled on this application'});
    }

    // Get the user from the database
    UsersDAO.getUser(user, callback);
};
