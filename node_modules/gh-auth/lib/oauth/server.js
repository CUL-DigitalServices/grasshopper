/**
 * Copyright (c) 2015 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var _ = require('lodash');
var oauth2orize = require('oauth2orize');
var passport = require('passport');
var util = require('util');

var log = require('gh-core/lib/logger').logger('gh-auth-oauth');

var AuthOauth = require('../oauth');
var AuthOauthDAO = require('./dao');

var server = oauth2orize.createServer();

/*!
 * Implements the exchange phase in the OAuth workflow, which essentially trades an authorization
 * code (that was acquired in the grant phase) for an access token. The access token can then be
 * used directly in the `Authorization: Bearer <accessToken>` header to invoke actions on behalf of
 * the user who granted it
 */
server.exchange(oauth2orize.exchange.code({'userProperty': 'ghAuthInfo'}, function(ghAuthInfo, code, redirectUri, done) {
    // The request should be authenticated with an oauth client in order to perform the exchange. This
    // means that the request should have been invoked through an endpoint that supports client
    // credentials (i.e., client id and client secret) and that the request was successfully
    // authenticated with those credentials
    if (_.isEmpty(ghAuthInfo) || _.isEmpty(ghAuthInfo.oauthClient)) {
        log().error({
            'err': {
                'code': 401,
                'msg': 'Not authorized to acquire an access token'
            }
        }, 'An error occurred attempting to authenticate to exchange an access token');
        return done(null, false, 'Not authorized to acquire an access token');
    }

    // The request is authenticated, so we can safely perform the exchange using the Oauth API. The
    // API will perform further non-authentication-related validations, such as ensuring the auth
    // code maps to an actual authorization code, and that the redirect uri is valid
    AuthOauth.exchangeAuthCode(ghAuthInfo.oauthClient, code, redirectUri, function(err, token) {
        if (err) {
            log().error({'err': err}, 'An error occurred attempting to exchange an access token');
            return done(null, false);
        }

        return done(null, token);
    });
}));

// The middleware chain for the token exchange workflow. First we authenticate with client
// credentials, then we perform the token grant using the oauth2orize server object
module.exports.token = [
    passport.authenticate(['basic', 'oauth2-client-password'], {'session': false}),
    server.token(),
    server.errorHandler()
];
