/**
 * Copyright (c) 2015 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var _ = require('lodash');
var Chance = new require('chance');

var ALPHABET = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';

/**
 * Generate a randomized client secret. Should be super secret!
 *
 * @return {String}     The random client secret
 */
var generateClientSecret = module.exports.generateClientSecret = function() {
    return (new Chance()).string({'length': 256, 'pool': ALPHABET});
};

/**
 * Generate a randomized authorization code. Should be pretty secret, but it expires in 10 minutes.
 *
 * @return {String}     The random client authorization code
 */
var generateAuthCode = module.exports.generateAuthCode = function() {
    return (new Chance()).string({'length': 16, 'pool': ALPHABET});
};

/**
 * Generate a randomized access token. Should be super secret!
 *
 * @return {String}     The random access token
 */
var generateAccessToken = module.exports.generateAccessToken = function() {
    return (new Chance()).string({'length': 256, 'pool': ALPHABET});
};

/**
 * Transform the given client so that it is safe to be sent to the current user in context
 *
 * @param  {Context}        ctx     The context of the current request
 * @param  {OauthClient}    client  The oauth client to transform
 * @return {OauthClient}            The version of the oauth client with some optional parameters scrubbed (e.g., secret)
 */
var transformClient = module.exports.transformClient = function(ctx, client) {
    var fields = ['AppId', 'id', 'displayName', 'redirectUri', 'disabled', 'createdAt', 'updatedAt'];
    if (ctx.user.canAdmin(client.AppId)) {
        fields.push('secret');
    }

    return _.pick(client, fields);
};

/**
 * Transform the given access token so that it is safe to be sent to the current user in context
 *
 * @param  {Context}            ctx             The context of the current request
 * @param  {OauthAccessToken}   accessToken     The oauth access token to transform
 * @return {OauthClient}                        The version of the oauth access token with some optional parameters scrubbed (e.g., oauth client secret)
 */
var transformAccessToken = module.exports.transformAccessToken = function(ctx, accessToken) {
    var fields = ['id', 'token', 'OauthClientId', 'UserId', 'User', 'createdAt', 'updatedAt'];

    // Transform the client if it was joined into the model
    if (accessToken.OauthClient) {
        accessToken.OauthClient = transformClient(ctx, accessToken.OauthClient);
        fields.push('OauthClient');
    }

    return _.pick(accessToken, fields);
};
