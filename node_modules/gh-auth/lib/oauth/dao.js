/**
 * Copyright (c) 2015 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var _ = require('lodash');

var DB = require('gh-core/lib/db');
var DBUtil = require('gh-core/lib/db/util');
var log = require('gh-core/lib/logger').logger('gh-auth-oauth');

/**
 * Get a page of oauth clients that belong to the provided app
 *
 * @param  {App}            app                         The App whose clients to fetch
 * @param  {Object}         [opts]                      Optional arguments
 * @param  {Number}         [opts.limit]                The maximum number of clients to fetch
 * @param  {Number}         [opts.offset]               The offset index at which to start returning clients
 * @param  {Function}       callback                    Standard callback function
 * @param  {Object}         callback.err                An error that occurred, if any
 * @param  {Object}         callback.response           The query response
 * @param  {Number}         callback.response.count     The total number of clients in the app
 * @param  {OauthClient[]}  callback.response.rows      The clients in this page of results
 */
var getClients = module.exports.getClients = function(app, opts, callback) {
    var options = {
        'where': {'AppId': app.id},
        'offset': opts.offset,
        'limit': opts.limit
    };

    DB.OauthClient.findAndCountAll(options).complete(function(err, clients) {
        if (err) {
            log().error({'err': err, 'appId': app.id}, 'Failed to page OAuth Clients');
            return callback({'code': 500, 'msg': err.message});
        }

        return callback(null, clients);
    });
};

/**
 * Get an oauth client by its id
 *
 * @param  {Number}         id                  The id of the client
 * @param  {Function}       callback            Standard callback function
 * @param  {Object}         callback.err        An error that occurred, if any
 * @param  {OauthClient}    callback.client     The client associated to the given id
 */
var getClient = module.exports.getClient = function(id, callback) {
    DBUtil.findBy('OauthClient', 'id', id, null, callback);
};

/**
 * Create an oauth client
 *
 * @param  {App}            app                 The app to which the client belongs
 * @param  {String}         displayName         The display name of the client
 * @param  {String}         secret              The secret of the client
 * @param  {String}         redirectUri         The redirect uri of the client
 * @param  {Function}       callback            Standard callback function
 * @param  {Object}         callback.err        An error that occurred, if any
 * @param  {OauthClient}    callback.client     The created oauth client
 */
var createClient = module.exports.createClient = function(app, displayName, secret, redirectUri, callback) {
    var clientHash = {
        'displayName': displayName,
        'secret': secret,
        'redirectUri': redirectUri,
        'AppId': app.id
    };

    DBUtil.create('OauthClient', clientHash, callback);
};

/**
 * Update an oauth client
 *
 * @param  {OauthClient}    client                  The client to update
 * @param  {Object}         fields                  The fields to update
 * @param  {String}         [fields.displayName]    The display name to update
 * @param  {String}         [fields.redirectUri]    The redirect uri to udpate
 * @param  {Function}       callback                Standard callback function
 * @param  {Object}         callback.err            An error that occurred, if any
 * @param  {OauthClient}    callback.client         The updated oauth client
 */
var updateClient = module.exports.updateClient = function(client, fields, callback) {
    fields = _.pick(fields, 'displayName', 'redirectUri');
    if (_.isEmpty(fields)) {
        return callback({'code': 400, 'msg': 'Attempted to perform a blank update of a client'});
    }

    client.updateAttributes(fields).complete(function(err, client) {
        if (err) {
            log().error({'err': err, 'id': client.id, 'fields': fields}, 'Failed to update a client');
            return callback({'code': 500, 'msg': err.message});
        }

        return callback(null, client);
    });
};

/**
 * Disable the given oauth client
 *
 * @param  {OauthClient}    client              The client to disable
 * @param  {Function}       callback            Standard callback function
 * @param  {Object}         callback.err        An error that occurred, if any
 * @param  {OauthClient}    callback.client     The disabled oauth client
 */
var disableClient = module.exports.disableClient = function(client, callback) {
    if (client.disabled) {
        return callback();
    }

    client.updateAttributes({'disabled': Date.now()}).complete(function(err, client) {
        if (err) {
            log().error({'err': err, 'id': client.id}, 'Failed to disable a client');
            return callback({'code': 500, 'msg': err.message});
        }

        return callback(null, client);
    });
};

/**
 * Enable the given oauth client
 *
 * @param  {OauthClient}    client              The client to enable
 * @param  {Function}       callback            Standard callback function
 * @param  {Object}         callback.err        An error that occurred, if any
 * @param  {OauthClient}    callback.client     The enabled oauth client
 */
var enableClient = module.exports.enableClient = function(client, callback) {
    if (!client.disabled) {
        return callback();
    }

    client.updateAttributes({'disabled': null}).complete(function(err, client) {
        if (err) {
            log().error({'err': err, 'id': client.id}, 'Failed to enable a client');
            return callback({'code': 500, 'msg': err.message});
        }

        return callback(null, client);
    });
};

/**
 * Set the client secret of the given oauth client
 *
 * @param  {OauthClient}    client              The client whose secret to set
 * @param  {Stirng}         secret              The new client secret to set
 * @param  {Function}       callback            Standard callback function
 * @param  {Object}         callback.err        An error that occurred, if any
 * @param  {OauthClient}    callback.client     The udpated oauth client
 */
var setClientSecret = module.exports.setClientSecret = function(client, secret, callback) {
    client.updateAttributes({'secret': secret}).complete(function(err, client) {
        if (err) {
            log().error({'err': err, 'id': client.id}, 'Failed to set a client secret');
            return callback({'code': 500, 'msg': err.message});
        }

        return callback(null, client);
    });
};

/**
 * Get an auth code
 *
 * @param  {Number}         id                  The id of the auth code to get
 * @param  {Function}       callback            Standard callback function
 * @param  {Object}         callback.err        An error that occurred, if any
 * @param  {OauthAuthCode}  callback.authCode   The auth code
 */
var getAuthCode = module.exports.getAuthCode = function(id, callback) {
    DBUtil.findBy('OauthAuthCode', 'id', id, null, callback);
};

/**
 * Get an auth code by its code
 *
 * @param  {String}         code                The code of the auth code to get
 * @param  {Function}       callback            Standard callback function
 * @param  {Object}         callback.err        An error that occurred, if any
 * @param  {OauthAuthCode}  callback.authCode   The auth code
 */
var getAuthCodeByCode = module.exports.getAuthCodeByCode = function(code, callback) {
    DBUtil.findBy('OauthAuthCode', 'code', code, null, callback);
};

/**
 * Create an oauth auth code
 *
 * @param  {OauthClient}    client              The oauth client that owns the auth code
 * @param  {User}           user                The user that owns the auth code
 * @param  {String}         code                The code of the auth code
 * @param  {Date}           expires             The expiry date of the auth code
 * @param  {Function}       callback            Standard callback function
 * @param  {Object}         callback.err        An error that occurred, if any
 * @param  {OauthAuthCode}  callback.authCode   The auth code
 */
var createAuthCode = module.exports.createAuthCode = function(client, user, code, expires, callback) {
    var authCodeHash = {
        'code': code,
        'expires': expires,
        'OauthClientId': client.id,
        'UserId': user.id
    };

    DBUtil.create('OauthAuthCode', authCodeHash, callback);
};

/**
 * Get a page of access tokens that belong to the provided user
 *
 * @param  {User}                   user                                    The User whose access tokens to fetch
 * @param  {Object}                 [opts]                                  Optional arguments
 * @param  {Number}                 [opts.limit]                            The maximum number of access tokens to fetch
 * @param  {Number}                 [opts.offset]                           The offset index at which to start returning access tokens
 * @param  {Function}               callback                                Standard callback function
 * @param  {Object}                 callback.err                            An error that occurred, if any
 * @param  {Object}                 callback.response                       The query response
 * @param  {Number}                 callback.response.count                 The total number of access tokens owned by the user
 * @param  {OauthAccessToken[]}     callback.response.rows                  The access tokens in this page of results
 * @param  {OauthClient}            callback.response.rows[i].OauthClient   The client associated to the access token
 */
var getAccessTokensByUser = module.exports.getAccessTokens = function(user, opts, callback) {
    var query = {
        'where': {'UserId': user.id},
        'offset': opts.offset,
        'limit': opts.limit,
        'include': [
            {'model': DB.OauthClient}
        ]
    };

    DB.OauthAccessToken.findAndCountAll(query).complete(function(err, accessTokens) {
        if (err) {
            log().error({'err': err, 'userId': user.id}, 'Failed to page OAuth Access Tokens');
            return callback({'code': 500, 'msg': err.message});
        }

        return callback(null, accessTokens);
    });
};

/**
 * Get an access token by its id
 *
 * @param  {Number}             id                              The id of the access token
 * @param  {Function}           callback                        Standard callback function
 * @param  {Object}             callback.err                    An error that occurred, if any
 * @param  {OauthAccessToken}   callback.accessToken            The access token associated to the given id
 * @param  {OauthClient}        callback.accessToken.Client     The client associated to the access token
 * @param  {User}               callback.accessToken.User       The user who owns the access token
 */
var getAccessToken = module.exports.getAccessToken = function(id, callback) {
    var opts = {
        'include': [
            {'model': DB.OauthClient},
            {'model': DB.User}
        ]
    };

    DBUtil.findBy('OauthAccessToken', 'id', id, opts, callback);
};

/**
 * Get an access token by its unique token string
 *
 * @param  {String}             token                           The unique token string of the access token
 * @param  {Function}           callback                        Standard callback function
 * @param  {Object}             callback.err                    An error that occurred, if any
 * @param  {OauthAccessToken}   callback.accessToken            The access token associated to the given token
 * @param  {OauthClient}        callback.accessToken.Client     The client associated to the access token
 * @param  {User}               callback.accessToken.User       The user who owns the access token
 */
var getAccessTokenByToken = module.exports.getAccessTokenByToken = function(token, callback) {
    var opts = {
        'include': [
            {'model': DB.OauthClient},
            {'model': DB.User}
        ]
    };

    DBUtil.findBy('OauthAccessToken', 'token', token, opts, callback);
};

/**
 * List access tokens by the user to which they belong
 *
 * @param  {User}                   user                The user of the access tokens
 * @param  {Object}                 [opts]              Optional arguments
 * @param  {Number}                 [opts.limit]        The maximum number of access tokens to fetch
 * @param  {Number}                 [opts.offset]       The offset index at which to start returning access tokens
 * @param  {Function}               callback            Standard callback function
 * @param  {Object}                 callback.err        An error that occurred, if any
 * @param  {OauthAccessTokenList}   callback.response   The access tokens response
 */
var getAccessTokensByUser = module.exports.getAccessTokensByUser = function(user, opts, callback) {
    opts = opts || {};
    var query = {
        'where': {
            'UserId': user.id
        },
        'offset': opts.offset,
        'limit': opts.limit,
        'include': [
            {'model': DB.OauthClient}
        ]
    };

    DB.OauthAccessToken.findAndCountAll(query).complete(function(err, response) {
        if (err) {
            log().error({'err': err, 'userId': user.id}, 'Failed to fetch access tokens by user');
            return callback({'code': 500, 'msg': err.message});
        }

        return callback(null, response);
    });
};

/**
 * Get an access token by its unique user and client owner
 *
 * @param  {OauthClient}        client                  The oauth client who owns the access token
 * @param  {User}               user                    The user who owns the access token
 * @param  {Function}           callback                Standard callback function
 * @param  {Object}             callback.err            An error that occurred, if any
 * @param  {OauthAccessToken}   callback.accessToken    The access token associated to the given token
 */
var getAccessTokenByClientAndUser = module.exports.getAccessTokenByClientAndUser = function(client, user, callback) {
    var query = {
        'where': {
            'OauthClientId': client.id,
            'UserId': user.id
        }
    };

    DB.OauthAccessToken.find(query).complete(function(err, accessToken) {
        if (err) {
            log().error({
                'err': err,
                'clientId': client.id,
                'userId': user.id
            }, 'Failed to fetch AccessToken by Client and User');
            return callback({'code': 500, 'msg': err.message});
        } else if (!accessToken) {
            log().debug({'clientId': client.id, 'userId': user.id}, 'Attempted to fetch non-existing access token');
            return callback({'code': 404, 'msg': 'Access token not found'});
        }

        return callback(null, accessToken);
    });
};

/**
 * Create an access token for the given client and user
 *
 * @param  {OauthClient}        client                  The oauth client who owns the access token
 * @param  {User}               user                    The user who owns the access token
 * @param  {String}             token                   The unique token to use as the credential for the access token grant
 * @param  {Function}           callback                Standard callback function
 * @param  {Object}             callback.err            An error that occurred, if any
 * @param  {OauthAccessToken}   callback.accessToken    The created access token
 */
var createAccessToken = module.exports.createAccessToken = function(client, user, token, callback) {
    var accessTokenHash = {
        'token': token,
        'OauthClientId': client.id,
        'UserId': user.id
    };

    DBUtil.create('OauthAccessToken', accessTokenHash, callback);
};

/**
 * Delete an access token
 *
 * @param  {OauthAccessToken}   accessToken     The access token to delete
 * @param  {Function}           callback        Standard callback function
 * @param  {Object}             callback.err    An error that occurred, if any
 */
var deleteAccessToken = module.exports.deleteAccessTokenByClientAndUser = function(accessToken, callback) {
    accessToken.destroy().complete(function(err) {
        if (err) {
            log().error({'err': err}, 'Failed to delete an access token');
            return callback({'code': 500, 'msg': err.message});
        }

        log().debug({'accessToken': accessToken}, 'Deleted an access token');
        return callback();
    });
};
