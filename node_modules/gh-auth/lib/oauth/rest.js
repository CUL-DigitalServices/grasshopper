/**
 * Copyright (c) 2015 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var _ = require('lodash');

var GrassHopper = require('gh-core');
var GrassHopperUtil = require('gh-core/lib/util');

var AuthOauth = require('../oauth');
var AuthOauthServer = require('./server');

/*!
 * Custom OAuth 2.0 grant flow to bypass using stateful user sessions
 */
GrassHopper.appRouter.on('post', '/api/auth/oauth/grant', function(req, res) {
    // Only "code" authorization workflow is supported
    var responseType = req.body.response_type;
    if (responseType !== 'code') {
        return GrassHopperUtil.sendError(res, {'code': 401, 'msg': 'Only "code" is supported for response type'});
    }

    // Note that the grant flow has a redirect_uri. Since we currently don't support multiple
    // redirect URIs, we don't acknowledge it here, and instead always redirect to the configured
    // redirect URI for simplicity

    // Perform the validation, authorization and grant operation
    AuthOauth.grantAuthCode(req.ctx, req.body.client_id, req.body.for_user_id, function(err, redirectUri) {
        if (err) {
            return GrassHopperUtil.sendError(res, err);
        }

        // Redirect to the specified redirect uri
        return res.redirect(redirectUri);
    });
});

/*!
 * OAuth Authorization token exchange endpoints
 */
GrassHopper.appRouter.on('post', '/api/auth/oauth/exchange', AuthOauthServer.token);
GrassHopper.globalAdminRouter.on('post', '/api/auth/oauth/exchange', AuthOauthServer.token);

/*!
 * Client and token management endpoints
 */

/**
 * Create an oauth client
 *
 * @param  {Request}    req     The request object
 * @param  {Response}   res     The response object
 * @api private
 */
var _createClient = function(req, res) {
    var appId = req.body.app || req.ctx.app.id;
    AuthOauth.createClient(req.ctx, appId, req.body.displayName, req.body.redirectUri, GrassHopperUtil.createResponseCallback(res, 201));
};

/**
 * Update an oauth client
 *
 * @param  {Request}    req     The request object
 * @param  {Response}   res     The response object
 * @api private
 */
var _updateClient = function(req, res) {
    AuthOauth.updateClient(req.ctx, req.params.id, _.pick(req.body, 'displayName', 'redirectUri'), GrassHopperUtil.createResponseCallback(res));
};

/**
 * Disable an oauth client
 *
 * @param  {Request}    req     The request object
 * @param  {Response}   res     The response object
 * @api private
 */
var _disableClient = function(req, res) {
    AuthOauth.disableClient(req.ctx, req.params.id, GrassHopperUtil.createResponseCallback(res));
};

/**
 * Enable an oauth client
 *
 * @param  {Request}    req     The request object
 * @param  {Response}   res     The response object
 * @api private
 */
var _enableClient = function(req, res) {
    AuthOauth.enableClient(req.ctx, req.params.id, GrassHopperUtil.createResponseCallback(res));
};

/**
 * Regenerate an oauth client secret
 *
 * @param  {Request}    req     The request object
 * @param  {Response}   res     The response object
 * @api private
 */
var _regenerateClientSecret = function(req, res) {
    AuthOauth.regenerateClientSecret(req.ctx, req.params.id, GrassHopperUtil.createResponseCallback(res));
};

/**
 * Get a page of oauth clients
 *
 * @param  {Request}    req     The request object
 * @param  {Response}   res     The response object
 * @api private
 */
var _getClients = function(req, res) {
    var appId = req.query.app || req.ctx.app.id;
    AuthOauth.getClients(req.ctx, appId, {'offset': req.query.offset, 'limit': req.query.limit}, GrassHopperUtil.createResponseCallback(res));
};

/**
 * Get an oauth client
 *
 * @param  {Request}    req     The request object
 * @param  {Response}   res     The response object
 * @api private
 */
var _getClient = function(req, res) {
    AuthOauth.getClient(req.ctx, req.params.id, GrassHopperUtil.createResponseCallback(res));
};

/**
 * Get a page of access tokens for a user
 *
 * @param  {Request}    req     The request object
 * @param  {Response}   res     The response object
 * @api private
 */
var _getAccessTokensByUser = function(req, res) {
    AuthOauth.getAccessTokensByUser(req.ctx, req.params.userId, {'offset': req.query.offset, 'limit': req.query.limit}, GrassHopperUtil.createResponseCallback(res));
};

/**
 * Delete an access token by its token value
 *
 * @param  {Request}    req     The request object
 * @param  {Response}   res     The response object
 * @api private
 */
var _deleteAccessTokenByToken = function(req, res) {
    AuthOauth.deleteAccessTokenByToken(req.ctx, req.params.token, GrassHopperUtil.createResponseCallback(res));
};

/*!
 * Global Admin oauth entity management
 */
GrassHopper.globalAdminRouter.on('post', '/api/auth/oauth/client', _createClient);
GrassHopper.globalAdminRouter.on('post', '/api/auth/oauth/client/:id', _updateClient);
GrassHopper.globalAdminRouter.on('post', '/api/auth/oauth/client/:id/disable', _disableClient);
GrassHopper.globalAdminRouter.on('post', '/api/auth/oauth/client/:id/enable', _enableClient);
GrassHopper.globalAdminRouter.on('post', '/api/auth/oauth/client/:id/regenerateSecret', _regenerateClientSecret);
GrassHopper.globalAdminRouter.on('get', '/api/auth/oauth/client', _getClients);
GrassHopper.globalAdminRouter.on('get', '/api/auth/oauth/client/:id', _getClient);
GrassHopper.globalAdminRouter.on('get', '/api/auth/oauth/accessToken/user/:userId', _getAccessTokensByUser);
GrassHopper.globalAdminRouter.on('delete', '/api/auth/oauth/accessToken/token/:token', _deleteAccessTokenByToken);

/*!
 * App server oauth entity management
 */
GrassHopper.appRouter.on('post', '/api/auth/oauth/client', _createClient);
GrassHopper.appRouter.on('post', '/api/auth/oauth/client/:id', _updateClient);
GrassHopper.appRouter.on('post', '/api/auth/oauth/client/:id/disable', _disableClient);
GrassHopper.appRouter.on('post', '/api/auth/oauth/client/:id/enable', _enableClient);
GrassHopper.appRouter.on('post', '/api/auth/oauth/client/:id/regenerateSecret', _regenerateClientSecret);
GrassHopper.appRouter.on('get', '/api/auth/oauth/client', _getClients);
GrassHopper.appRouter.on('get', '/api/auth/oauth/client/:id', _getClient);
GrassHopper.appRouter.on('get', '/api/auth/oauth/accessToken/user/:userId', _getAccessTokensByUser);
GrassHopper.appRouter.on('delete', '/api/auth/oauth/accessToken/token/:token', _deleteAccessTokenByToken);
