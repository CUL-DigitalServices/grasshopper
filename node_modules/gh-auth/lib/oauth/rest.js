
var _ = require('lodash');

var GrassHopper = require('gh-core');
var GrassHopperUtil = require('gh-core/lib/util');

var AuthOauth = require('../oauth');
var AuthOauthServer = require('./server');

/*!
 * Custom Oauth 2.0 grant flow to bypass using stateful user sessions
 */
GrassHopper.appRouter.on('post', '/api/auth/oauth/grant', function(req, res) {
    // Only "code" authorization workflow is supported
    var responseType = req.body.response_type;
    if (responseType !== 'code') {
        return GrassHopperUtil.sendError(res, {'code': 401, 'msg': 'Only "code" is supported for response type'});
    }

    // We don't support multiple redirect URIs yet, so don't support specifying the parameter
    if (req.body.redirect_uri) {
        return GrassHopperUtil.sendError(res, {'code': 401, 'msg': 'Custom "redirect_uri" is currently not supported. Only the registered redirect URI will be used'});
    }

    AuthOauth.grantAuthCode(req.ctx, req.body.client_id, req.body.for_user_id, function(err, redirectUri) {
        if (err) {
            return GrassHopperUtil.sendError(res, err);
        }

        return res.redirect(redirectUri);
    });
});

GrassHopper.appRouter.on('post', '/api/auth/oauth/exchange', AuthOauthServer.token);

/*!
 * Client and token management endpoints
 */

var _createClient = function(req, res) {
    var appId = req.body.app || req.ctx.app.id;
    AuthOauth.createClient(req.ctx, appId, req.body.displayName, req.body.redirectUri, GrassHopperUtil.createResponseCallback(res, 201));
};

var _updateClient = function(req, res) {
    AuthOauth.updateClient(req.ctx, req.params.id, _.pick(req.body, 'displayName', 'redirectUri'), GrassHopperUtil.createResponseCallback(res));
};

var _disableClient = function(req, res) {
    AuthOauth.disableClient(req.ctx, req.params.id, GrassHopperUtil.createResponseCallback(res));
};

var _enableClient = function(req, res) {
    AuthOauth.enableClient(req.ctx, req.params.id, GrassHopperUtil.createResponseCallback(res));
};

var _regenerateClientSecret = function(req, res) {
    AuthOauth.regenerateClientSecret(req.ctx, req.params.id, GrassHopperUtil.createResponseCallback(res));
};

var _getClients = function(req, res) {
    var appId = req.query.app || req.ctx.app.id;
    AuthOauth.getClients(req.ctx, appId, {'offset': req.query.offset, 'limit': req.query.limit}, GrassHopperUtil.createResponseCallback(res));
};

var _getClient = function(req, res) {
    AuthOauth.getClient(req.ctx, req.params.id, GrassHopperUtil.createResponseCallback(res));
};

var _getAccessTokensByUser = function(req, res) {
    AuthOauth.getAccessTokensByUser(req.ctx, req.params.userId, {'offset': req.query.offset, 'limit': req.query.limit}, GrassHopperUtil.createResponseCallback(res));
};

var _deleteAccessTokenByToken = function(req, res) {
    AuthOauth.deleteAccessTokenByToken(req.ctx, req.params.token, GrassHopperUtil.createResponseCallback(res));
};

GrassHopper.globalAdminRouter.on('post', '/api/auth/oauth/client', _createClient);
GrassHopper.globalAdminRouter.on('post', '/api/auth/oauth/client/:id', _updateClient);
GrassHopper.globalAdminRouter.on('post', '/api/auth/oauth/client/:id/disable', _disableClient);
GrassHopper.globalAdminRouter.on('post', '/api/auth/oauth/client/:id/enable', _enableClient);
GrassHopper.globalAdminRouter.on('post', '/api/auth/oauth/client/:id/regenerateSecret', _regenerateClientSecret);
GrassHopper.globalAdminRouter.on('get', '/api/auth/oauth/client', _getClients);
GrassHopper.globalAdminRouter.on('get', '/api/auth/oauth/client/:id', _getClient);

GrassHopper.appRouter.on('post', '/api/auth/oauth/client', _createClient);
GrassHopper.appRouter.on('post', '/api/auth/oauth/client/:id', _updateClient);
GrassHopper.appRouter.on('post', '/api/auth/oauth/client/:id/disable', _disableClient);
GrassHopper.appRouter.on('post', '/api/auth/oauth/client/:id/enable', _enableClient);
GrassHopper.appRouter.on('post', '/api/auth/oauth/client/:id/regenerateSecret', _regenerateClientSecret);
GrassHopper.appRouter.on('get', '/api/auth/oauth/client', _getClients);
GrassHopper.appRouter.on('get', '/api/auth/oauth/client/:id', _getClient);

GrassHopper.appRouter.on('get', '/api/auth/oauth/accessToken/user/:userId', _getAccessTokensByUser);
GrassHopper.appRouter.on('delete', '/api/auth/oauth/accessToken/token/:token', _deleteAccessTokenByToken);
