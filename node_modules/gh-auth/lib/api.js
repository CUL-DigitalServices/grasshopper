/**
 * Copyright (c) 2014 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var passport = require('passport');
var LocalStrategy = require('passport-local').Strategy;

var AdminsAPI = require('gh-admins');
var log = require('gh-core/lib/logger').logger('gh-apps');

/**
 * Initialise the Passport authentication strategies
 *
 * @param  {Object}         config              The config as per `config.js` in the root directory
 */
var initialise = module.exports.initialise = function(config) {
    registerLocalAuthentication();
    registerSerializeUser(config.cookie.secret);
    registerDeserializeUser(config.cookie.secret);
};

/**
 * Register the Passport local authentication strategy
 *
 * @api private
 */
var registerLocalAuthentication = function() {
    passport.use(new LocalStrategy({'passReqToCallback': true}, function(req, username, password, done) {
        // The user is logging in as a global administrator
        if (req.app.isGlobalAdmin) {
            AdminsAPI.validateLoginCredentials(username, password, function(err, globalAdmin) {
                // The provided global administrator credentials are incorrect
                if (err && err.code === 401) {
                    log().info({'err': err, 'app': req.app, 'username': username}, 'Incorrect global administrator credentials have been provided');
                    return done(null, false);
                // A different error occured
                } else if (err) {
                    log().error({'err': err, 'app': req.app, 'username': username}, 'Failed global administrator login attempt');
                    return done(err);
                }

                log().info({'globalAdmin': globalAdmin}, 'Logged in as a global administrator');
                var authInfo = {'user': globalAdmin, 'app': req.app};
                return done(null, authInfo);
            });

        // The user is logging in on a regular app
        } else {
            // TODO
        }
    }));
};

/**
 * Register the Passport serialize user function. This determines
 * what is stored in the session cookie
 *
 * @param  {String}         cookieSecret        The cookie secret to encrypt the session cookie with
 * @api private
 */
var registerSerializeUser = function(cookieSecret) {
    passport.serializeUser(function(authInfo, done) {
        // Serialize the user id and whether the user is logged in
        // on the global admin server to the session cookie
        var sessionCookie = {
            'id': authInfo.user.id,
            'isGlobalAdmin': authInfo.app.isGlobalAdmin
        };

        var encryptedCookie = _encryptCookieData(JSON.stringify(sessionCookie), cookieSecret);
        return done(null, encryptedCookie);
    });
};

/*!
 * The `deserializeUser` method takes a value from the session
 * cookie and expects a full user object as it's response. In
 * our case, we've passed in the user id in the session cookie,
 * so we can simply look up a user by their id
 * TODO
 */
var registerDeserializeUser = function(cookieSecret) {
    passport.deserializeUser(function(id, done) {
        AdminsAPI.getGlobalAdmin(id, function(err, globalAdmin) {
            if (err) {
                log().error({'err': err, 'id': id}, 'Failed to deserialize the user cookie');
                return done(err);
            }

            return done(null, globalAdmin);
        });
    });
};

/**
 * Encrypt cookie data to send to the client
 *
 * @param  {String}     cookieData      The cookie data to encrypt
 * @param  {String}     cookieSecret    The secret to encrypt the cookie data with
 * @return {String}                     The encrypted cookie data
 * @api private
 */
var _encryptCookieData = function(cookieData, cookieSecret) {
    var cipher = crypto.createCipher('aes-256-cbc', cookieSecret);
    return cipher.update(cookieData, 'utf8', 'base64') + cipher.final('base64');
};

/**
 * Decrypt cookie data provided by the client
 *
 * @param  {String}     encryptedData   The encrypted cookie data to decrypt
 * @param  {String}     cookieSecret    The secret to decrypt the data with
 * @return {String}                     The decrypted cookie data
 * @api private
 */
var _decryptCookieData = function(encryptedData, cookieSecret) {
    var decipher = crypto.createDecipher('aes-256-cbc', cookieSecret);
    return decipher.update(encryptedData, 'base64', 'utf8') + decipher.final('utf8');
};
