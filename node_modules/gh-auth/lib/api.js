/**
 * Copyright (c) 2014 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var passport = require('passport');
var LocalStrategy = require('passport-local').Strategy;

var AdminsAPI = require('gh-admins');
var log = require('gh-core/lib/logger').logger('gh-apps');

/**
 * Initialise the Passport authentication strategies
 */
var initialise = module.exports.initialise = function() {
    registerLocalAuthentication();
    //registerSerializeUser();
    //registerDeserializeUser();
};

/**
 * Register the Passport local authentication strategy
 *
 * @api private
 */
var registerLocalAuthentication = function() {
    passport.use(new LocalStrategy({'passReqToCallback': true}, function(req, username, password, done) {
        // The user is logging in as a global administrator
        if (req.app.isGlobalAdmin) {
            AdminsAPI.validateLoginCredentials(username, password, function(err, globalAdmin) {
                if (err) {
                    log().error({'err': err, 'app': req.app, 'username': username}, 'Failed global administrator login attempt');
                    return done(err);
                }

                log().info({'globalAdmin': globalAdmin}, 'Logged in as a global administrator');
                return done(null, globalAdmin);
            });
        // The user is logging in on a regular app
        } else {
            // TODO
        }
    }));
};

//        DB.User.find({'where': {'username': username, 'TenantId': req.ctx.app.Tenant.id}}).done(function (err, user) {
//            if (err) {
//                // TODO: Telemetry error during login attempt
//                return done(err);
//            } else if (!user || !user.checkPassword(password)) {
//                // TODO: Telemetry failed login attempt
//                return done(null, false);
//            }

//            // TODO: Telemetry succesfull login
//            return done(null, user);
//        });
//    }));
//};

/*!
 * The `serializeUser` method takes a user object and returns
 * what should go into a cookie. We will return the user id
 * as that is sufficient to identify the user
 */
//passport.serializeUser(function(user, done) {
//    done(null, user.id);
//});

/*!
 * The `deserializeUser` method takes a value from the session
 * cookie and expects a full user object as it's response. In
 * our case, we've passed in the user id in the session cookie,
 * so we can simply look up a user by their id
 */
//passport.deserializeUser(function(id, done) {
//    DB.User.find(id).done(done);
//});