/**
 * Copyright (c) 2015 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var _ = require('lodash');
var assert = require('assert');
var util = require('util');

var AuthTestsUtil = require('gh-auth/tests/util');
var TestsUtil = require('gh-tests/lib/util');
var UsersTestsUtil = require('gh-users/tests/util');

var REDIRECT_URI_VALID = 'http://grasshopper.fronteer.io/cb';
var CLIENT_ID_NONEXISTING = 23423425;
var USER_ID_NONEXISTING = 23423425;

describe('Oauth authentication', function() {

    // Common apps and clients that are used for many tests
    var anonymousGlobalAdminClient = null;
    var globalAdminClient = null;
    var userApp = null;
    var anonymousAppClient = null;
    var userAppClient = null;
    var userAppUser = null;
    var userAppAdminClient = null;
    var userAppAdminUser = null;
    var externalUserAppAdminClient = null;

    beforeEach(function(callback) {
        userApp = global.tests.apps.cam2014;
        userAppAdminClient = global.tests.admins.cam2014.client;
        externalUserAppAdminClient = global.tests.admins.oxford2014.client;

        // Get the anonymous and authenticated clients
        TestsUtil.getAnonymousAppUserClient(userApp, function(_anonymousAppClient) {
            anonymousAppClient = _anonymousAppClient;

            TestsUtil.generateTestUsers(userApp, 1, false, function(user) {
                userAppClient = user.client;
                userAppUser = user.profile;

                UsersTestsUtil.assertGetMe(userAppAdminClient, function(me) {
                    userAppAdminUser = me;

                    TestsUtil.getAnonymousGlobalAdminRestClient(function(_anonymousGlobalAdminClient) {
                        anonymousGlobalAdminClient = _anonymousGlobalAdminClient;
                        TestsUtil.getGlobalAdminRestClient(function(_globalAdminClient) {
                            globalAdminClient = _globalAdminClient;
                            return callback();
                        });
                    });
                });
            });
        });
    });

    describe('Clients', function() {

        it('verify create and update client', function(callback) {
            AuthTestsUtil.assertCreateOauthClient(userAppAdminClient, TestsUtil.generateString(), REDIRECT_URI_VALID, null, function(userAppAdminOauthClient) {
                AuthTestsUtil.assertCreateOauthClient(globalAdminClient, TestsUtil.generateString(), REDIRECT_URI_VALID, {'appId': userApp.id}, function(globalAdminOauthClient) {
                    var updatesUserAdmin = {
                        'displayName': TestsUtil.generateString(),
                        'redirectUri': util.format('%s/%s', REDIRECT_URI_VALID, TestsUtil.generateString())
                    };

                    var updatesGlobalAdmin = {
                        'displayName': TestsUtil.generateString(),
                        'redirectUri': util.format('%s/%s', REDIRECT_URI_VALID, TestsUtil.generateString())
                    };

                    AuthTestsUtil.assertUpdateOauthClient(userAppAdminClient, userAppAdminOauthClient.id, updatesUserAdmin, function() {
                        AuthTestsUtil.assertUpdateOauthClient(globalAdminClient, globalAdminOauthClient.id, updatesGlobalAdmin, function() {
                            return callback();
                        });
                    });
                });
            });
        });

        it('verify validation and authorization of creating a client', function(callback) {
            // Anonymous global admin user can't create a client
            AuthTestsUtil.assertCreateOauthClientFails(anonymousGlobalAdminClient, TestsUtil.generateString(), REDIRECT_URI_VALID, {'appId': userApp.id}, 401, function() {

                // Anonymous app user can't create a client
                AuthTestsUtil.assertCreateOauthClientFails(anonymousAppClient, TestsUtil.generateString(), REDIRECT_URI_VALID, null, 401, function() {

                    // Authenticated non-admin app user can't create a client
                    AuthTestsUtil.assertCreateOauthClientFails(userAppClient, TestsUtil.generateString(), REDIRECT_URI_VALID, null, 401, function() {

                        // Admin user can't create a client on another app
                        AuthTestsUtil.assertCreateOauthClientFails(externalUserAppAdminClient, TestsUtil.generateString(), REDIRECT_URI_VALID, {'appId': userApp.id}, 401, function() {

                            // Global admin must specify an app id
                            AuthTestsUtil.assertCreateOauthClientFails(globalAdminClient, TestsUtil.generateString(), REDIRECT_URI_VALID, null, 400, function() {

                                // Display name is required for global admin
                                AuthTestsUtil.assertCreateOauthClientFails(globalAdminClient, null, REDIRECT_URI_VALID, {'appId': userApp.id}, 400, function() {

                                    // Redirect uri is required for global admin
                                    AuthTestsUtil.assertCreateOauthClientFails(globalAdminClient, TestsUtil.generateString(), null, {'appId': userApp.id}, 400, function() {

                                        // Redirect uri must be valid for global admin
                                        AuthTestsUtil.assertCreateOauthClientFails(globalAdminClient, TestsUtil.generateString(), 'not a uri', {'appId': userApp.id}, 400, function() {

                                            // Display name is required for app admin
                                            AuthTestsUtil.assertCreateOauthClientFails(userAppAdminClient, null, REDIRECT_URI_VALID, null, 400, function() {

                                                // Redirect uri is required for app admin
                                                AuthTestsUtil.assertCreateOauthClientFails(userAppAdminClient, TestsUtil.generateString(), null, null, 400, function() {

                                                    // Redirect uri must be valid for app admin
                                                    AuthTestsUtil.assertCreateOauthClientFails(userAppAdminClient, TestsUtil.generateString(), 'not a uri', null, 400, function() {

                                                        // Sanity check both global and user app admin can create clients normally
                                                        AuthTestsUtil.assertCreateOauthClient(globalAdminClient, TestsUtil.generateString(), REDIRECT_URI_VALID, {'appId': userApp.id}, function() {
                                                            AuthTestsUtil.assertCreateOauthClient(userAppAdminClient, TestsUtil.generateString(), REDIRECT_URI_VALID, null, function() {
                                                                return callback();
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        it('verify disable and enable client', function(callback) {
            AuthTestsUtil.assertCreateOauthClient(userAppAdminClient, TestsUtil.generateString(), REDIRECT_URI_VALID, null, function(userAppAdminOauthClient) {
                AuthTestsUtil.assertCreateOauthClient(globalAdminClient, TestsUtil.generateString(), REDIRECT_URI_VALID, {'appId': userApp.id}, function(globalAdminOauthClient) {
                    AuthTestsUtil.assertDisableOauthClient(userAppAdminClient, userAppAdminOauthClient.id, function(oauthClientDisabled) {
                        AuthTestsUtil.assertDisableOauthClient(globalAdminClient, globalAdminOauthClient.id, function(oauthClientDisabled) {
                            AuthTestsUtil.assertEnableOauthClient(userAppAdminClient, userAppAdminOauthClient.id, function(oauthClientEnabled) {
                                AuthTestsUtil.assertEnableOauthClient(globalAdminClient, globalAdminOauthClient.id, function(oauthClientEnabled) {
                                    return callback();
                                });
                            });
                        });
                    });
                });
            });
        });

        it('verify validation and authorization of disabling a client', function(callback) {
            AuthTestsUtil.assertCreateOauthClient(userAppAdminClient, TestsUtil.generateString(), REDIRECT_URI_VALID, null, function(oauthClient) {

                // Authorization
                AuthTestsUtil.assertDisableOauthClientFails(anonymousGlobalAdminClient, oauthClient.id, 401, function() {
                    AuthTestsUtil.assertDisableOauthClientFails(anonymousAppClient, oauthClient.id, 401, function() {
                        AuthTestsUtil.assertDisableOauthClientFails(userAppClient, oauthClient.id, 401, function() {
                            AuthTestsUtil.assertDisableOauthClientFails(externalUserAppAdminClient, oauthClient.id, 401, function() {

                                // Validation
                                AuthTestsUtil.assertDisableOauthClientFails(globalAdminClient, CLIENT_ID_NONEXISTING, 404, function() {
                                    AuthTestsUtil.assertDisableOauthClientFails(userAppAdminClient, CLIENT_ID_NONEXISTING, 404, function() {
                                        AuthTestsUtil.assertDisableOauthClientFails(globalAdminClient, 'not an int', 400, function() {
                                            AuthTestsUtil.assertDisableOauthClientFails(userAppAdminClient, 'not an int', 400, function() {

                                                // Sanity check it can be disabled, but can't be disabled again by both user app and
                                                // global admin users
                                                AuthTestsUtil.assertDisableOauthClient(globalAdminClient, oauthClient.id, function() {
                                                    AuthTestsUtil.assertDisableOauthClientFails(globalAdminClient, oauthClient.id, 400, function() {
                                                        AuthTestsUtil.assertEnableOauthClient(globalAdminClient, oauthClient.id, function() {
                                                            AuthTestsUtil.assertDisableOauthClient(userAppAdminClient, oauthClient.id, function() {
                                                                AuthTestsUtil.assertDisableOauthClientFails(userAppAdminClient, oauthClient.id, 400, function() {
                                                                    return callback();
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        it('verify validation and authorization of enabling a client', function(callback) {
            AuthTestsUtil.assertCreateOauthClient(userAppAdminClient, TestsUtil.generateString(), REDIRECT_URI_VALID, null, function(oauthClient) {
                AuthTestsUtil.assertDisableOauthClient(userAppAdminClient, oauthClient.id, function() {

                    // Authorization
                    AuthTestsUtil.assertEnableOauthClientFails(anonymousGlobalAdminClient, oauthClient.id, 401, function() {
                        AuthTestsUtil.assertEnableOauthClientFails(anonymousAppClient, oauthClient.id, 401, function() {
                            AuthTestsUtil.assertEnableOauthClientFails(userAppClient, oauthClient.id, 401, function() {
                                AuthTestsUtil.assertEnableOauthClientFails(externalUserAppAdminClient, oauthClient.id, 401, function() {

                                    // Validation
                                    AuthTestsUtil.assertEnableOauthClientFails(globalAdminClient, CLIENT_ID_NONEXISTING, 404, function() {
                                        AuthTestsUtil.assertEnableOauthClientFails(userAppAdminClient, CLIENT_ID_NONEXISTING, 404, function() {
                                            AuthTestsUtil.assertEnableOauthClientFails(globalAdminClient, 'not an int', 400, function() {
                                                AuthTestsUtil.assertEnableOauthClientFails(userAppAdminClient, 'not an int', 400, function() {

                                                    // Sanity check it can be disabled, but can't be disabled again by both user app and
                                                    // global admin users
                                                    AuthTestsUtil.assertEnableOauthClient(globalAdminClient, oauthClient.id, function() {
                                                        AuthTestsUtil.assertEnableOauthClientFails(globalAdminClient, oauthClient.id, 400, function() {
                                                            AuthTestsUtil.assertDisableOauthClient(globalAdminClient, oauthClient.id, function() {
                                                                AuthTestsUtil.assertEnableOauthClient(userAppAdminClient, oauthClient.id, function() {
                                                                    AuthTestsUtil.assertEnableOauthClientFails(userAppAdminClient, oauthClient.id, 400, function() {
                                                                        return callback();
                                                                    });
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        it('verify regenerate client secret', function(callback) {
            AuthTestsUtil.assertCreateOauthClient(userAppAdminClient, TestsUtil.generateString(), REDIRECT_URI_VALID, null, function(userAppAdminOauthClient) {
                AuthTestsUtil.assertCreateOauthClient(globalAdminClient, TestsUtil.generateString(), REDIRECT_URI_VALID, {'appId': userApp.id}, function(globalAdminOauthClient) {
                    AuthTestsUtil.assertRegenerateOauthClientSecret(userAppAdminClient, userAppAdminOauthClient.id, function(oauthClientRegenerated) {
                        AuthTestsUtil.assertRegenerateOauthClientSecret(globalAdminClient, globalAdminOauthClient.id, function(oauthClientRegenerated) {
                            return callback();
                        });
                    });
                });
            });
        });

        it('verify validation and authorization of regenerating a client secret', function(callback) {
            AuthTestsUtil.assertCreateOauthClient(userAppAdminClient, TestsUtil.generateString(), REDIRECT_URI_VALID, null, function(oauthClient) {

                // Authorization
                AuthTestsUtil.assertRegenerateOauthClientSecretFails(anonymousGlobalAdminClient, oauthClient.id, 401, function() {
                    AuthTestsUtil.assertRegenerateOauthClientSecretFails(anonymousAppClient, oauthClient.id, 401, function() {
                        AuthTestsUtil.assertRegenerateOauthClientSecretFails(userAppClient, oauthClient.id, 401, function() {
                            AuthTestsUtil.assertRegenerateOauthClientSecretFails(externalUserAppAdminClient, oauthClient.id, 401, function() {

                                // Validation
                                AuthTestsUtil.assertRegenerateOauthClientSecretFails(globalAdminClient, CLIENT_ID_NONEXISTING, 404, function() {
                                    AuthTestsUtil.assertRegenerateOauthClientSecretFails(userAppAdminClient, CLIENT_ID_NONEXISTING, 404, function() {
                                        AuthTestsUtil.assertRegenerateOauthClientSecretFails(globalAdminClient, 'not an int', 400, function() {
                                            AuthTestsUtil.assertRegenerateOauthClientSecretFails(userAppAdminClient, 'not an int', 400, function() {

                                                // Ensure the secret hasn't changed
                                                AuthTestsUtil.assertGetOauthClient(userAppAdminClient, oauthClient.id, function(oauthClientAgain) {
                                                    AuthTestsUtil.assertOauthClient(oauthClientAgain, {'equals': oauthClient});

                                                    // Sanity check secret can be changed
                                                    AuthTestsUtil.assertRegenerateOauthClientSecret(globalAdminClient, oauthClient.id, function() {
                                                        AuthTestsUtil.assertRegenerateOauthClientSecret(userAppAdminClient, oauthClient.id, function() {
                                                            return callback();
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    describe('Authorization Codes', function() {
        it('verify grant authorization code', function(callback) {
            AuthTestsUtil.assertCreateOauthClient(userAppAdminClient, TestsUtil.generateString(), REDIRECT_URI_VALID, null, function(oauthClient) {
                AuthTestsUtil.assertGrantOauthAuthCode(userAppAdminClient, oauthClient.id, null, function(authCode) {
                    return callback();
                });
            });
        });

        it('verify authorization and validation of granting an authorization code on behalf of another user', function(callback) {
            AuthTestsUtil.assertCreateOauthClient(userAppAdminClient, TestsUtil.generateString(), REDIRECT_URI_VALID, null, function(oauthClient) {

                // Authorization
                AuthTestsUtil.assertGrantOauthAuthCodeFails(globalAdminClient, oauthClient.id, {'forUserId': userAppUser.id}, 404, function() {
                    AuthTestsUtil.assertGrantOauthAuthCodeFails(anonymousGlobalAdminClient, oauthClient.id, {'forUserId': userAppUser.id}, 404, function() {
                        AuthTestsUtil.assertGrantOauthAuthCodeFails(anonymousAppClient, oauthClient.id, {'forUserId': userAppUser.id}, 401, function() {
                            AuthTestsUtil.assertGrantOauthAuthCodeFails(externalUserAppAdminClient, oauthClient.id, {'forUserId': userAppUser.id}, 401, function() {

                                // Validation
                                AuthTestsUtil.assertGrantOauthAuthCodeFails(userAppAdminClient, oauthClient.id, {'forUserId': 'not an int'}, 400, function() {
                                    AuthTestsUtil.assertGrantOauthAuthCodeFails(userAppAdminClient, oauthClient.id, {'forUserId': USER_ID_NONEXISTING}, 404, function() {

                                        // Sanity check we can get an auth code
                                        AuthTestsUtil.assertGrantOauthAuthCode(userAppAdminClient, oauthClient.id, {'forUserId': userAppUser.id}, function() {
                                            return callback();
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    describe('Access Tokens', function() {
        it('verify exchange authorization code', function(callback) {
            AuthTestsUtil.assertCreateOauthClient(userAppAdminClient, TestsUtil.generateString(), REDIRECT_URI_VALID, null, function(oauthClient) {
                AuthTestsUtil.assertGrantOauthAuthCode(userAppAdminClient, oauthClient.id, null, function(authCode) {
                    AuthTestsUtil.assertExchangeOauthAuthCode(userAppAdminClient, oauthClient.id, oauthClient.secret, authCode, oauthClient.redirectUri, null, function(userAppAdminBearerClient) {

                        // Ensure the me feed from the cookie session client and bearer token client are the same
                        UsersTestsUtil.assertGetMe(userAppAdminClient, function(cookieMe) {
                            UsersTestsUtil.assertGetMe(userAppAdminBearerClient, function(bearerMe) {
                                assert.deepEqual(cookieMe, bearerMe);
                                return callback();
                            });
                        });
                    });
                });
            });
        });
    });
});
