/**
 * Copyright (c) 2015 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var _ = require('lodash');
var assert = require('assert');
var util = require('util');

var AuthTestsUtil = require('gh-auth/tests/util');
var TestsUtil = require('gh-tests/lib/util');
var UsersTestsUtil = require('gh-users/tests/util');

var REDIRECT_URI_VALID = 'http://grasshopper.fronteer.io/cb';

describe('Oauth authentication', function() {

    // Common apps and clients that are used for many tests
    var anonymousGlobalAdminClient = null;
    var globalAdminClient = null;
    var userApp = null;
    var userAppAdminClient = null;

    beforeEach(function(callback) {
        userApp = global.tests.apps.cam2014;
        userAppAdminClient = global.tests.admins.cam2014.client;

        // Get the anonymous and authenticated global admin clients
        TestsUtil.getAnonymousGlobalAdminRestClient(function(_anonymousGlobalAdminClient) {
            anonymousGlobalAdminClient = _anonymousGlobalAdminClient;
            TestsUtil.getGlobalAdminRestClient(function(_globalAdminClient) {
                globalAdminClient = _globalAdminClient;
                return callback();
            });
        });
    });

    describe('Clients', function() {

        it('verify create and update client', function(callback) {
            AuthTestsUtil.assertCreateOauthClient(userAppAdminClient, TestsUtil.generateString(), REDIRECT_URI_VALID, null, function(userAppAdminOauthClient) {
                AuthTestsUtil.assertCreateOauthClient(globalAdminClient, TestsUtil.generateString(), REDIRECT_URI_VALID, {'appId': userApp.id}, function(globalAdminOauthClient) {
                    var updatesUserAdmin = {
                        'displayName': TestsUtil.generateString(),
                        'redirectUri': util.format('%s/%s', REDIRECT_URI_VALID, TestsUtil.generateString())
                    };

                    var updatesGlobalAdmin = {
                        'displayName': TestsUtil.generateString(),
                        'redirectUri': util.format('%s/%s', REDIRECT_URI_VALID, TestsUtil.generateString())
                    };

                    AuthTestsUtil.assertUpdateOauthClient(userAppAdminClient, userAppAdminOauthClient.id, updatesUserAdmin, function() {
                        AuthTestsUtil.assertUpdateOauthClient(globalAdminClient, globalAdminOauthClient.id, updatesGlobalAdmin, function() {
                            return callback();
                        });
                    });
                });
            });
        });

        it('verify disable and enable client', function(callback) {
            AuthTestsUtil.assertCreateOauthClient(userAppAdminClient, TestsUtil.generateString(), REDIRECT_URI_VALID, null, function(userAppAdminOauthClient) {
                AuthTestsUtil.assertCreateOauthClient(globalAdminClient, TestsUtil.generateString(), REDIRECT_URI_VALID, {'appId': userApp.id}, function(globalAdminOauthClient) {
                    AuthTestsUtil.assertDisableOauthClient(userAppAdminClient, userAppAdminOauthClient.id, function(oauthClientDisabled) {
                        AuthTestsUtil.assertDisableOauthClient(globalAdminClient, globalAdminOauthClient.id, function(oauthClientDisabled) {
                            AuthTestsUtil.assertEnableOauthClient(userAppAdminClient, userAppAdminOauthClient.id, function(oauthClientEnabled) {
                                AuthTestsUtil.assertEnableOauthClient(globalAdminClient, globalAdminOauthClient.id, function(oauthClientEnabled) {
                                    return callback();
                                });
                            });
                        });
                    });
                });
            });
        });

        it('verify regenerate client secret', function(callback) {
            AuthTestsUtil.assertCreateOauthClient(userAppAdminClient, TestsUtil.generateString(), REDIRECT_URI_VALID, null, function(userAppAdminOauthClient) {
                AuthTestsUtil.assertCreateOauthClient(globalAdminClient, TestsUtil.generateString(), REDIRECT_URI_VALID, {'appId': userApp.id}, function(globalAdminOauthClient) {
                    AuthTestsUtil.assertRegenerateOauthClientSecret(userAppAdminClient, userAppAdminOauthClient.id, function(oauthClientRegenerated) {
                        AuthTestsUtil.assertRegenerateOauthClientSecret(globalAdminClient, globalAdminOauthClient.id, function(oauthClientRegenerated) {
                            return callback();
                        });
                    });
                });
            });
        });
    });

    describe('Authorization Codes', function() {
        it('verify grant authorization code', function(callback) {
            AuthTestsUtil.assertCreateOauthClient(userAppAdminClient, TestsUtil.generateString(), REDIRECT_URI_VALID, null, function(oauthClient) {
                AuthTestsUtil.assertGrantOauthAuthCode(userAppAdminClient, oauthClient.id, null, function(authCode) {
                    return callback();
                });
            });
        });
    });

    describe('Access Tokens', function() {
        it('verify exchange authorization code', function(callback) {
            AuthTestsUtil.assertCreateOauthClient(userAppAdminClient, TestsUtil.generateString(), REDIRECT_URI_VALID, null, function(oauthClient) {
                AuthTestsUtil.assertGrantOauthAuthCode(userAppAdminClient, oauthClient.id, null, function(authCode) {
                    AuthTestsUtil.assertExchangeOauthAuthCode(userAppAdminClient, oauthClient.id, oauthClient.secret, authCode, oauthClient.redirectUri, null, function(userAppAdminBearerClient) {

                        // Ensure the me feed from the cookie session client and bearer token client are the same
                        UsersTestsUtil.assertGetMe(userAppAdminClient, function(cookieMe) {
                            UsersTestsUtil.assertGetMe(userAppAdminBearerClient, function(bearerMe) {
                                assert.deepEqual(cookieMe, bearerMe);
                                return callback();
                            });
                        });
                    });
                });
            });
        });
    });
});
