/**
 * Copyright (c) 2015 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var _ = require('lodash');
var assert = require('assert');
var moment = require('moment');
var util = require('util');

var AppsDAO = require('gh-apps/lib/internal/dao');
var TestsUtil = require('gh-tests/lib/util');
var UsersDAO = require('gh-users/lib/internal/dao');
var UsersTestsUtil = require('gh-users/tests/util');

var AuthTestsUtil = require('gh-auth/tests/util');
var AuthOauthDAO = require('gh-auth/lib/oauth/dao');

var REDIRECT_URI_VALID = 'http://grasshopper.fronteer.io/cb';
var CLIENT_ID_NONEXISTING = 23423425;
var USER_ID_NONEXISTING = 23423425;

describe('Oauth authentication', function() {

    // Common apps and clients that are used for many tests
    var anonymousGlobalAdminClient = null;
    var globalAdminClient = null;
    var userApp = null;
    var anonymousAppClient = null;
    var userAppClient = null;
    var userAppUser = null;
    var anotherUserAppClient = null;
    var anotherUserAppUser = null;
    var userAppAdminClient = null;
    var userAppAdminUser = null;
    var externalUserAppAdminClient = null;

    beforeEach(function(callback) {
        userApp = global.tests.apps.cam2014;
        userAppAdminClient = global.tests.admins.cam2014.client;
        externalUserAppAdminClient = global.tests.admins.oxford2014.client;

        // Get the anonymous and authenticated clients
        TestsUtil.getAnonymousAppUserClient(userApp, function(_anonymousAppClient) {
            anonymousAppClient = _anonymousAppClient;

            TestsUtil.generateTestUsers(userApp, 2, false, function(user1, user2) {
                userAppClient = user1.client;
                userAppUser = user1.profile;
                anotherUserAppClient = user2.client;
                anotherUserAppUser = user2.profile;

                UsersTestsUtil.assertGetMe(userAppAdminClient, function(me) {
                    userAppAdminUser = me;

                    TestsUtil.getAnonymousGlobalAdminRestClient(function(_anonymousGlobalAdminClient) {
                        anonymousGlobalAdminClient = _anonymousGlobalAdminClient;
                        TestsUtil.getGlobalAdminRestClient(function(_globalAdminClient) {
                            globalAdminClient = _globalAdminClient;
                            return callback();
                        });
                    });
                });
            });
        });
    });

    describe('DAO', function() {

        /**
         * Test that verifies two access tokens with same token value cannot be created
         */
        it('verify two access tokens with same token value cannot be created', function(callback) {
            AuthTestsUtil.assertCreateOauthClient(userAppAdminClient, TestsUtil.generateString(), REDIRECT_URI_VALID, null, function(oauthClient) {
                AuthTestsUtil.assertCreateOauthClient(userAppAdminClient, TestsUtil.generateString(), REDIRECT_URI_VALID, null, function(anotherOauthClient) {
                    AuthTestsUtil.assertGrantOauthAuthCode(userAppClient, oauthClient.id, null, function(code) {
                        AuthTestsUtil.assertExchangeOauthAuthCode(anonymousAppClient, oauthClient.id, oauthClient.secret, code, oauthClient.redirectUri, null, function(bearerClient, token) {

                            // Bypass the APIs, creating a new access token with the same token value
                            // as the one that was just exchanged for the app user
                            AuthOauthDAO.getClient(anotherOauthClient.id, function(err, dbAnotherOauthClient) {
                                assert.ok(!err);
                                UsersDAO.getUser(anotherUserAppUser.id, function(err, dbAnotherUser) {
                                    assert.ok(!err);
                                    AuthOauthDAO.createAccessToken(dbAnotherOauthClient, dbAnotherUser, token, function(err, dbAnotherAccessToken) {
                                        assert.ok(err);

                                        // Sanity check we can create that token from a unique value
                                        var uniqueToken = 'verify two access tokens with same token value cannot be created';
                                        AuthOauthDAO.createAccessToken(dbAnotherOauthClient, dbAnotherUser, uniqueToken, function(err, dbAnotherAccessToken) {
                                            assert.ok(!err);
                                            assert.strictEqual(dbAnotherAccessToken.token, uniqueToken);
                                            return callback();
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies two access tokens cannot be granted for the same user and client
         * combination, even if the token value is different
         */
        it('verify two access tokens cannot be created for the same user and client', function(callback) {
            AuthTestsUtil.assertCreateOauthClient(userAppAdminClient, TestsUtil.generateString(), REDIRECT_URI_VALID, null, function(oauthClient) {
                AuthTestsUtil.assertCreateOauthClient(userAppAdminClient, TestsUtil.generateString(), REDIRECT_URI_VALID, null, function(anotherOauthClient) {
                    AuthTestsUtil.assertGrantOauthAuthCode(userAppClient, oauthClient.id, null, function(code) {
                        AuthTestsUtil.assertExchangeOauthAuthCode(anonymousAppClient, oauthClient.id, oauthClient.secret, code, oauthClient.redirectUri, null, function(bearerClient, token) {
                            var uniqueToken = util.format('verify two access tokens cannot be created for the same user and client', Date.now());

                            // Bypass the APIs, creating a new access token for the same client and
                            // user
                            AuthOauthDAO.getClient(oauthClient.id, function(err, dbOauthClient) {
                                assert.ok(!err);
                                UsersDAO.getUser(userAppUser.id, function(err, dbUser) {
                                    assert.ok(!err);
                                    AuthOauthDAO.createAccessToken(dbOauthClient, dbUser, uniqueToken, function(err, dbAnotherAccessToken) {
                                        assert.ok(err);

                                        // Sanity check we can create one for another client
                                        AuthOauthDAO.getClient(anotherOauthClient.id, function(err, dbAnotherOauthClient) {
                                            AuthOauthDAO.createAccessToken(dbAnotherOauthClient, dbUser, uniqueToken, function(err, dbAnotherAccessToken) {
                                                assert.ok(!err);
                                                assert.strictEqual(dbAnotherAccessToken.token, uniqueToken);
                                                return callback();
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies two auth codes with same code value cannot be created
         */
        it('verify two auth codes with the same code cannot be created', function(callback) {
            AuthTestsUtil.assertCreateOauthClient(userAppAdminClient, TestsUtil.generateString(), REDIRECT_URI_VALID, null, function(oauthClient) {
                AuthTestsUtil.assertCreateOauthClient(userAppAdminClient, TestsUtil.generateString(), REDIRECT_URI_VALID, null, function(anotherOauthClient) {
                    AuthTestsUtil.assertGrantOauthAuthCode(userAppClient, oauthClient.id, null, function(code) {

                        // Bypass the APIs, creating a new auth code with the same code value as
                        // the one that was just granted
                        AuthOauthDAO.getClient(anotherOauthClient.id, function(err, dbAnotherOauthClient) {
                            assert.ok(!err);
                            UsersDAO.getUser(anotherUserAppUser.id, function(err, dbAnotherUser) {
                                assert.ok(!err);
                                AuthOauthDAO.createAuthCode(dbAnotherOauthClient, dbAnotherUser, code, new Date(), function(err, dbAnotherAuthCode) {
                                    assert.ok(err);

                                    // Sanity check we can create that auth code from a unique value
                                    var uniqueCode = 'verify two auth codes with the same code cannot be created';
                                    AuthOauthDAO.createAuthCode(dbAnotherOauthClient, dbAnotherUser, uniqueCode, new Date(), function(err, dbAnotherAuthCode) {
                                        assert.ok(!err);
                                        assert.strictEqual(dbAnotherAuthCode.code, uniqueCode);
                                        return callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    describe('Clients', function() {

        /**
         * Test that verifies creating and updating an oauth client
         */
        it('verify create and update client', function(callback) {
            AuthTestsUtil.assertCreateOauthClient(userAppAdminClient, TestsUtil.generateString(), REDIRECT_URI_VALID, null, function(userAppAdminOauthClient) {
                AuthTestsUtil.assertCreateOauthClient(globalAdminClient, TestsUtil.generateString(), REDIRECT_URI_VALID, {'appId': userApp.id}, function(globalAdminOauthClient) {
                    var updatesUserAdmin = {
                        'displayName': TestsUtil.generateString(),
                        'redirectUri': util.format('%s/%s', REDIRECT_URI_VALID, TestsUtil.generateString())
                    };

                    var updatesGlobalAdmin = {
                        'displayName': TestsUtil.generateString(),
                        'redirectUri': util.format('%s/%s', REDIRECT_URI_VALID, TestsUtil.generateString())
                    };

                    AuthTestsUtil.assertUpdateOauthClient(userAppAdminClient, userAppAdminOauthClient.id, updatesUserAdmin, function() {
                        AuthTestsUtil.assertUpdateOauthClient(globalAdminClient, globalAdminOauthClient.id, updatesGlobalAdmin, function() {
                            return callback();
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies validation and authorization for creating a client
         */
        it('verify validation and authorization of creating a client', function(callback) {
            // Anonymous global admin user can't create a client
            AuthTestsUtil.assertCreateOauthClientFails(anonymousGlobalAdminClient, TestsUtil.generateString(), REDIRECT_URI_VALID, {'appId': userApp.id}, 401, function() {

                // Anonymous app user can't create a client
                AuthTestsUtil.assertCreateOauthClientFails(anonymousAppClient, TestsUtil.generateString(), REDIRECT_URI_VALID, null, 401, function() {

                    // Authenticated non-admin app user can't create a client
                    AuthTestsUtil.assertCreateOauthClientFails(userAppClient, TestsUtil.generateString(), REDIRECT_URI_VALID, null, 401, function() {

                        // Admin user can't create a client on another app
                        AuthTestsUtil.assertCreateOauthClientFails(externalUserAppAdminClient, TestsUtil.generateString(), REDIRECT_URI_VALID, {'appId': userApp.id}, 401, function() {

                            // Global admin must specify an app id
                            AuthTestsUtil.assertCreateOauthClientFails(globalAdminClient, TestsUtil.generateString(), REDIRECT_URI_VALID, null, 400, function() {

                                // Display name is required for global admin
                                AuthTestsUtil.assertCreateOauthClientFails(globalAdminClient, null, REDIRECT_URI_VALID, {'appId': userApp.id}, 400, function() {

                                    // Redirect uri is required for global admin
                                    AuthTestsUtil.assertCreateOauthClientFails(globalAdminClient, TestsUtil.generateString(), null, {'appId': userApp.id}, 400, function() {

                                        // Redirect uri must be valid for global admin
                                        AuthTestsUtil.assertCreateOauthClientFails(globalAdminClient, TestsUtil.generateString(), 'not a uri', {'appId': userApp.id}, 400, function() {

                                            // Display name is required for app admin
                                            AuthTestsUtil.assertCreateOauthClientFails(userAppAdminClient, null, REDIRECT_URI_VALID, null, 400, function() {

                                                // Redirect uri is required for app admin
                                                AuthTestsUtil.assertCreateOauthClientFails(userAppAdminClient, TestsUtil.generateString(), null, null, 400, function() {

                                                    // Redirect uri must be valid for app admin
                                                    AuthTestsUtil.assertCreateOauthClientFails(userAppAdminClient, TestsUtil.generateString(), 'not a uri', null, 400, function() {

                                                        // Sanity check both global and user app admin can create clients normally
                                                        AuthTestsUtil.assertCreateOauthClient(globalAdminClient, TestsUtil.generateString(), REDIRECT_URI_VALID, {'appId': userApp.id}, function() {
                                                            AuthTestsUtil.assertCreateOauthClient(userAppAdminClient, TestsUtil.generateString(), REDIRECT_URI_VALID, null, function() {
                                                                return callback();
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies disabling and enabling a client
         */
        it('verify disable and enable client', function(callback) {
            AuthTestsUtil.assertCreateOauthClient(userAppAdminClient, TestsUtil.generateString(), REDIRECT_URI_VALID, null, function(userAppAdminOauthClient) {
                AuthTestsUtil.assertCreateOauthClient(globalAdminClient, TestsUtil.generateString(), REDIRECT_URI_VALID, {'appId': userApp.id}, function(globalAdminOauthClient) {
                    AuthTestsUtil.assertDisableOauthClient(userAppAdminClient, userAppAdminOauthClient.id, function(oauthClientDisabled) {
                        AuthTestsUtil.assertDisableOauthClient(globalAdminClient, globalAdminOauthClient.id, function(oauthClientDisabled) {
                            AuthTestsUtil.assertEnableOauthClient(userAppAdminClient, userAppAdminOauthClient.id, function(oauthClientEnabled) {
                                AuthTestsUtil.assertEnableOauthClient(globalAdminClient, globalAdminOauthClient.id, function(oauthClientEnabled) {
                                    return callback();
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies validation and authorization of disabling a client
         */
        it('verify validation and authorization of disabling a client', function(callback) {
            AuthTestsUtil.assertCreateOauthClient(userAppAdminClient, TestsUtil.generateString(), REDIRECT_URI_VALID, null, function(oauthClient) {

                // Authorization
                AuthTestsUtil.assertDisableOauthClientFails(anonymousGlobalAdminClient, oauthClient.id, 401, function() {
                    AuthTestsUtil.assertDisableOauthClientFails(anonymousAppClient, oauthClient.id, 401, function() {
                        AuthTestsUtil.assertDisableOauthClientFails(userAppClient, oauthClient.id, 401, function() {
                            AuthTestsUtil.assertDisableOauthClientFails(externalUserAppAdminClient, oauthClient.id, 401, function() {

                                // Validation
                                AuthTestsUtil.assertDisableOauthClientFails(globalAdminClient, CLIENT_ID_NONEXISTING, 404, function() {
                                    AuthTestsUtil.assertDisableOauthClientFails(userAppAdminClient, CLIENT_ID_NONEXISTING, 404, function() {
                                        AuthTestsUtil.assertDisableOauthClientFails(globalAdminClient, 'not an int', 400, function() {
                                            AuthTestsUtil.assertDisableOauthClientFails(userAppAdminClient, 'not an int', 400, function() {

                                                // Sanity check it can be disabled, but can't be disabled again by both user app and
                                                // global admin users
                                                AuthTestsUtil.assertDisableOauthClient(globalAdminClient, oauthClient.id, function() {
                                                    AuthTestsUtil.assertDisableOauthClientFails(globalAdminClient, oauthClient.id, 400, function() {
                                                        AuthTestsUtil.assertEnableOauthClient(globalAdminClient, oauthClient.id, function() {
                                                            AuthTestsUtil.assertDisableOauthClient(userAppAdminClient, oauthClient.id, function() {
                                                                AuthTestsUtil.assertDisableOauthClientFails(userAppAdminClient, oauthClient.id, 400, function() {
                                                                    return callback();
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies validation and authorization of enabling a client
         */
        it('verify validation and authorization of enabling a client', function(callback) {
            AuthTestsUtil.assertCreateOauthClient(userAppAdminClient, TestsUtil.generateString(), REDIRECT_URI_VALID, null, function(oauthClient) {
                AuthTestsUtil.assertDisableOauthClient(userAppAdminClient, oauthClient.id, function() {

                    // Authorization
                    AuthTestsUtil.assertEnableOauthClientFails(anonymousGlobalAdminClient, oauthClient.id, 401, function() {
                        AuthTestsUtil.assertEnableOauthClientFails(anonymousAppClient, oauthClient.id, 401, function() {
                            AuthTestsUtil.assertEnableOauthClientFails(userAppClient, oauthClient.id, 401, function() {
                                AuthTestsUtil.assertEnableOauthClientFails(externalUserAppAdminClient, oauthClient.id, 401, function() {

                                    // Validation
                                    AuthTestsUtil.assertEnableOauthClientFails(globalAdminClient, CLIENT_ID_NONEXISTING, 404, function() {
                                        AuthTestsUtil.assertEnableOauthClientFails(userAppAdminClient, CLIENT_ID_NONEXISTING, 404, function() {
                                            AuthTestsUtil.assertEnableOauthClientFails(globalAdminClient, 'not an int', 400, function() {
                                                AuthTestsUtil.assertEnableOauthClientFails(userAppAdminClient, 'not an int', 400, function() {

                                                    // Sanity check it can be disabled, but can't be disabled again by both user app and
                                                    // global admin users
                                                    AuthTestsUtil.assertEnableOauthClient(globalAdminClient, oauthClient.id, function() {
                                                        AuthTestsUtil.assertEnableOauthClientFails(globalAdminClient, oauthClient.id, 400, function() {
                                                            AuthTestsUtil.assertDisableOauthClient(globalAdminClient, oauthClient.id, function() {
                                                                AuthTestsUtil.assertEnableOauthClient(userAppAdminClient, oauthClient.id, function() {
                                                                    AuthTestsUtil.assertEnableOauthClientFails(userAppAdminClient, oauthClient.id, 400, function() {
                                                                        return callback();
                                                                    });
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies regenerating a client secret
         */
        it('verify regenerate client secret', function(callback) {
            AuthTestsUtil.assertCreateOauthClient(userAppAdminClient, TestsUtil.generateString(), REDIRECT_URI_VALID, null, function(userAppAdminOauthClient) {
                AuthTestsUtil.assertCreateOauthClient(globalAdminClient, TestsUtil.generateString(), REDIRECT_URI_VALID, {'appId': userApp.id}, function(globalAdminOauthClient) {
                    AuthTestsUtil.assertRegenerateOauthClientSecret(userAppAdminClient, userAppAdminOauthClient.id, function(oauthClientRegenerated) {
                        AuthTestsUtil.assertRegenerateOauthClientSecret(globalAdminClient, globalAdminOauthClient.id, function(oauthClientRegenerated) {
                            return callback();
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies validation and authorization of regenerating a client secret
         */
        it('verify validation and authorization of regenerating a client secret', function(callback) {
            AuthTestsUtil.assertCreateOauthClient(userAppAdminClient, TestsUtil.generateString(), REDIRECT_URI_VALID, null, function(oauthClient) {

                // Authorization
                AuthTestsUtil.assertRegenerateOauthClientSecretFails(anonymousGlobalAdminClient, oauthClient.id, 401, function() {
                    AuthTestsUtil.assertRegenerateOauthClientSecretFails(anonymousAppClient, oauthClient.id, 401, function() {
                        AuthTestsUtil.assertRegenerateOauthClientSecretFails(userAppClient, oauthClient.id, 401, function() {
                            AuthTestsUtil.assertRegenerateOauthClientSecretFails(externalUserAppAdminClient, oauthClient.id, 401, function() {

                                // Validation
                                AuthTestsUtil.assertRegenerateOauthClientSecretFails(globalAdminClient, CLIENT_ID_NONEXISTING, 404, function() {
                                    AuthTestsUtil.assertRegenerateOauthClientSecretFails(userAppAdminClient, CLIENT_ID_NONEXISTING, 404, function() {
                                        AuthTestsUtil.assertRegenerateOauthClientSecretFails(globalAdminClient, 'not an int', 400, function() {
                                            AuthTestsUtil.assertRegenerateOauthClientSecretFails(userAppAdminClient, 'not an int', 400, function() {

                                                // Ensure the secret hasn't changed
                                                AuthTestsUtil.assertGetOauthClient(userAppAdminClient, oauthClient.id, function(oauthClientAgain) {
                                                    AuthTestsUtil.assertOauthClient(oauthClientAgain, {'equals': oauthClient});

                                                    // Sanity check secret can be changed
                                                    AuthTestsUtil.assertRegenerateOauthClientSecret(globalAdminClient, oauthClient.id, function() {
                                                        AuthTestsUtil.assertRegenerateOauthClientSecret(userAppAdminClient, oauthClient.id, function() {
                                                            return callback();
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies regular users cannot see client secret
         */
        it('verify regular user cannot see client secret', function(callback) {
            AuthTestsUtil.assertCreateOauthClient(userAppAdminClient, TestsUtil.generateString(), REDIRECT_URI_VALID, null, function(oauthClientAdmin) {
                AuthTestsUtil.assertOauthClient(oauthClientAdmin, {'sanity': 'admin'});
                // Get the client as the regular user, ensuring it is the same as the admin version without a secret
                AuthTestsUtil.assertGetOauthClient(userAppClient, oauthClientAdmin.id, function(oauthClientUser) {
                    AuthTestsUtil.assertOauthClient(oauthClientUser, {
                        'sanity': 'user',
                        'equals': _.omit(oauthClientAdmin, 'secret')
                    });

                    return callback();
                });
            });
        });
    });

    describe('Authorization Codes', function() {

        /**
         * Test that verifies granting an authorization code
         */
        it('verify grant authorization code', function(callback) {
            AuthTestsUtil.assertCreateOauthClient(userAppAdminClient, TestsUtil.generateString(), REDIRECT_URI_VALID, null, function(oauthClient) {
                AuthTestsUtil.assertGrantOauthAuthCode(userAppAdminClient, oauthClient.id, null, function(authCode) {
                    return callback();
                });
            });
        });

        /**
         * Test that verifies authorization and valiation of granting an authorization code on
         * behalf of another user
         */
        it('verify authorization and validation of granting an authorization code on behalf of another user', function(callback) {
            AuthTestsUtil.assertCreateOauthClient(userAppAdminClient, TestsUtil.generateString(), REDIRECT_URI_VALID, null, function(oauthClient) {
                AuthTestsUtil.assertCreateOauthClient(externalUserAppAdminClient, TestsUtil.generateString(), REDIRECT_URI_VALID, null, function(externalOauthClient) {

                    // Authorization
                    AuthTestsUtil.assertGrantOauthAuthCode(globalAdminClient, oauthClient.id, {'forUserId': userAppUser.id}, function() {
                        AuthTestsUtil.assertGrantOauthAuthCodeFails(anonymousGlobalAdminClient, oauthClient.id, {'forUserId': userAppUser.id}, 401, function() {
                            AuthTestsUtil.assertGrantOauthAuthCodeFails(anonymousAppClient, oauthClient.id, {'forUserId': userAppUser.id}, 401, function() {
                                AuthTestsUtil.assertGrantOauthAuthCodeFails(anotherUserAppClient, oauthClient.id, {'forUserId': userAppUser.id}, 401, function() {
                                    AuthTestsUtil.assertGrantOauthAuthCodeFails(externalUserAppAdminClient, oauthClient.id, {'forUserId': userAppUser.id}, 401, function() {
                                        AuthTestsUtil.assertGrantOauthAuthCodeFails(externalUserAppAdminClient, externalOauthClient.id, {'forUserId': userAppUser.id}, 401, function() {

                                            // Validation
                                            AuthTestsUtil.assertGrantOauthAuthCodeFails(userAppAdminClient, null, {'forUserId': externalUserAppAdminClient.id}, 400, function() {
                                                AuthTestsUtil.assertGrantOauthAuthCodeFails(externalUserAppAdminClient, null, {'forUserId': externalUserAppAdminClient.id}, 400, function() {
                                                    AuthTestsUtil.assertGrantOauthAuthCodeFails(userAppAdminClient, null, {'forUserId': userAppUser.id}, 400, function() {
                                                        AuthTestsUtil.assertGrantOauthAuthCodeFails(userAppAdminClient, 'not an int', {'forUserId': userAppUser.id}, 400, function() {
                                                            AuthTestsUtil.assertGrantOauthAuthCodeFails(userAppAdminClient, CLIENT_ID_NONEXISTING, {'forUserId': userAppUser.id}, 404, function() {
                                                                AuthTestsUtil.assertGrantOauthAuthCodeFails(userAppAdminClient, oauthClient.id, {'forUserId': 'not an int'}, 400, function() {
                                                                    AuthTestsUtil.assertGrantOauthAuthCodeFails(userAppAdminClient, oauthClient.id, {'forUserId': USER_ID_NONEXISTING}, 404, function() {

                                                                        // Sanity check we can get an auth code
                                                                        AuthTestsUtil.assertGrantOauthAuthCode(userAppAdminClient, oauthClient.id, {'forUserId': userAppUser.id}, function() {
                                                                            return callback();
                                                                        });
                                                                    });
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies authorization and validation of granting an authorization code for the
         * current user
         */
        it('verify authorization and validation of granting an authorization code for the current user', function(callback) {
            AuthTestsUtil.assertCreateOauthClient(userAppAdminClient, TestsUtil.generateString(), REDIRECT_URI_VALID, null, function(oauthClient) {

                // Authorization
                AuthTestsUtil.assertGrantOauthAuthCodeFails(globalAdminClient, oauthClient.id, null, 400, function() {
                    AuthTestsUtil.assertGrantOauthAuthCodeFails(anonymousGlobalAdminClient, oauthClient.id, null, 401, function() {
                        AuthTestsUtil.assertGrantOauthAuthCodeFails(anonymousAppClient, oauthClient.id, null, 401, function() {

                            // Validation
                            AuthTestsUtil.assertGrantOauthAuthCodeFails(externalUserAppAdminClient, oauthClient.id, null, 401, function() {
                                AuthTestsUtil.assertGrantOauthAuthCodeFails(userAppAdminClient, null, null, 400, function() {
                                    AuthTestsUtil.assertGrantOauthAuthCodeFails(userAppAdminClient, 'not an int', null, 400, function() {
                                        AuthTestsUtil.assertGrantOauthAuthCodeFails(userAppAdminClient, CLIENT_ID_NONEXISTING, null, 404, function() {

                                            // Sanity check we can grant one to a user and admin on the proper app
                                            AuthTestsUtil.assertGrantOauthAuthCode(userAppAdminClient, oauthClient.id, null, function(adminCode) {
                                                AuthTestsUtil.assertGrantOauthAuthCode(userAppClient, oauthClient.id, null, function(userCode) {
                                                    assert.notEqual(adminCode, userCode);
                                                    return callback();
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies generated authorization codes are unique
         */
        it('verify generated authorization codes are unique', function(callback) {
            AuthTestsUtil.assertCreateOauthClient(userAppAdminClient, TestsUtil.generateString(), REDIRECT_URI_VALID, null, function(oauthClient) {
                var numAuthCodes = 10;
                var generatedAuthCodes = [];

                var _done = _.after(numAuthCodes, function() {
                    assert.strictEqual(numAuthCodes, generatedAuthCodes.length);
                    assert.strictEqual(numAuthCodes, _.uniq(generatedAuthCodes).length);
                    return callback();
                });

                _.times(numAuthCodes, function() {
                    AuthTestsUtil.assertGrantOauthAuthCode(userAppClient, oauthClient.id, null, function(authCode) {
                        generatedAuthCodes.push(authCode);
                        return _done();
                    });
                });
            });
        });

        /**
         * Test that verifies a user cannot grant authorization codes from a disabled client
         */
        it('verify cannot grant authorization code from disabled client', function(callback) {
            AuthTestsUtil.assertCreateOauthClient(userAppAdminClient, TestsUtil.generateString(), REDIRECT_URI_VALID, null, function(oauthClient) {
                AuthTestsUtil.assertDisableOauthClient(userAppAdminClient, oauthClient.id, function() {

                    // Try and grant, it should fail because the client is disabled
                    AuthTestsUtil.assertGrantOauthAuthCodeFails(userAppAdminClient, oauthClient.id, null, 401, function() {

                        // Re-enable the client and try again to ensure it succeeds
                        AuthTestsUtil.assertEnableOauthClient(userAppAdminClient, oauthClient.id, function() {
                            AuthTestsUtil.assertGrantOauthAuthCode(userAppAdminClient, oauthClient.id, null, function() {
                                return callback();
                            });
                        });
                    });
                });
            });
        });
    });

    describe('Access Tokens', function() {

        /**
         * Test that verifies the authorization code exchange
         */
        it('verify exchange authorization code', function(callback) {
            AuthTestsUtil.assertCreateOauthClient(userAppAdminClient, TestsUtil.generateString(), REDIRECT_URI_VALID, null, function(oauthClient) {
                AuthTestsUtil.assertGrantOauthAuthCode(userAppAdminClient, oauthClient.id, null, function(authCode) {

                    // While the session is anonymous, authentication happens through oauth client secret
                    AuthTestsUtil.assertExchangeOauthAuthCode(anonymousAppClient, oauthClient.id, oauthClient.secret, authCode, oauthClient.redirectUri, null, function(userAppAdminBearerClient) {

                        // Ensure the me feed from the cookie session client and bearer token client are the same
                        UsersTestsUtil.assertGetMe(userAppAdminClient, function(cookieMe) {
                            UsersTestsUtil.assertGetMe(userAppAdminBearerClient, function(bearerMe) {
                                assert.deepEqual(cookieMe, bearerMe);
                                return callback();
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies the authorization of the authorization code exchange
         */
        it('verify authorization of exchanging access tokens', function(callback) {
            AuthTestsUtil.assertCreateOauthClient(userAppAdminClient, TestsUtil.generateString(), REDIRECT_URI_VALID, null, function(oauthClient) {
                AuthTestsUtil.assertGrantOauthAuthCode(userAppAdminClient, oauthClient.id, null, function(authCode) {

                    // Authorization. Use admin authenticated sessions to ensure that no user user session allows us to bypass oauth client secret authentication
                    AuthTestsUtil.assertExchangeOauthAuthCodeFails(userAppClient, null, oauthClient.secret, authCode, oauthClient.redirectUri, null, 401, function() {
                        AuthTestsUtil.assertExchangeOauthAuthCodeFails(userAppClient, 'not an int', oauthClient.secret, authCode, oauthClient.redirectUri, null, 401, function() {
                            AuthTestsUtil.assertExchangeOauthAuthCodeFails(userAppClient, CLIENT_ID_NONEXISTING, oauthClient.secret, authCode, oauthClient.redirectUri, null, 401, function() {
                                AuthTestsUtil.assertExchangeOauthAuthCodeFails(userAppClient, oauthClient.id, null, authCode, oauthClient.redirectUri, null, 401, function() {
                                    AuthTestsUtil.assertExchangeOauthAuthCodeFails(userAppClient, oauthClient.id, 'incorrect secret', authCode, oauthClient.redirectUri, null, 401, function() {
                                        AuthTestsUtil.assertExchangeOauthAuthCodeFails(userAppClient, oauthClient.id, oauthClient.secret, null, oauthClient.redirectUri, null, 400, function() {
                                            AuthTestsUtil.assertExchangeOauthAuthCodeFails(userAppClient, oauthClient.id, oauthClient.secret, 'incorrect code', oauthClient.redirectUri, null, 403, function() {
                                                AuthTestsUtil.assertExchangeOauthAuthCodeFails(userAppClient, oauthClient.id, oauthClient.secret, authCode, null, null, 403, function() {
                                                    AuthTestsUtil.assertExchangeOauthAuthCodeFails(userAppClient, oauthClient.id, oauthClient.secret, authCode, 'not a uri', null, 403, function() {
                                                        AuthTestsUtil.assertExchangeOauthAuthCodeFails(userAppClient, oauthClient.id, oauthClient.secret, authCode, 'http://grasshopper.fronteer.io/incorrect/uri', null, 403, function() {

                                                            // Ensure you can only use the code to exchange for a token on the user's app
                                                            AuthTestsUtil.assertExchangeOauthAuthCodeFails(externalUserAppAdminClient, oauthClient.id, oauthClient.secret, authCode, oauthClient.redirectUri, null, 401, function() {

                                                                // Ensure normal exchange and authorization succeeds with any client session
                                                                AuthTestsUtil.assertExchangeOauthAuthCode(userAppAdminClient, oauthClient.id, oauthClient.secret, authCode, oauthClient.redirectUri, null, function() {
                                                                    AuthTestsUtil.assertExchangeOauthAuthCode(userAppClient, oauthClient.id, oauthClient.secret, authCode, oauthClient.redirectUri, null, function() {
                                                                        AuthTestsUtil.assertExchangeOauthAuthCode(anonymousAppClient, oauthClient.id, oauthClient.secret, authCode, oauthClient.redirectUri, null, function() {
                                                                            return callback();
                                                                        });
                                                                    });
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies exhcnaging an expired authorization code fails
         */
        it('verify exchanging expired authorization code fails', function(callback) {
            AuthTestsUtil.assertCreateOauthClient(userAppAdminClient, TestsUtil.generateString(), REDIRECT_URI_VALID, null, function(oauthClient) {
                AuthTestsUtil.assertGrantOauthAuthCode(userAppClient, oauthClient.id, null, function(code) {

                    // Ensure exchanging twice succeeds
                    AuthTestsUtil.assertExchangeOauthAuthCode(userAppAdminClient, oauthClient.id, oauthClient.secret, code, oauthClient.redirectUri, null, function(bearerClient, firstToken) {
                        AuthTestsUtil.assertExchangeOauthAuthCode(userAppAdminClient, oauthClient.id, oauthClient.secret, code, oauthClient.redirectUri, null, function(bearerClient, secondToken) {
                            assert.strictEqual(firstToken, secondToken);

                            AuthOauthDAO.getAuthCodeByCode(code, function(err, authCode) {
                                assert.ok(!err);

                                // Sanity check the expires
                                var expiresMillis = moment(authCode.expires).valueOf();
                                assert.ok(expiresMillis <= moment().add(10, 'minutes').valueOf());
                                assert.ok(expiresMillis >= moment().add(9, 'minutes').valueOf());

                                // Set the expires to now
                                authCode.updateAttributes({'expires': new Date()}).complete(function(err, authCode) {
                                    assert.ok(!err);

                                    // Ensure exchanging fails
                                    AuthTestsUtil.assertExchangeOauthAuthCodeFails(userAppAdminClient, oauthClient.id, oauthClient.secret, code, oauthClient.redirectUri, null, 403, function() {
                                        return callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies the same token gets issued for a client if one already exists
         */
        it('verify same token gets issued for a client if one already exists', function(callback) {
            AuthTestsUtil.assertCreateOauthClient(userAppAdminClient, TestsUtil.generateString(), REDIRECT_URI_VALID, null, function(oauthClient) {

                // Grant 2 distinct auth codes
                AuthTestsUtil.assertGrantOauthAuthCode(userAppClient, oauthClient.id, null, function(code1) {
                    AuthTestsUtil.assertGrantOauthAuthCode(userAppClient, oauthClient.id, null, function(code2) {
                        assert.notEqual(code1, code2);

                        // Grant 3 tokens total between both auth codes, ensuring we get the same tokens
                        AuthTestsUtil.assertExchangeOauthAuthCode(anonymousAppClient, oauthClient.id, oauthClient.secret, code1, oauthClient.redirectUri, null, function(bearerClient, firstToken) {
                            AuthTestsUtil.assertExchangeOauthAuthCode(anonymousAppClient, oauthClient.id, oauthClient.secret, code2, oauthClient.redirectUri, null, function(bearerClient, secondToken) {
                                AuthTestsUtil.assertExchangeOauthAuthCode(anonymousAppClient, oauthClient.id, oauthClient.secret, code1, oauthClient.redirectUri, null, function(bearerClient, thirdToken) {
                                    assert.strictEqual(firstToken, secondToken);
                                    assert.strictEqual(firstToken, thirdToken);
                                    return callback();
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies a disabled client cannot exchange for an access token
         */
        it('verify a disabled client cannot exchange for an access token', function(callback) {
            AuthTestsUtil.assertCreateOauthClient(userAppAdminClient, TestsUtil.generateString(), REDIRECT_URI_VALID, null, function(oauthClient) {
                AuthTestsUtil.assertGrantOauthAuthCode(userAppAdminClient, oauthClient.id, null, function(code) {

                    // Disable the oauth client, ensuring we can't exchange an access token
                    AuthTestsUtil.assertDisableOauthClient(userAppAdminClient, oauthClient.id, function(oauthClientDisabled) {
                        AuthTestsUtil.assertExchangeOauthAuthCodeFails(userAppAdminClient, oauthClient.id, oauthClient.secret, code, oauthClient.redirectUri, null, 401, function() {

                            // Re-enable the client and try again to ensure it succeeds
                            AuthTestsUtil.assertEnableOauthClient(userAppAdminClient, oauthClient.id, function(oauthClientDisabled) {
                                AuthTestsUtil.assertExchangeOauthAuthCode(userAppAdminClient, oauthClient.id, oauthClient.secret, code, oauthClient.redirectUri, null, function() {
                                    return callback();
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies deleting an access token
         */
        it('verify deleting an access token', function(callback) {
            AuthTestsUtil.assertCreateOauthClient(userAppAdminClient, TestsUtil.generateString(), REDIRECT_URI_VALID, null, function(oauthClient) {
                AuthTestsUtil.assertGrantOauthAuthCode(userAppAdminClient, oauthClient.id, null, function(code) {
                    AuthTestsUtil.assertExchangeOauthAuthCode(anonymousAppClient, oauthClient.id, oauthClient.secret, code, oauthClient.redirectUri, null, function(bearerClient, token) {

                        // Ensure the bearer client represents the user who granted the token
                        UsersTestsUtil.assertGetMe(bearerClient, function(me) {
                            assert.strictEqual(me.id, userAppAdminUser.id);

                            // Delete the token
                            AuthTestsUtil.assertDeleteOauthAccessTokenByToken(userAppAdminClient, token, function() {

                                // Ensure it's no longer accessible in the user's list of tokens
                                AuthTestsUtil.assertGetAllOauthAccessTokensByUser(userAppAdminClient, userAppAdminUser.id, function(accessTokensAfterDelete) {
                                    assert.ok(!_.findWhere(accessTokensAfterDelete, {'token': token}));

                                    // Ensure the bearer client can no longer use the token
                                    UsersTestsUtil.assertGetMe(bearerClient, function(me) {
                                        assert.ok(me.anon);
                                        assert.ok(!me.id);
                                        return callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies authorization and validation of deleting an access token
         */
        it('verify authorization and validation of deleting an access token', function(callback) {
            AuthTestsUtil.assertCreateOauthClient(userAppAdminClient, TestsUtil.generateString(), REDIRECT_URI_VALID, null, function(oauthClient) {
                AuthTestsUtil.assertGrantOauthAuthCode(userAppClient, oauthClient.id, null, function(code) {
                    AuthTestsUtil.assertExchangeOauthAuthCode(anonymousAppClient, oauthClient.id, oauthClient.secret, code, oauthClient.redirectUri, null, function(bearerClient, token) {

                        // Ensure the bearer client represents the user who granted the token
                        UsersTestsUtil.assertGetMe(bearerClient, function(meBeforeFailedDeletes) {
                            assert.strictEqual(meBeforeFailedDeletes.id, userAppUser.id);

                            // Authorization
                            AuthTestsUtil.assertDeleteOauthAccessTokenByTokenFails(anotherUserAppClient, token, 401, function() {
                                AuthTestsUtil.assertDeleteOauthAccessTokenByTokenFails(anonymousAppClient, token, 401, function() {
                                    AuthTestsUtil.assertDeleteOauthAccessTokenByTokenFails(anonymousGlobalAdminClient, token, 401, function() {
                                        AuthTestsUtil.assertDeleteOauthAccessTokenByTokenFails(externalUserAppAdminClient, token, 401, function() {

                                            // Validation
                                            AuthTestsUtil.assertDeleteOauthAccessTokenByTokenFails(globalAdminClient, null, 400, function() {
                                                AuthTestsUtil.assertDeleteOauthAccessTokenByTokenFails(globalAdminClient, 'non-existing token', 404, function() {

                                                    // Ensure the bearer client still works as before
                                                    UsersTestsUtil.assertGetMe(bearerClient, function(meAfterFailedDeletes) {
                                                        assert.deepEqual(meAfterFailedDeletes, meBeforeFailedDeletes);

                                                        // Ensure global admin can delete
                                                        AuthTestsUtil.assertDeleteOauthAccessTokenByToken(globalAdminClient, token, function() {

                                                            // Ensure the bearer client is now hosed
                                                            UsersTestsUtil.assertGetMe(bearerClient, function(meAfterDelete1) {
                                                                assert.ok(meAfterDelete1.anon);
                                                                assert.ok(!meAfterDelete1.id);

                                                                // Ensure user themself can delete by issuing another and deleting it
                                                                AuthTestsUtil.assertExchangeOauthAuthCode(anonymousAppClient, oauthClient.id, oauthClient.secret, code, oauthClient.redirectUri, null, function(bearerClient2, token2) {
                                                                    assert.notEqual(token2, token);
                                                                    AuthTestsUtil.assertDeleteOauthAccessTokenByToken(userAppClient, token2, function() {

                                                                        // Ensure the second bearer client is non-functional
                                                                        UsersTestsUtil.assertGetMe(bearerClient2, function(meAfterDelete2) {
                                                                            assert.ok(meAfterDelete2.anon);
                                                                            assert.ok(!meAfterDelete2.id);
                                                                            return callback();
                                                                        });
                                                                    });
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies an access token for a disabled client cannot be used
         */
        it('verify access token for disabled client cannot be used', function(callback) {
            AuthTestsUtil.assertCreateOauthClient(userAppAdminClient, TestsUtil.generateString(), REDIRECT_URI_VALID, null, function(oauthClient) {
                AuthTestsUtil.assertGrantOauthAuthCode(userAppAdminClient, oauthClient.id, null, function(code) {
                    AuthTestsUtil.assertExchangeOauthAuthCode(userAppAdminClient, oauthClient.id, oauthClient.secret, code, oauthClient.redirectUri, null, function(bearerClient, token) {

                        // Disable the client with which the token is associated
                        AuthTestsUtil.assertDisableOauthClient(userAppAdminClient, oauthClient.id, function(oauthClientDisabled) {

                            // Ensure the bearer client is now anonymous
                            UsersTestsUtil.assertGetMe(bearerClient, function(bearerMeAfterDisable) {
                                assert.ok(bearerMeAfterDisable.anon);
                                assert.ok(!bearerMeAfterDisable.id);
                                return callback();
                            });
                        });
                    });
                });
            });
        });

        it('verify listing access tokens for a user', function(callback) {
            AuthTestsUtil.assertCreateOauthClient(userAppAdminClient, TestsUtil.generateString(), REDIRECT_URI_VALID, null, function(oauthClient) {
                AuthTestsUtil.assertGrantOauthAuthCode(userAppClient, oauthClient.id, null, function(code) {
                    AuthTestsUtil.assertExchangeOauthAuthCode(anonymousAppClient, oauthClient.id, oauthClient.secret, code, oauthClient.redirectUri, null, function(bearerClient, token) {
                        AuthTestsUtil.assertGetOauthAccessTokensByUser(userAppClient, userAppUser.id, null, function(response) {
                            return callback();
                        });
                    });
                });
            });
        });
    });
});
