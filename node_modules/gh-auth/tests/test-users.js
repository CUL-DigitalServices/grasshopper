/**
 * Copyright (c) 2014 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var assert = require('assert');
var TestsUtil = require('gh-tests');
var UsersTestsUtil = require('gh-users/tests/util');

var AuthTestsUtil = require('gh-auth/tests/util');

describe('Local user authentication', function() {

    describe('Login', function() {

        /**
         * Test that verifies that a user can log in
         */
        it('verify a user can log in', function(callback) {
            // Let a global admin create a user
            var displayName = TestsUtil.generateString().toLowerCase();
            var email = TestsUtil.generateTestEmailAddress();
            var password = TestsUtil.generateString();
            TestsUtil.getGlobalAdminRestClient(function(globalAdminClient) {
                globalAdminClient.user.createUser(displayName, email, password, {'appId': global.tests.apps.oxford2014.id}, function(err, user) {
                    assert.ok(!err);

                    // Get an anonymous client for the app
                    TestsUtil.getAnonymousAppUserClient(global.tests.apps.oxford2014, function(anonymousClient) {

                        // The anonymous client should be able to log in
                        AuthTestsUtil.assertLogin(anonymousClient, email, password, callback);
                    });
                });
            });
        });

        /**
         * Test that verifies validation when logging in
         */
        it('verify validation when logging in', function(callback) {
            // Get an anonymous client for the app
            TestsUtil.getAnonymousAppUserClient(global.tests.apps.oxford2014, function(anonymousClient) {

                // Using bad credentials should not allow a user to get authenticated
                AuthTestsUtil.assertLoginFails(anonymousClient, 'foo@foo.com', null, function() {
                    AuthTestsUtil.assertLoginFails(anonymousClient, null, 'password', function() {
                        AuthTestsUtil.assertLoginFails(anonymousClient, 'not an email', 'password', function() {
                            return callback();
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that a user needs the correct credentials to log in
         */
        it('verify a user needs the correct credentials to log in', function(callback) {
            // Let a global admin create a user
            var displayName = TestsUtil.generateString().toLowerCase();
            var email = TestsUtil.generateTestEmailAddress();
            var password = TestsUtil.generateString();
            TestsUtil.getGlobalAdminRestClient(function(globalAdminClient) {
                globalAdminClient.user.createUser(displayName, email, password, {'appId': global.tests.apps.oxford2014.id}, function(err, user) {
                    assert.ok(!err);

                    // Get an anonymous client for the app
                    TestsUtil.getAnonymousAppUserClient(global.tests.apps.oxford2014, function(anonymousClient) {

                        // Using bad credentials should not allow a user to get authenticated
                        AuthTestsUtil.assertLoginFails(anonymousClient, email, 'wrong password', function() {
                            AuthTestsUtil.assertLoginFails(anonymousClient, 'non.existing@email.com', password, function() {
                                return callback();
                            });
                        });
                    });
                });
            });
        });
    });

    describe('Logout', function() {

        /**
         * Test that verifies that a user can log out
         */
        it('verify a user can log out', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, false, function(simon) {
                // Sanity-check the user is logged in
                UsersTestsUtil.assertGetMe(simon.client, function(me) {
                    assert.strictEqual(me.anon, false);

                    // Log out
                    AuthTestsUtil.assertLogout(simon.client, function() {

                        // Verify the user is logged out
                        UsersTestsUtil.assertGetMe(simon.client, function(me) {
                            assert.strictEqual(me.anon, true);
                            return callback();
                        });
                    });
                });
            });
        });
    });
});
