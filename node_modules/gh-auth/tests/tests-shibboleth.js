/**
 * Copyright (c) 2014 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var _ = require('lodash');
var assert = require('assert');
var request = require('request');

var AppsTestsUtil = require('gh-apps/tests/util');
var ConfigTestsUtil = require('gh-config/tests/util');
var TenantsTestsUtil = require('gh-tenants/tests/util');
var TestsUtil = require('gh-tests');
var UsersTestsUtil = require('gh-users/tests/util');

var AuthTestsUtil = require('gh-auth/tests/util');

describe('Shibboleth authentication', function() {

    var tenant = null;
    var app = null;

    /*!
     * Create a test tenant and app before all tests
     */
    before(function(callback) {
        TestsUtil.getGlobalAdminRestClient(function(globalAdminClient) {
            TestsUtil.generateTestTenant(1, function(_tenant, _app) {
                tenant = _tenant;
                app = _app;
                return callback();
            });
        });
    });

    /*!
     * Restore the shibboleth configuration before each test
     */
    beforeEach(function(callback) {
        TestsUtil.getGlobalAdminRestClient(function(globalAdminClient) {
            var defaultConfiguration = {
                'enableShibbolethAuth': true,
                'shibIdpEntityId': 'https://idp.olympia.edu/shibboleth',
                'shibExternalIdAttributes': 'eppn persistent-id targeted-id',
                'shibMapDisplayname': 'displayname cn',
                'shibMapEmail': 'mail email eppn'
            };
            ConfigTestsUtil.assertUpdateConfig(globalAdminClient, app.id, defaultConfiguration, callback);
        });
    });

    /**
     * Test that verifies that a user can log in through Shibboleth
     */
    it('verify a user can log in through Shibboleth', function(callback) {
        var attributes = {
            'email': TestsUtil.generateTestEmailAddress(),
            'displayname': 'Simon G'
        };
        AuthTestsUtil.assertShibbolethLogin(app, null, attributes, null, function(restClient, remoteUser) {

            // Verify we're authenticated
            UsersTestsUtil.assertGetMe(restClient, function(me) {
                assert.strictEqual(me.displayName, attributes.displayname);
                assert.strictEqual(me.email, attributes.email);
                return callback();
            });
        });
    });

    /**
     * Test that verifies that a user is only created once for a given shibboleth id
     */
    it('verify a user is only created once for a given shibboleth id', function(callback) {
        // Create a new user account by logging in for the first time
        var remoteUser = TestsUtil.generateTestUserId();
        var attributes = {
            'email': TestsUtil.generateTestEmailAddress(),
            'displayname': 'Simon G'
        };
        AuthTestsUtil.assertShibbolethLogin(app, remoteUser, attributes, null, function(restClientA, remoteUser) {

            // Verify we're authenticated
            UsersTestsUtil.assertGetMe(restClientA, function(meA) {
                assert.strictEqual(meA.displayName, attributes.displayname);
                assert.strictEqual(meA.email, attributes.email);

                // Log in again with the same credentials
                AuthTestsUtil.assertShibbolethLogin(app, remoteUser, attributes, null, function(restClientB, remoteUser) {

                    // Verify we're authenticated into the same user account
                    UsersTestsUtil.assertGetMe(restClientB, function(meB) {
                        assert.strictEqual(meB.displayName, attributes.displayname);
                        assert.strictEqual(meB.email, attributes.email);
                        assert.strictEqual(meB.id, meA.id);
                        return callback();
                    });
                });
            });
        });
    });

    /**
     * Test that verifies that the shibboleth attributes that should be used for profile parameters are configurable
     */
    it('verify the shibboleth attributes that should be used for profile parameters are configurable', function(callback) {
        // Configure Shibboleth authentication so the foo1 attributes are used for everything
        TestsUtil.getGlobalAdminRestClient(function(globalAdminClient) {
            var configuration = {
                'shibExternalIdAttributes': 'eppn1 eppn persistent-id targeted-id',
                'shibMapDisplayname': 'displayname1 displayname cn',
                'shibMapEmail': 'email1 mail email eppn'
            };
            ConfigTestsUtil.assertUpdateConfig(globalAdminClient, app.id, configuration, function() {

                var attributes = {
                    'eppn': 'Should not be used',
                    'eppn1': TestsUtil.generateString(),
                    'eppn2': TestsUtil.generateString(),
                    'email': 'Should not be used',
                    'email1': TestsUtil.generateTestEmailAddress(),
                    'email2': TestsUtil.generateTestEmailAddress(),
                    'displayname': 'Should not be used',
                    'displayname1': 'Name 1',
                    'displayname2': 'Name 2'
                };

                // Let a user sign in
                AuthTestsUtil.assertShibbolethLogin(app, null, attributes, null, function(restClient1) {

                    // Assert the correct attributes were used
                    UsersTestsUtil.assertGetMe(restClient1, function(me1) {
                        assert.strictEqual(me1.shibbolethId, attributes.eppn1);
                        assert.strictEqual(me1.displayName, attributes.displayname1);
                        assert.strictEqual(me1.email, attributes.email1);

                        // Configure Shibboleth authentication so the foo2 attributes are used for everything
                        var configuration = {
                            'shibExternalIdAttributes': 'eppn2 eppn persistent-id targeted-id',
                            'shibMapDisplayname': 'displayname2 displayname cn',
                            'shibMapEmail': 'email2 mail email eppn'
                        };
                        ConfigTestsUtil.assertUpdateConfig(globalAdminClient, app.id, configuration, function() {

                            // Let a user sign in
                            AuthTestsUtil.assertShibbolethLogin(app, null, attributes, null, function(restClient2) {

                                // Assert the correct attributes were used
                                UsersTestsUtil.assertGetMe(restClient2, function(me2) {
                                    assert.strictEqual(me2.shibbolethId, attributes.eppn2);
                                    assert.strictEqual(me2.displayName, attributes.displayname2);
                                    assert.strictEqual(me2.email, attributes.email2);
                                    return callback();
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    /**
     * Test that verifies that the shibboleth attributes can be configured as a priority list
     */
    it('verify the shibboleth attributes can be configured as a priority list', function(callback) {
        // Configure the shibboleth mapping so a bunch of non existing attributes are tried first
        TestsUtil.getGlobalAdminRestClient(function(globalAdminClient) {
            var configuration = {
                'shibMapDisplayname': 'nope does not exist displayname cn'
            };
            ConfigTestsUtil.assertUpdateConfig(globalAdminClient, app.id, configuration, function() {

                // Let a user sign in
                var attributes = {
                    'displayname': 'Dr Name-o'
                };
                AuthTestsUtil.assertShibbolethLogin(app, null, attributes, null, function(restClient) {

                    // Assert the correct attributes were used
                    UsersTestsUtil.assertGetMe(restClient, function(me2) {
                        assert.strictEqual(me2.displayName, attributes.displayname);
                        return callback();
                    });
                });
            });
        });
    });

    describe('Shibboleth authentication initialisation', function() {

        /**
         * Test that verifies the user is not redirected when Shibboleth authentication is disabled
         */
        it('verify the user is not redirected when shibboleth authentication is disabled', function(callback) {
            // Disable Shibboleth
            TestsUtil.getGlobalAdminRestClient(function(globalAdminClient) {
                var configuration = {
                    'enableShibbolethAuth': false
                };
                ConfigTestsUtil.assertUpdateConfig(globalAdminClient, app.id, configuration, function() {

                    // Verify the authentication flow is not started
                    TestsUtil.getAnonymousAppUserClient(app, function(anonymousClient) {
                        AuthTestsUtil.assertShibbolethApplicationRedirectFails(anonymousClient, '/foo', 400, function() {
                            return callback();
                        });
                    });
                });
            });
        });
    });

    describe('Shibboleth SP initialisation', function() {

        /**
         * Test that verifies the endpoint is disabled on regular applications
         */
        it('verify the endpoint is disabled on regular applications', function(callback) {
            TestsUtil.getAnonymousAppUserClient(app, function(anonymousClient) {
                AuthTestsUtil.assertShibbolethSPRedirectFails(anonymousClient, {}, 501, function() {
                    return callback();
                });
            });
        });

        /**
         * Test that verifies that the parameters are validated
         */
        it('verify the parameters are validated', function(callback) {
            TestsUtil.getShibbolethRestClient(function(shibAppClient) {
                // Invalid app id
                AuthTestsUtil.assertShibbolethSPRedirectFails(shibAppClient, {'app': 'Not a number', 'signature': 'abc', 'expires': Date.now() + 10000}, 400, function() {
                    // Invalid expires value
                    AuthTestsUtil.assertShibbolethSPRedirectFails(shibAppClient, {'app': app.id, 'signature': 'abc', 'expires': 'Not a number'}, 400, function() {
                        // Invalid signature
                        AuthTestsUtil.assertShibbolethSPRedirectFails(shibAppClient, {'app': app.id, 'signature': 'invalid signature', 'expires': Date.now() + 10000}, 401, function() {

                            // Missing values
                            AuthTestsUtil.assertShibbolethSPRedirectFails(shibAppClient, {'app': null, 'signature': 'abc', 'expires': Date.now() + 10000}, 400, function() {
                                AuthTestsUtil.assertShibbolethSPRedirectFails(shibAppClient, {'app': app.id, 'signature': null, 'expires': Date.now() + 10000}, 400, function() {
                                    AuthTestsUtil.assertShibbolethSPRedirectFails(shibAppClient, {'app': app.id, 'signature': 'abc', 'expires': null}, 400, function() {
                                        return callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    describe('Shibboleth SP callback', function() {

        /**
         * Test that verifies the endpoint is disabled on regular applications
         */
        it('verify the endpoint is disabled on regular applications', function(callback) {
            TestsUtil.getAnonymousAppUserClient(app, function(anonymousClient) {
                AuthTestsUtil.assertShibbolethSPCallbackFails(anonymousClient, {}, 501, function() {
                    return callback();
                });
            });
        });

        /**
         * Test that verifies that a shibboleth cookie is required for a correct callback flow
         */
        it('verify a shibboleth cookie is required for a correct callback flow', function(callback) {
            TestsUtil.getShibbolethRestClient(function(shibAppClient) {
                AuthTestsUtil.assertShibbolethSPCallbackFails(shibAppClient, {}, 400, function() {
                    return callback();
                });
            });
        });

        /**
         * Test that verifies that the shibboleth cookie can't be tampered with
         */
        it('verify the shibboleth cookie cannot be tampered with', function(callback) {
            // Create an extra app
            TestsUtil.getGlobalAdminRestClient(function(globalAdminClient) {
                TestsUtil.generateTestTenant(1, function(tenant2, app2) {

                    // Get an anonymous restclient on our first app
                    TestsUtil.getAnonymousAppUserClient(app, function(anonymousClient) {

                        // Indicate that we want to login in with Shibboleth on our first app
                        AuthTestsUtil.assertShibbolethApplicationRedirect(anonymousClient, '/event/foo', function(params) {

                            // Let the Shibboleth application redirect us to mod_shib
                            TestsUtil.getShibbolethRestClient(function(shibAppClient) {
                                AuthTestsUtil.assertShibbolethSPRedirect(shibAppClient, params, function() {

                                    // Change the application id in the shibboleth cookie
                                    var cookie = request.cookie('shibboleth=' + app2.id);
                                    shibAppClient.cookieJar.setCookie(cookie, 'http://localhost:2001/');

                                    // We should've detected that the shibboleth cookie has been tampered with
                                    AuthTestsUtil.assertShibbolethSPCallbackFails(shibAppClient, {}, 400, function() {
                                        return callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    describe('Application callback', function() {

        /**
         * Test that verifies the user is not redirected when Shibboleth authentication is disabled
         */
        it('verify the user is not redirected when shibboleth authentication is disabled', function(callback) {
            // Disable Shibboleth
            TestsUtil.getGlobalAdminRestClient(function(globalAdminClient) {
                var defaultConfiguration = {
                    'enableShibbolethAuth': false
                };
                ConfigTestsUtil.assertUpdateConfig(globalAdminClient, app.id, defaultConfiguration, function() {

                    // Verify the authentication flow is not started
                    TestsUtil.getAnonymousAppUserClient(app, function(anonymousClient) {
                        AuthTestsUtil.assertShibbolethApplicationCallbackFails(anonymousClient, {'user': 1, 'signature': 'abc', 'expires': Date.now() + 10000}, 400, function() {
                            return callback();
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that the parameters are validated
         */
        it('verify the parameters are validated', function(callback) {
            TestsUtil.getAnonymousAppUserClient(app, function(anonymousClient) {

                // Invalid / missing parameters
                AuthTestsUtil.assertShibbolethApplicationCallbackFails(anonymousClient, {'user': 'Not a number', 'signature': 'abc', 'expires': Date.now() + 10000}, 400, function() {
                    AuthTestsUtil.assertShibbolethApplicationCallbackFails(anonymousClient, {'user': null, 'signature': 'abc', 'expires': Date.now() + 10000}, 400, function() {
                        AuthTestsUtil.assertShibbolethApplicationCallbackFails(anonymousClient, {'user': 1, 'signature': null, 'expires': Date.now() + 10000}, 400, function() {
                            AuthTestsUtil.assertShibbolethApplicationCallbackFails(anonymousClient, {'user': 1, 'signature': 'abc', 'expires': null}, 400, function() {
                                AuthTestsUtil.assertShibbolethApplicationCallbackFails(anonymousClient, {'user': 1, 'signature': 'abc', 'expires': Date.now() - 10000}, 400, function() {

                                    // Invalid signature
                                    AuthTestsUtil.assertShibbolethApplicationCallbackFails(anonymousClient, {'user': 1, 'signature': 'abc', 'expires': Date.now() + 10000}, 401, function() {
                                        return callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that the redirection url is honoured
         */
        it('verify the redirection url is honoured', function(callback) {
            // Verify a proper redirect URL works
            var attributes = {
                'email': TestsUtil.generateTestEmailAddress(),
                'displayname': 'Simon G'
            };
            AuthTestsUtil.assertShibbolethLogin(app, null, attributes, '/event/foo', function(restClient, remoteUser) {

                // Verify open redirect attacks are thwarted
                TestsUtil.getAnonymousAppUserClient(app, function(anonymousClient) {

                    // Try another domain
                    AuthTestsUtil.assertShibbolethApplicationRedirect(anonymousClient, 'http://www.google.com/foo', function(params) {
                        TestsUtil.getShibbolethRestClient(function(shibAppClient) {
                            AuthTestsUtil.assertShibbolethSPRedirect(shibAppClient, params, function() {
                                var modShibAttributes = _.extend({}, attributes, {
                                    'shib-session-id': _.random(100000),
                                    'remote_user': remoteUser
                                });
                                AuthTestsUtil.assertShibbolethSPCallback(shibAppClient, modShibAttributes, function(params) {
                                    AuthTestsUtil.assertShibbolethApplicationCallback(anonymousClient, params, function(response) {

                                        // Verify the user was sent to '/' and NOT to Google
                                        assert.strictEqual(response.headers.location, '/');

                                        // Try another domain, but in a protocol-agnostic manner
                                        AuthTestsUtil.assertShibbolethApplicationRedirect(anonymousClient, '//www.google.com/foo', function(params) {
                                            TestsUtil.getShibbolethRestClient(function(shibAppClient) {
                                                AuthTestsUtil.assertShibbolethSPRedirect(shibAppClient, params, function() {
                                                    AuthTestsUtil.assertShibbolethSPCallback(shibAppClient, modShibAttributes, function(params) {
                                                        AuthTestsUtil.assertShibbolethApplicationCallback(anonymousClient, params, function(response) {

                                                            // Verify the user was sent to '/' and NOT to Google
                                                            assert.strictEqual(response.headers.location, '/');
                                                            return callback();
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });
});
