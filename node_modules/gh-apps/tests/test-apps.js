/**
 * Copyright (c) 2014 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var _ = require('lodash');
var assert = require('assert');

var TenantsTestUtil = require('gh-tenants/tests/util');
var TestsUtil = require('gh-tests/lib/util');

var AppsTestUtil = require('./util');


describe('Apps', function() {

    describe('Get all apps', function() {

        /**
         * Test that verifies that all apps can be retrieved
         */
        it('verify get all apps', function(callback) {
            TestsUtil.getGlobalAdminRestClient(function(globalAdminClient) {
                // Retrieve all apps for the default Cambridge tenant
                AppsTestUtil.assertGetApps(globalAdminClient, global.tests.tenants.cam.id, null, function(apps) {
                    var cambridgeTotal = apps.length;

                    // Verify that the default cam2013 app is present
                    var cambridge2013App = _.where(apps, {'host': tests.apps.cam2013.host})[0];
                    AppsTestUtil.assertApp(cambridge2013App, tests.apps.cam2013);

                    // Verify that the default cam2014 app is present
                    var cambridge2014App = _.where(apps, {'host': tests.apps.cam2014.host})[0];
                    AppsTestUtil.assertApp(cambridge2014App, tests.apps.cam2014);

                    // Verify that the cam2015 app is not present
                    var cambridge2015App = _.where(apps, {'host': 'cam2015.timetable.cam.ac.uk'})[0];
                    assert.ok(!cambridge2015App);

                    // Retrieve all apps for the default Oxford tenant
                    AppsTestUtil.assertGetApps(globalAdminClient, global.tests.tenants.oxford.id, null, function(apps) {
                        var oxfordTotal = apps.length;

                        // Verify that the default oxford2013 app is present
                        var oxford2013App = _.where(apps, {'host': tests.apps.oxford2013.host})[0];
                        AppsTestUtil.assertApp(oxford2013App, tests.apps.oxford2013);

                        // Verify that the default oxford2014 app is present
                        var oxford2014App = _.where(apps, {'host': tests.apps.oxford2014.host})[0];
                        AppsTestUtil.assertApp(oxford2014App, tests.apps.oxford2014);

                        // Verify that the oxford2015 app is not present
                        var oxford2015App = _.where(apps, {'host': 'oxford2015.timetable.cam.ac.uk'})[0];
                        assert.ok(!oxford2015App);

                        // Create the cam2015 app
                        AppsTestUtil.assertCreateApp(globalAdminClient, global.tests.tenants.cam.id, 'Cambridge University', 'cam2015.timetable.cam.ac.uk', 'timetable', function(createdCam2015App) {

                            // Retrieve all apps for the default Cambridge tenant
                            AppsTestUtil.assertGetApps(globalAdminClient, global.tests.tenants.cam.id, cambridgeTotal + 1, function(apps) {

                                // Verify that the cam2015 app is present
                                var cambridge2015App = _.where(apps, {'host': 'cam2015.timetable.cam.ac.uk'})[0];
                                AppsTestUtil.assertApp(cambridge2015App, createdCam2015App);

                                // Verify that the default Oxford tenant still has the same number of apps
                                AppsTestUtil.assertGetApps(globalAdminClient, global.tests.tenants.oxford.id, oxfordTotal, function(apps) {
                                    return callback();
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies validation for retrieving all apps for a tenant
         */
        it('verify get all apps validation', function(callback) {
            // Verify that an anonymous global administrator user is not able to retrieve all apps for a tenant
            TestsUtil.getAnonymousGlobalAdminRestClient(function(anonymousGlobalAdminClient) {
                AppsTestUtil.assertGetAppsFails(anonymousGlobalAdminClient, global.tests.tenants.cam.id, 401, function() {
                    // Verify that a tenant id is required when retrieving all apps for a tenant
                    TestsUtil.getGlobalAdminRestClient(function(globalAdminClient) {
                        AppsTestUtil.assertGetAppsFails(globalAdminClient, null, 400, function() {
                            // Verify that a valid tenant id is required when retrieving all apps for a tenant
                            AppsTestUtil.assertGetAppsFails(globalAdminClient, 'foo', 400, function() {
                                // Verify that an existing tenant id is required when retrieving all apps for a tenant
                                AppsTestUtil.assertGetAppsFails(globalAdminClient, 4242, 404, callback);
                            });
                        });
                    });
                });
            });
        });
    });

    describe('Get app', function() {

        /**
         * Test that verifies that an app can be retrieved
         *
        it('verify get app', function(callback) {
            TestsUtil.getGlobalAdminRestClient(function(globalAdminClient) {
                // Create a new app
                TenantsTestUtil.assertCreateApp(globalAdminClient, 'Marist College', function(createdMaristTenant) {
                    // Verify that the created tenant can be retrieved by a global administrator
                    // Verify that the created tenant can be retrieved by an anonymous global administrator
                    // Verify that the created tenant can be retrieved by an app administrator
                    // Verify that the created tenant can be retrieved by a regular user
                    // Verify that the created tenant can be retrieved by an anonymous user
                    TenantsTestUtil.assertGetTenant(globalAdminClient, createdMaristTenant.id, createdMaristTenant, function(tenant) {
                        return callback();
                    });
                });
            });
        });

        /**
         * Test that verifies validation for retrieving a tenant
         *
        it('verify get tenant validation', function(callback) {
            // Verify that an anonymous global administrator user is not able to get a tenant
            TestsUtil.getAnonymousGlobalAdminRestClient(function(anonymousGlobalAdminClient) {
                TenantsTestUtil.assertGetTenantFails(anonymousGlobalAdminClient, tests.tenants.cam.id, 401, function() {

                    // Verify that an id is required when getting a tenant
                    TestsUtil.getGlobalAdminRestClient(function(globalAdminClient) {
                        TenantsTestUtil.assertGetTenantFails(globalAdminClient, null, 400, function() {
                            // Verify that a valid tenant id is required when getting a tenant
                            TenantsTestUtil.assertGetTenantFails(globalAdminClient, 'foo', 400, function() {
                                // Verify that an existing tenant id is required when getting a tenant
                                TenantsTestUtil.assertGetTenantFails(globalAdminClient, 4242, 404, callback);
                            });
                        });
                    });
                });
            });
        }); */
    });

    describe('Create tenant', function() {

        /**
         * Test that verifies that a new tenant can be created
         *
        it('verify create tenant', function(callback) {
            TestsUtil.getGlobalAdminRestClient(function(globalAdminClient) {
                // Verify that a new tenant can be created
                TenantsTestUtil.assertCreateTenant(globalAdminClient, 'University of Amsterdam', function(createdAmsterdamTenant) {
                    // Verify that a tenant with the same name can be created
                    TenantsTestUtil.assertCreateTenant(globalAdminClient, 'University of Amsterdam', function(createdAmsterdamTenant2) {
                        assert.notEqual(createdAmsterdamTenant.id, createdAmsterdamTenant2.id);
                        return callback();
                    });
                });
            });
        });

        /**
         * Test that verifies validation for creating a new tenant
         *
        it('verify create tenant validation', function(callback) {
            // Verify that an anonymous global administrator user is not able to create a new tenant
            TestsUtil.getAnonymousGlobalAdminRestClient(function(anonymousGlobalAdminClient) {
                TenantsTestUtil.assertCreateTenantFails(anonymousGlobalAdminClient, 'Harvard University', 401, function() {

                    // Verify that a name is required when creating a new tenant
                    TestsUtil.getGlobalAdminRestClient(function(globalAdminClient) {
                        TenantsTestUtil.assertCreateTenantFails(globalAdminClient, null, 400, function() {
                            // Verify that a valid name is required when creating a new tenant
                            TenantsTestUtil.assertCreateTenantFails(globalAdminClient, '', 400, function() {
                                TenantsTestUtil.assertCreateTenantFails(globalAdminClient, TestsUtil.generateString(257), 400, callback);
                            });
                        });
                    });
                });
            });
        }); */
    });

    describe('Update tenant', function() {

        /**
         * Test that verifies that a tenant can be updated
         *
        it('verify update tenant', function(callback) {
            TestsUtil.getGlobalAdminRestClient(function(globalAdminClient) {
                // Verify that a tenant can be updated
                TenantsTestUtil.assertCreateTenant(globalAdminClient, 'UC Berkeley', function(createdUCBTenant) {
                    TenantsTestUtil.assertUpdateTenant(globalAdminClient, createdUCBTenant, 'University of California Berkeley', function(updatedUCBTenant) {
                        return callback();
                    });
                });
            });
        });

        /**
         * Test that verifies validation for updating a tenant
         *
        it('verify update tenant validation', function(callback) {
            // Verify that an anonymous global administrator user is not able to update a tenant
            TestsUtil.getGlobalAdminRestClient(function(globalAdminClient) {
                TenantsTestUtil.assertCreateTenant(globalAdminClient, 'Princeton University', function(createdPrincetonTenant) {
                    TestsUtil.getAnonymousGlobalAdminRestClient(function(anonymousGlobalAdminClient) {
                        TenantsTestUtil.assertUpdateTenantFails(anonymousGlobalAdminClient, createdPrincetonTenant.id, 'MIT', 401, function() {

                            // Verify that an updated name is required when updating a tenant
                            TenantsTestUtil.assertUpdateTenantFails(globalAdminClient, createdPrincetonTenant.id, null, 400, function() {
                                // Verify that a valid updated name is required when updating a tenant
                                TenantsTestUtil.assertUpdateTenantFails(globalAdminClient, createdPrincetonTenant.id, '', 400, function() {
                                    TenantsTestUtil.assertUpdateTenantFails(globalAdminClient, createdPrincetonTenant.id, TestsUtil.generateString(257), 400, function() {
                                        // Verify that an existing tenant id is required when updating a tenant
                                        TenantsTestUtil.assertUpdateTenantFails(globalAdminClient, 42, 'MIT', 404, callback);
                                    });
                                });
                            });
                        });
                    });
                });
            });
        }); */
    });
});
