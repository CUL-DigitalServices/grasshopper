/**
 * Copyright (c) 2014 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var _ = require('lodash');
var assert = require('assert');

var TenantsTestUtil = require('gh-tenants/tests/util');
var TestsUtil = require('gh-tests/lib/util');

var AppsTestUtil = require('./util');


describe('Apps', function() {

    describe('Get all apps', function() {

        /**
         * Test that verifies that all apps can be retrieved
         */
        it('verify get all apps', function(callback) {
            TestsUtil.getGlobalAdminRestClient(function(globalAdminClient) {
                // Retrieve all apps for the default Cambridge tenant
                AppsTestUtil.assertGetApps(globalAdminClient, global.tests.tenants.cam.id, null, function(apps) {
                    var cambridgeTotal = apps.length;

                    // Verify that the default cam2013 app is present
                    var cambridge2013App = _.where(apps, {'host': tests.apps.cam2013.host})[0];
                    AppsTestUtil.assertApp(cambridge2013App, tests.apps.cam2013);

                    // Verify that the default cam2014 app is present
                    var cambridge2014App = _.where(apps, {'host': tests.apps.cam2014.host})[0];
                    AppsTestUtil.assertApp(cambridge2014App, tests.apps.cam2014);

                    // Verify that the cam2015 app is not present
                    var cambridge2015App = _.where(apps, {'host': 'cam2015.timetable.cam.ac.uk'})[0];
                    assert.ok(!cambridge2015App);

                    // Retrieve all apps for the default Oxford tenant
                    AppsTestUtil.assertGetApps(globalAdminClient, global.tests.tenants.oxford.id, null, function(apps) {
                        var oxfordTotal = apps.length;

                        // Verify that the default oxford2013 app is present
                        var oxford2013App = _.where(apps, {'host': tests.apps.oxford2013.host})[0];
                        AppsTestUtil.assertApp(oxford2013App, tests.apps.oxford2013);

                        // Verify that the default oxford2014 app is present
                        var oxford2014App = _.where(apps, {'host': tests.apps.oxford2014.host})[0];
                        AppsTestUtil.assertApp(oxford2014App, tests.apps.oxford2014);

                        // Verify that the oxford2015 app is not present
                        var oxford2015App = _.where(apps, {'host': 'oxford2015.timetable.cam.ac.uk'})[0];
                        assert.ok(!oxford2015App);

                        // Create the cam2015 app
                        AppsTestUtil.assertCreateApp(globalAdminClient, global.tests.tenants.cam.id, 'Cambridge University', 'cam2015.timetable.cam.ac.uk', 'timetable', function(createdCam2015App) {

                            // Retrieve all apps for the default Cambridge tenant
                            AppsTestUtil.assertGetApps(globalAdminClient, global.tests.tenants.cam.id, cambridgeTotal + 1, function(apps) {

                                // Verify that the cam2015 app is present
                                var cambridge2015App = _.where(apps, {'host': 'cam2015.timetable.cam.ac.uk'})[0];
                                AppsTestUtil.assertApp(cambridge2015App, createdCam2015App);

                                // Verify that the default Oxford tenant still has the same number of apps
                                AppsTestUtil.assertGetApps(globalAdminClient, global.tests.tenants.oxford.id, oxfordTotal, function(apps) {
                                    return callback();
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies authorization for retrieving all apps for a tenant
         */
        it('verify get all apps authorization', function(callback) {
            // Verify that an anonymous global administrator user is not able to retrieve all apps for a tenant
            TestsUtil.getAnonymousGlobalAdminRestClient(function(anonymousGlobalAdminClient) {
                AppsTestUtil.assertGetAppsFails(anonymousGlobalAdminClient, global.tests.tenants.cam.id, 401, callback);
            });
        });

        /**
         * Test that verifies validation for retrieving all apps for a tenant
         */
        it('verify get all apps validation', function(callback) {
            // Verify that a tenant id is required when retrieving all apps for a tenant
            TestsUtil.getGlobalAdminRestClient(function(globalAdminClient) {
                AppsTestUtil.assertGetAppsFails(globalAdminClient, null, 400, function() {
                    // Verify that a valid tenant id is required when retrieving all apps for a tenant
                    AppsTestUtil.assertGetAppsFails(globalAdminClient, 'foo', 400, function() {
                        // Verify that an existing tenant id is required when retrieving all apps for a tenant
                        AppsTestUtil.assertGetAppsFails(globalAdminClient, 4242, 404, callback);
                    });
                });
            });
        });
    });

    describe('Get app', function() {

        /**
         * Test that verifies that an app can be retrieved
         */
        it('verify get app', function(callback) {
            TestsUtil.getGlobalAdminRestClient(function(globalAdminClient) {
                // Create a new app
                TestsUtil.generateTestApp(global.tests.tenants.cam.id, function(createdApp) {
                    // Verify that the created app can be retrieved by a global administrator
                    AppsTestUtil.assertGetApp(globalAdminClient, createdApp.id, createdApp, function() {
                        // Verify that the created app can be retrieved by an anonymous global administrator
                        TestsUtil.getAnonymousGlobalAdminRestClient(function(anonymousGlobalAdminClient) {
                            AppsTestUtil.assertGetApp(anonymousGlobalAdminClient, createdApp.id, createdApp, function() {
                                return callback();
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies validation for retrieving an app
         */
        it('verify get app validation', function(callback) {
            // Verify that an id is required when getting an app
            TestsUtil.getGlobalAdminRestClient(function(globalAdminClient) {
                AppsTestUtil.assertGetAppFails(globalAdminClient, null, 400, function() {
                    // Verify that a valid app id is required when getting an app
                    AppsTestUtil.assertGetAppFails(globalAdminClient, 'foo', 400, function() {
                        // Verify that an existing app id is required when getting an app
                        AppsTestUtil.assertGetAppFails(globalAdminClient, 4242, 404, callback);
                    });
                });
            });
        });
    });

    // TODO: Get app admins
    // TODO: Get app admins paging
    // TODO: Get app admins validation

    describe('Create app', function() {

        /**
         * Test that verifies that a new app can be created
         */
        it('verify create app', function(callback) {
            TestsUtil.getGlobalAdminRestClient(function(globalAdminClient) {
                // Verify that a new app can be created
                AppsTestUtil.assertCreateApp(globalAdminClient, global.tests.tenants.oxford.id, 'Timetable 2016', '2016.timetable.ox.ac.uk', 'timetable', function(createdOxfordApp) {
                    // Verify that a tenant with the same name but a different host can be created
                    AppsTestUtil.assertCreateApp(globalAdminClient, global.tests.tenants.oxford.id, 'Timetable 2016', '2016-17.timetable.ox.ac.uk', 'timetable', function(createdOxfordApp2) {
                        assert.notEqual(createdOxfordApp.id, createdOxfordApp2.id);
                        return callback();
                    });
                });
            });
        });

        /**
         * Test that verifies authorization for creating a new app
         */
        it('verify create app authorization', function(callback) {
            // Verify that an anonymous global administrator user is not able to create a new app
            TestsUtil.getAnonymousGlobalAdminRestClient(function(anonymousGlobalAdminClient) {
                AppsTestUtil.assertCreateAppFails(anonymousGlobalAdminClient, global.tests.tenants.oxford.id, 'Timetable 2017', '2017.timetable.ox.ac.uk', 'timetable', 401, callback);
            });
        });

        /**
         * Test that verifies validation for creating a new app
         */
        it('verify create app validation', function(callback) {
            // Verify that a tenant id is required when creating a new app
            TestsUtil.getGlobalAdminRestClient(function(globalAdminClient) {
                AppsTestUtil.assertCreateAppFails(globalAdminClient, null, 'Timetable 2017', '2017.timetable.ox.ac.uk', 'timetable', 400, function() {
                    // Verify that a valid tenant id is required when creating a new app
                    AppsTestUtil.assertCreateAppFails(globalAdminClient, 'foo', 'Timetable 2017', '2017.timetable.ox.ac.uk', 'timetable', 400, function() {
                        // Verify that an existing tenant id is required when creating a new app
                        AppsTestUtil.assertCreateAppFails(globalAdminClient, 4242, 'Timetable 2017', '2017.timetable.ox.ac.uk', 'timetable', 404, function() {

                            // Verify that a name is required when creating a new app
                            TestsUtil.getGlobalAdminRestClient(function(globalAdminClient) {
                                AppsTestUtil.assertCreateAppFails(globalAdminClient, global.tests.tenants.oxford.id, null, '2017.timetable.ox.ac.uk', 'timetable', 400, function() {
                                    // Verify that a valid name is required when creating a new app
                                    AppsTestUtil.assertCreateAppFails(globalAdminClient, global.tests.tenants.oxford.id, '', '2017.timetable.ox.ac.uk', 'timetable', 400, function() {
                                        AppsTestUtil.assertCreateAppFails(globalAdminClient, global.tests.tenants.oxford.id, TestsUtil.generateString(257), '2017.timetable.ox.ac.uk', 'timetable', 400, function() {

                                            // Verify that a host name is required when creating a new app
                                            TestsUtil.getGlobalAdminRestClient(function(globalAdminClient) {
                                                AppsTestUtil.assertCreateAppFails(globalAdminClient, global.tests.tenants.oxford.id, 'Timetable 2017', null, 'timetable', 400, function() {
                                                    // Verify that a valid host name id is required when creating a new app
                                                    AppsTestUtil.assertCreateAppFails(globalAdminClient, global.tests.tenants.oxford.id, 'Timetable 2017', '', 'timetable', 400, function() {
                                                        // Verify that an existing host name can not be used to create a new app
                                                        AppsTestUtil.assertCreateAppFails(globalAdminClient, global.tests.tenants.oxford.id, 'Timetable 2017', global.tests.apps.oxford2014.host, 'timetable', 400, function() {

                                                            // Verify that a type is required when creating a new app
                                                            TestsUtil.getGlobalAdminRestClient(function(globalAdminClient) {
                                                                AppsTestUtil.assertCreateAppFails(globalAdminClient, global.tests.tenants.oxford.id, 'Timetable 2017', '2017.timetable.ox.ac.uk', null, 400, function() {
                                                                    // Verify that a valid type is required when creating a new app
                                                                    AppsTestUtil.assertCreateAppFails(globalAdminClient, global.tests.tenants.oxford.id, 'Timetable 2017', '2017.timetable.ox.ac.uk', '', 400, function() {
                                                                        AppsTestUtil.assertCreateAppFails(globalAdminClient, global.tests.tenants.oxford.id, 'Timetable 2017', '2017.timetable.ox.ac.uk', 'talks', 400, callback);
                                                                    });
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    describe('Update app', function() {

        /**
         * Test that verifies that an app can be updated
         */
        it('verify update app', function(callback) {
            TestsUtil.getGlobalAdminRestClient(function(globalAdminClient) {
                // Create a new app
                TestsUtil.generateTestApp(global.tests.tenants.cam.id, function(createdApp) {

                    // Verify that the name of an app can be updated
                    AppsTestUtil.assertUpdateApp(globalAdminClient, createdApp, {'displayName': 'Ghent University'}, function(updatedApp) {
                        // Verify that the enabled status of an app can be updated
                        AppsTestUtil.assertUpdateApp(globalAdminClient, updatedApp, {'enabled': false}, function(updatedApp) {
                            // Verify that the host name of an app can be updated
                            AppsTestUtil.assertUpdateApp(globalAdminClient, updatedApp, {'host': 'timetable.ugent.be'}, function(updatedApp) {

                                // Verify that multiple values can be updated at once
                                AppsTestUtil.assertUpdateApp(globalAdminClient, updatedApp, {
                                    'displayName': 'HoWest',
                                    'enabled': true,
                                    'host': 'timetable.howest.be'
                                }, function(updatedApp) {

                                    // Verify that an app administrator can update an app
                                    TestsUtil.generateTestUsers(updatedApp, 1, true, function(appAdmin) {
                                        AppsTestUtil.assertUpdateApp(appAdmin.client, updatedApp, {
                                            'displayName': 'HoGent',
                                            'host': 'timetable.hogent.be'
                                        }, function(updatedApp) {

                                            return callback();
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies authorization for updating an app
         */
        it('verify update app authorization', function(callback) {
            TestsUtil.getGlobalAdminRestClient(function(globalAdminClient) {
                // Create a new app
                TestsUtil.generateTestApp(global.tests.tenants.cam.id, function(createdApp) {

                    // Verify that an anonymous global administrator user is not able to update an app
                    TestsUtil.getAnonymousGlobalAdminRestClient(function(anonymousGlobalAdminClient) {
                        AppsTestUtil.assertUpdateAppFails(anonymousGlobalAdminClient, createdApp.id, {'displayName': 'University of Manchester'}, 401, function() {

                            // Verify that an anonymous app user is not able to update an app
                            TestsUtil.getAnonymousAppUserClient(createdApp, function(anonymousUserClient) {
                                AppsTestUtil.assertUpdateAppFails(anonymousUserClient, createdApp.id, {'displayName': 'University of Manchester'}, 401, function() {

                                    // Verify that a regular app user is not able to update an app
                                    TestsUtil.generateTestUsers(createdApp, 1, false, function(appUser) {
                                        AppsTestUtil.assertUpdateAppFails(appUser.client, createdApp.id, {'displayName': 'University of Manchester'}, 401, function() {

                                            // Verify that a user from a different app is not able to update an app
                                            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, true, function(differentAppAdmin) {
                                                AppsTestUtil.assertUpdateAppFails(differentAppAdmin.client, createdApp.id, {'displayName': 'University of Manchester'}, 401, callback);
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        it('verify update app validation', function(callback) {
           // Create a new app
           TestsUtil.getGlobalAdminRestClient(function(globalAdminClient) {
                TestsUtil.generateTestApp(global.tests.tenants.cam.id, function(createdApp) {

                    // Verify that at least one update value is required when updating an app
                    AppsTestUtil.assertUpdateAppFails(globalAdminClient, createdApp.id, {}, 400, function() {

                        // Verify that all update fields need to be recognized when updating an app
                        AppsTestUtil.assertUpdateAppFails(globalAdminClient, createdApp.id, {'displayName': 'UPMC', 'foo': 'bar'}, 400, function() {

                            // Verify that a valid name is required when updating the name of an app
                            AppsTestUtil.assertUpdateAppFails(globalAdminClient, createdApp.id, {'displayName': ''}, 400, function() {
                                AppsTestUtil.assertUpdateAppFails(globalAdminClient, createdApp.id, {'displayName': TestsUtil.generateString(257)}, 400, function() {

                                    // Verify that a valid enabled status is required when updating the enabled status of an app
                                    AppsTestUtil.assertUpdateAppFails(globalAdminClient, createdApp.id, {'enabled': ''}, 400, function() {
                                        AppsTestUtil.assertUpdateAppFails(globalAdminClient, createdApp.id, {'enabled': 'foo'}, 400, function() {

                                            // Verify that a valid host name is required when updating the host of an app
                                            AppsTestUtil.assertUpdateAppFails(globalAdminClient, createdApp.id, {'host': ''}, 400, function() {
                                                // Verify that the host name of an app can not be updated to a host name that already exists
                                                AppsTestUtil.assertUpdateAppFails(globalAdminClient, createdApp.id, {'host': global.tests.apps.oxford2014.host}, 500, callback);
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });
});
