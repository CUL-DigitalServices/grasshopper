/**
 * Copyright (c) 2014 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var _ = require('lodash');
var assert = require('assert');

/**
 * Assert that an app has all expected properties
 *
 * @param  {App}                app                 The app to assert the properties for
 * @param  {App}                expectedApp         The app to which the provided app should be compared
 * @throws {AssertionError}                         Error thrown when an assertion failed
 */
var assertApp = module.exports.assertApp = function(app, expectedApp) {
    assert.ok(app);
    assert.ok(app.id);
    assert.ok(app.displayName);
    assert.ok(app.type);
    assert.ok(app.enabled !== undefined);
    assert.ok(app.createdAt);
    assert.ok(app.updatedAt);

    assert.equal(app.id, expectedApp.id);
    assert.equal(app.displayName, expectedApp.displayName);
    assert.equal(app.type, expectedApp.type);
    assert.equal(app.enabled, expectedApp.enabled);
    assert.equal(app.createdAt, expectedApp.createdAt);
    assert.equal(app.updatedAt, expectedApp.updatedAt);
};

/**
 * Assert that all apps for a tenant can be retrieved
 *
 * @param  {RestClient}         client              The REST client to make the request with
 * @param  {Number}             tenantId            The id of the tenant to retrieve the apps for
 * @param  {Number}             [expectedTotal]     The expected total number of apps
 * @param  {Function}           callback            Standard callback function
 * @param  {Tenants[]}          callback.apps       All available apps in the tenant
 * @throws {AssertionError}                         Error thrown when an assertion failed
 */
var assertGetApps = module.exports.assertGetApps = function(client, tenantId, expectedTotal, callback) {
    client.app.getApps(tenantId, function(err, apps) {
        assert.ok(!err);
        assert.ok(apps);

        if (expectedTotal) {
            assert.equal(apps.length, expectedTotal);
        } else {
            assert.ok(apps.length >= 1);
        }

        _.each(apps, function(app) {
            assert.equal(app.TenantId, tenantId);
        });

        return callback(apps);
    });
};

/**
 * Assert that all app for a tenant can not be retrieved
 *
 * @param  {RestClient}         client              The REST client to make the request with
 * @param  {Number}             tenantId            The id of the tenant to retrieve the apps for
 * @param  {Number}             code                The expected HTTP error code
 * @param  {Function}           callback            Standard callback function
 * @throws {AssertionError}                         Error thrown when an assertion failed
 */
var assertGetAppsFails = module.exports.assertGetAppsFails = function(client, tenantId, code, callback) {
    client.app.getApps(tenantId, function(err, apps) {
        assert.ok(err);
        assert.equal(err.code, code);
        assert.ok(!apps);

        return callback();
    });
};

/**
 * Assert that an app can be retrieved
 *
 * @param  {RestClient}         client              The REST client to make the request with
 * @param  {Number}             id                  The id of the app to retrieve
 * @param  {App}                [expectedApp]       The expected app to be retrieved
 * @param  {Function}           callback            Standard callback function
 * @param  {App}                callback.app        The requested app
 * @throws {AssertionError}                         Error thrown when an assertion failed
 */
var assertGetApp = module.exports.assertGetApp = function(client, id, expectedApp, callback) {
    client.app.getApp(id, function(err, app) {
        assert.ok(!err);
        assert.ok(app);
        assert.ok(app.id);
        assert.ok(app.TenantId);
        assert.ok(app.displayName);
        assert.ok(app.host);
        assert.ok(app.enabled !== undefined);
        assert.ok(app.type);
        assert.ok(app.createdAt);
        assert.ok(app.updatedAt);

        if (expectedApp) {
            assert.equal(app.id, expectedApp.id);
            assert.equal(app.TenantId, expectedApp.TenantId);
            assert.equal(app.displayName, expectedApp.displayName);
            assert.equal(app.host, expectedApp.host);
            assert.equal(app.enabled, expectedApp.enabled);
            assert.equal(app.type, expectedApp.type);
            assert.equal(app.createdAt, expectedApp.createdAt);
            assert.equal(app.updatedAt, expectedApp.updatedAt);
        }

        return callback(app);
    });
};

/**
 * Assert that an app can not be retrieved
 *
 * @param  {RestClient}         client              The REST client to make the request with
 * @param  {Number}             id                  The id of the app to retrieve
 * @param  {Number}             code                The expected HTTP error code
 * @param  {Function}           callback            Standard callback function
 * @throws {AssertionError}                         Error thrown when an assertion failed
 */
var assertGetAppFails = module.exports.assertGetAppFails = function(client, id, code, callback) {
    client.app.getApp(id, function(err, app) {
        assert.ok(err);
        assert.equal(err.code, code);
        assert.ok(!app);

        return callback();
    });
};

/**
 * Assert that a new app can be created
 *
 * @param  {RestClient}         client              The REST client to make the request with
 * @param  {Number}             tenantId            The id of the tenant on which to create the app
 * @param  {String}             displayName         The name of the app (e.g. `Timetable 2013-14`)
 * @param  {String}             host                The host on which the app can be found
 * @param  {String}             type                The type of the app
 * @param  {Function}           callback            Standard callback function
 * @param  {App}                callback.app        The created app
 * @throws {AssertionError}                         Error thrown when an assertion failed
 */
var assertCreateApp = module.exports.assertCreateApp = function(client, tenantId, displayName, host, type, callback) {
    client.app.createApp(tenantId, displayName, host, type, function(err, createdApp) {
        assert.ok(!err);
        assert.ok(createdApp);
        assert.ok(createdApp.id);
        assert.ok(createdApp.createdAt);
        assert.ok(createdApp.updatedAt);
        assert.equal(createdApp.TenantId, tenantId);
        assert.equal(createdApp.displayName, displayName);
        assert.equal(createdApp.host, host);
        assert.equal(createdApp.type, type);

        return callback(createdApp);
    });
};

/**
 * Assert that a new app can not be created
 *
 * @param  {RestClient}         client              The REST client to make the request with
 * @param  {Number}             tenantId            The id of the tenant on which to create the app
 * @param  {String}             displayName         The name of the app (e.g. `Timetable 2013-14`)
 * @param  {String}             host                The host on which the app can be found
 * @param  {String}             type                The type of the app
 * @param  {Number}             code                The expected HTTP error code
 * @param  {Function}           callback            Standard callback function
 * @throws {AssertionError}                         Error thrown when an assertion failed
 */
var assertCreateAppFails = module.exports.assertCreateAppFails = function(client, tenantId, displayName, host, type, code, callback) {
    client.app.createApp(displayName, function(err, createdApp) {
        assert.ok(err);
        assert.equal(err.code, code);
        assert.ok(!createdApp);

        return callback();
    });
};

/**
 * Assert that a tenant can be updated
 *
 * @param  {RestClient}         client              The REST client to make the request with
 * @param  {Tenant}             tenant              The tenant to update
 * @param  {String}             displayName         Updated tenant name
 * @param  {Function}           callback            Standard callback function
 * @param  {Tenant}             callback.tenant     The updated tenant
 * @throws {AssertionError}                         Error thrown when an assertion failed
 *
var assertUpdateTenant = module.exports.assertUpdateTenant = function(client, tenant, displayName, callback) {
    client.tenant.updateTenant(tenant.id, displayName, function(err, updatedTenant) {
        assert.ok(!err);
        assert.ok(updatedTenant);
        assert.equal(updatedTenant.id, tenant.id);
        assert.equal(updatedTenant.displayName, displayName);
        assert.equal(updatedTenant.createdAt, tenant.createdAt);
        assert.notEqual(updatedTenant.updatedAt, tenant.updatedAt);

        return callback(updatedTenant);
    });
};

/**
 * Assert that a tenant can not be updated
 *
 * @param  {RestClient}         client              The REST client to make the request with
 * @param  {Number}             id                  The id of the tenant to update
 * @param  {String}             displayName         Updated tenant name
 * @param  {Number}             code                The expected HTTP error code
 * @param  {Function}           callback            Standard callback function
 * @throws {AssertionError}                         Error thrown when an assertion failed
 *
var assertUpdateTenantFails = module.exports.assertUpdateTenantFails = function(client, id, displayName, code, callback) {
    client.tenant.updateTenant(id, displayName, function(err, updatedTenant) {
        assert.ok(err);
        assert.equal(err.code, code);
        assert.ok(!updatedTenant);

        return callback();
    });
};
*/
