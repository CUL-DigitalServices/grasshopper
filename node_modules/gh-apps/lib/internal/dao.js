/**
 * Copyright (c) 2015 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var _ = require('lodash');

var DB = require('gh-core/lib/db');
var log = require('gh-core/lib/logger').logger('gh-apps');

/**
 * Get all apps in a tenant
 *
 * @param  {Number}         tenantId            The id of the tenant to retrieve the apps for
 * @param  {Function}       callback            Standard callback function
 * @param  {Object}         callback.err        An error object, if any
 * @param  {App[]}          callback.tenants    All available apps in the tenant
 */
var getApps = module.exports.getApps = function(tenantId, callback) {
    DB.App.findAll({'where': {'TenantId': tenantId}}).complete(function(err, apps) {
        if (err) {
            log().error({'err': err, 'tenantId': tenantId}, 'Failed to get all apps for a tenant');
            return callback({'code': 500, 'msg': err.message});
        }

        return callback(null, apps);
    });
};

/**
 * Get an app
 *
 * @param  {Number}         id                  The id of the app to retrieve
 * @param  {Function}       callback            Standard callback function
 * @param  {Object}         callback.err        An error object, if any
 * @param  {App}            callback.app        The requested app
 */
var getApp = module.exports.getApp = function(id, callback) {
    DB.App.find({'where': {'id': id}, 'include': [DB.Tenant]}).complete(function(err, app) {
        if (err) {
            log().error({'err': err, 'id': id}, 'Failed to get an app');
            return callback({'code': 500, 'msg': err.message});
        } else if (!app) {
            log().debug({'err': err, 'id': id}, 'An app with the specified id could not be found');
            return callback({'code': 404, 'msg': 'An app with the specified id could not be found'});
        }

        return callback(null, app);
    });
};

/**
 * Get an app by host name
 *
 * @param  {String}         host                The host name of the app to retrieve
 * @param  {Function}       callback            Standard callback function
 * @param  {Object}         callback.err        An error object, if any
 * @param  {App}            callback.app        The requested app
 */
var getAppByHost = module.exports.getAppByHost = function(host, callback) {
    DB.App.find({'where': {'host': host}, 'include': [DB.Tenant]}).complete(function(err, app) {
        if (err) {
            log().error({'err': err, 'host': host}, 'Failed to get an app by host name');
            return callback({'code': 500, 'msg': err.message});
        } else if (!app) {
            log().debug({'err': err, 'host': host}, 'An app with the specified host could not be found');
            return callback({'code': 404, 'msg': 'An app with the specified host could not be found'});
        }

        return callback(null, app);
    });
};

/**
 * Get the administrators for an app
 *
 * @param  {Number}         id                  The id of the app to retrieve the administrators for
 * @param  {Number}         limit               The maximum number of results to retrieve
 * @param  {Number}         offset              The paging number of the results to retrieve
 * @param  {Function}       callback            Standard callback function
 * @param  {Object}         callback.err        An error object, if any
 * @param  {UserList}       callback.appAdmins  The administrators for the app
 */
var getAppAdmins = module.exports.getAppAdmins = function(id, limit, offset, callback) {
    DB.User.findAndCountAll({'where': {'isAdmin': true, 'AppId': id}, 'limit': limit, 'offset': offset}).complete(function(err, appAdmins) {
        if (err) {
            log().error({'err': err}, 'Failed to get the administrators for an app');
            return callback({'code': 500, 'msg': err.message});
        }

        return callback(null, appAdmins);
    });
};

/**
 * Create a new app
 *
 * @param  {Number}         tenantId            The id of the tenant on which to create the app
 * @param  {String}         displayName         The name of the app (e.g. `Timetable 2013-14`)
 * @param  {String}         host                The host on which the app can be found
 * @param  {String}         type                The type of the app. One of `timetable`
 * @param  {Function}       callback            Standard callback function
 * @param  {Object}         callback.err        An error object, if any
 * @param  {App}            callback.app        The created app
 */
var createApp = module.exports.createApp = function(tenantId, displayName, host, type, callback) {
    var app = {
        'TenantId': tenantId,
        'displayName': displayName,
        'host': host,
        'type': type
    };

    DB.App.create(app).complete(function(err, app) {
        if (err && err.name === 'SequelizeUniqueConstraintError' && err.errors && err.errors[0] && err.errors[0].message === 'host must be unique') {
            log().error({'err': err}, 'Failed to create an app');
            return callback({'code': 400, 'msg': 'A unique hostname must be provided'});
        } else if (err) {
            log().error({'err': err}, 'Failed to create a new app');
            return callback({'code': 500, 'msg': err.message});
        }

        log().debug({'app': app}, 'Created a new app');
        return callback(null, app);
    });
};

/**
 * Update an app
 *
 * @param  {App}            app                 The app to update
 * @param  {Object}         opts                The values to update
 * @param  {String}         [opts.displayName]  Updated app name
 * @param  {Boolean}        [opts.enabled]      Whether the app should be enabled
 * @param  {String}         [opts.host]         Updated app host
 * @param  {Function}       callback            Standard callback function
 * @param  {Object}         callback.err        An error object, if any
 * @param  {App}            callback.app        The updated app
 */
var updateApp = module.exports.updateApp = function(app, opts, callback) {
    app.updateAttributes(opts).complete(function(err, app) {
        if (err && err.name === 'SequelizeUniqueConstraintError' && err.errors && err.errors[0] && err.errors[0].message === 'host must be unique') {
            log().error({'err': err}, 'Failed to update an app');
            return callback({'code': 400, 'msg': 'A unique hostname must be provided'});
        } else if (err) {
            log().error({'err': err}, 'Failed to update an app');
            return callback({'code': 500, 'msg': err.message});
        }

        log().debug({'app': app, 'update': opts}, 'Updated an app');
        return callback(null, app);
    });
};

/**
 * Update the administrators of an app
 *
 * @param  {Object}         adminUpdates        The keys are the ids of the users for which the app administrator status should be updated. The values are `true` when the user needs to become an app administrator and `false` when the user should not be an app administratoe
 * @param  {Function}       callback            Standard callback function
 * @param  {Object}         callback.err        An error object, if any
 */
var updateAppAdmins = module.exports.updateAppAdmins = function(adminUpdates, callback) {
    var errors = [];

    var adminsUpdated = _.after(_.keys(adminUpdates).length, function() {
        if (errors.length > 0) {
            return callback({'code': 500, 'msg': errors[0].message, 'errors': errors});
        }

        return callback();
    });

    _.each(adminUpdates, function(adminStatus, userId) {
        // TODO: Wrap this in a transaction
        DB.User.update({'isAdmin': adminStatus}, {'where': {'id': userId}}).complete(function(err) {
            if (err) {
                log().error({'err': err}, 'Failed to update an administrator of an app');
                errors.push(err);
            }

            return adminsUpdated();
        });
    });
};
