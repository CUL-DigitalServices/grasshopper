/**
 * Copyright (c) 2014 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var GrassHopper = require('gh-core');

var AppsAPI = require('gh-apps');

/**
 * @REST getApps
 *
 * Get all apps in a tenant
 *
 * @Server      admin
 * @Method      GET
 * @Path        /apps
 * @QueryParam  {number}            tenantId        The id of the tenant to retrieve the apps for
 * @Return      {App[]}                             All available apps in the tenant
 */
GrassHopper.globalAdminServer.on('get', '/api/apps', function(req, res) {
    AppsAPI.getApps(req.query.tenantId, function(err, apps) {
        if (err) {
            return res.status(err.code).send(err.msg);
        }

        res.status(200).send(apps);
    });
});

/**
 * @REST getApp
 *
 * Get an app
 *
 * @Server      admin
 * @Method      GET
 * @Path        /apps/{id}
 * @PathParam   {number}            id              The id of the app to retrieve
 * @Return      {App}                               The requested app
 */
GrassHopper.globalAdminServer.on('get', '/api/apps/:id', function(req, res) {
    AppsAPI.getApp(req.params.id, function(err, app) {
        if (err) {
            return res.status(err.code).send(err.msg);
        }

        res.status(200).send(app);
    });
});

/**
 * @REST getAppAdmins
 *
 * Get the administrators for an app
 *
 * @Server      admin,app
 * @Method      GET
 * @Path        /apps/{id}/admins
 * @PathParam   {number}            id              The id of the app to retrieve the administrators for
 * @QueryParam  {number}            [items]         The maximum number of results to retrieve. Default: 10
 * @QueryParam  {number}            [page]          The paging number of the results to retrieve
 * @Return      {UserList}                          The administrators for the app
 */
var getAppAdmins = function(req, res) {
    res.send(501);
};

GrassHopper.globalAdminServer.on('get', '/api/apps/:id/admins', getAppAdmins);
GrassHopper.appServer.on('get', '/api/apps/:id/admins', getAppAdmins);

/**
 * @REST createApp
 *
 * Create a new app
 *
 * @Server      admin
 * @Method      POST
 * @Path        /apps
 * @FormParam   {string}            displayName     The name of the app (e.g. `Timetable 2013-14`)
 * @FormParam   {string}            host            The host on which the app can be found
 * @FormParam   {number}            tenantId        The id of the tenant on which to create the app
 * @FormParam   {string}            type            The type of the app     [timetable]
 * @Return      {App}                               The created app
 */
GrassHopper.globalAdminServer.on('post', '/api/apps', function(req, res) {
    AppsAPI.createApp(req.body.tenantId, req.body.displayName, req.body.host, req.body.type, function(err, app) {
        if (err) {
            return res.status(err.code).send(err.msg);
        }

        res.status(201).send(app);
    });
});

/**
 * @REST updateApp
 *
 * Update an app
 *
 * @Server      admin,app
 * @Method      POST
 * @Path        /apps/{id}
 * @PathParam   {number}            id              The id of the app to update
 * @FormParam   {string}            [displayName]   Updated app name
 * @FormParam   {boolean}           [enabled]       Whether the app should be enabled
 * @FormParam   {string}            [host]          Updated app host
 * @Return      {App}                               The updated app
 */
var updateApp = function(req, res) {
    AppsAPI.updateApp(req.params.id, req.body, function(err, app) {
        if (err) {
            return res.status(err.code).send(err.msg);
        }

        res.status(200).send(app);
    });
};

GrassHopper.globalAdminServer.on('post', '/api/apps/:id', updateApp);
GrassHopper.appServer.on('post', '/api/apps/:id', updateApp);

/**
 * @REST updateAppAdmins
 *
 * Update the administrators of an app
 *
 * @Server      admin,app
 * @Method      POST
 * @Path        /apps/{id}/admins
 * @PathParam   {number}            id              The id of the app for which to update the administrators
 * @BodyParam   {AppAdminsUpdate}   body            Object that describes the app administrator changes to apply
 * @Return      {void}
 */
var updateAppAdministrators = function(req, res) {
    res.send(501);
};

GrassHopper.globalAdminServer.on('post', '/api/apps/:id/admins', updateAppAdministrators);
GrassHopper.appServer.on('post', '/api/apps/:id/admins', updateAppAdministrators);
