/**
 * Copyright (c) 2014 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/**
 * @REST getApps
 *
 * Get all apps
 *
 * @Server      admin
 * @Method      GET
 * @Path        /tenants/apps
 * @Return      {App[]}                             All available apps
 */
GrassHopper.globalAdminRouter.on('get', '/api/tenants/apps', function(req, res) {
    res.send(501);
});

/**
 * @REST getAppsByTenant
 *
 * Get all apps for a tenant
 *
 * @Server      admin
 * @Method      GET
 * @Path        /tenants/{tenantId}/apps
 * @Return      {App[]}                             All available apps on the specified tenant
 */
GrassHopper.globalAdminRouter.on('get', '/api/tenants/:tenantId/apps', function(req, res) {
    res.send(501);
});

/**
 * @REST getApp
 *
 * Get an app
 *
 * @Server      admin
 * @Method      GET
 * @Path        /tenants/{tenantId}/apps/{id}
 * @PathParam   {number}            tenantId        The id of the tenant to which the app belongs
 * @PathParam   {number}            id              The id of the app to retrieve
 * @Return      {App}                               The requested app
 */
GrassHopper.globalAdminRouter.on('get', '/api/tenants/:tenantId/apps/:id', function(req, res) {
    res.send(501);
});

/**
 * @REST getAppAdmins
 *
 * Get the administators for an app
 *
 * @Server      admin,tenant
 * @Method      GET
 * @Path        /tenants/{tenantId}/apps/{id}/admins
 * @PathParam   {number}            tenantId        The id of the tenant to which the app belongs
 * @PathParam   {number}            id              The id of the app to retrieve the administrators for
 * @QueryParam  {number}            [items]         The maximum number of results to retreive. Default: 10
 * @QueryParam  {number}            [page]          The paging number of the results to retrieve
 * @Return      {AppAdmins}                         The administrators for the app
 */
var getAppAdmins = function(req, res) {
    res.send(501);
};

GrassHopper.globalAdminRouter.on('get', '/api/tenants/:tenantId/apps/:id/admins', getAppAdmins);
GrassHopper.tenantRouter.on('get', '/api/tenants/:tenantId/apps/:id/admins', getAppAdmins);

/**
 * @REST createApp
 *
 * Create a new app
 *
 * @Server      admin
 * @Method      POST
 * @Path        /api/tenants/{tenantId}/apps
 * @PathParam   {number}            tenantId        The id of the tenant on which the app should be created
 * @FormParam   {string}            displayName     The name of the app
 * @FormParam   {string}            host            The host on which the app can be found
 * @FormParam   {string}            type            The type of the app (e.g. `timetable`)
 * @Return      {App}                               The created app
 */
GrassHopper.globalAdminRouter.on('post', '/api/tenants/:tenantId/apps', function(req, res) {
    res.send(501);
});

/**
 * @REST updateApp
 *
 * Update an app
 *
 * @Server      admin,tenant
 * @Method      POST
 * @Path        /tenants/{tenantId}/apps/{id}
 * @PathParam   {number}            tenantId        The id of the tenant to which the app belongs
 * @PathParam   {number}            id              The id of the tenant to update
 * @FormParam   {string}            [displayName]   Updated app name
 * @FormParam   {boolean}           [enabled]       Whether the app should be enabled
 * @FormParam   {string}            [host]          Updated app host
 * @Return      {App}                               The updated app
 */
var updateApp = function(req, res) {
    res.send(501);
};

GrassHopper.globalAdminRouter.on('post', '/api/tenants/:tenantId/apps/:id', getAppAdmins);
GrassHopper.tenantRouter.on('post', '/api/tenants/:tenantId/apps/:id', getAppAdmins);

/**
 * @REST updateAppAdmins
 *
 * Update the administrators of an app
 *
 * @Server      admin
 * @Method      POST
 * @Path        /tenants/{tenantId}/apps/{id}/admins
 * @PathParam   {number}            tenantId        The id of the tenant to which the app belongs
 * @PathParam   {number}            id              The id of the tenant for which to update the administrators
 * @BodyParam   {AppAdminsUpdate}   body            Object that describes the app administrator changes to apply
 * @Return      {void}
 */
var updateAppAdministrators = function(req, res) {
    res.send(501);
};

GrassHopper.globalAdminRouter.on('post', '/api/tenants/:tenantId/apps/:id/admins', updateAppAdministrators);
GrassHopper.tenantRouter.on('post', '/api/tenants/:tenantId/apps/:id/admins', updateAppAdministrators);
