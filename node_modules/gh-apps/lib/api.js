/**
 * Copyright (c) 2014 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var log = require('gh-core/lib/logger').logger('gh-apps');
var TenantsAPI = require('gh-tenants');

var AppsDAO = require('./internal/dao');

/**
 * Get all apps in a tenant
 *
 * @param  {Number}         tenantId            The id of the tenant to retrieve the apps for
 * @param  {Function}       callback            Standard callback function
 * @param  {Object}         callback.err        An error object, if any
 * @param  {App[]}          callback.app        All available apps in the tenant
 */
var getApps = module.exports.getApps = function(tenantId, callback) {
    // TODO: Check that user is a global administrator
    // TODO: tenant id validation

    // Verify that the provided tenant exists
    TenantsAPI.getTenant(tenantId, function(err, tenant) {
        if (err) {
            return callback(err);
        }

        AppsDAO.getApps(tenant.id, callback);
    });
};

/**
 * Get an app
 *
 * @param  {Number}         id                  The id of the app to retrieve
 * @param  {Function}       callback            Standard callback function
 * @param  {Object}         callback.err        An error object, if any
 * @param  {App}            callback.app        The requested app
 */
var getApp = module.exports.getApp = function(id, callback) {
    // TODO: id validation

    AppsDAO.getApp(id, callback);
};

/**
 * Get an app by host name
 *
 * @param  {String}         host                The host name of the app to retrieve
 * @param  {Function}       callback            Standard callback function
 * @param  {Object}         callback.err        An error object, if any
 * @param  {App}            callback.app        The requested app
 */
var getAppByHost = module.exports.getAppByHost = function(host, callback) {
    // TODO: Check that user is a global administrator
    // TODO: host validation

    AppsDAO.getAppByHost(host, callback);
};

/**
 * Create a new app
 *
 * @param  {Number}         tenantId            The id of the tenant on which to create the app
 * @param  {String}         displayName         The name of the app (e.g. `Timetable 2013-14`)
 * @param  {String}         host                The host on which the app can be found
 * @param  {String}         type                The type of the app. One of `timetable`
 * @param  {Function}       callback            Standard callback function
 * @param  {Object}         callback.err        An error object, if any
 * @param  {App}            callback.app        The created app
 */
var createApp = module.exports.createApp = function(tenantId, displayName, host, type, callback) {
    // TODO: Check that user is a global administrator
    // TODO: tenant id validation
    // TODO: displayName validation
    // TODO: host validation
    // TODO: type validation

    // Verify that the provided tenant exists
    TenantsAPI.getTenant(tenantId, function(err, tenant) {
        if (err) {
            return callback(err);
        }

        // Ensure that a tenant with the provided host doesn't already exist
        getAppByHost(host, function(err, app) {
            if (!(err && err.code === 404)) {
                log().error({'err': err, 'host': host}, 'Failed to create a new app');
                return callback({'code': 500, 'msg': 'An app with the provided host name already exists'});
            }

            AppsDAO.createApp(tenant.id, displayName, host, type, callback);
        });
    });
};

/**
 * Update an app
 *
 * @param  {Number}         id                  The id of the app to update
 * @param  {Object}         opts                The values to update
 * @param  {String}         [opts.displayName]  Updated app name
 * @param  {Boolean}        [opts.enabled]      Whether the app should be enabled
 * @param  {String}         [opts.host]         Updated app host
 * @param  {Function}       callback            Standard callback function
 * @param  {Object}         callback.err        An error object, if any
 * @param  {App}            callback.app        The updated app
 */
var updateApp = module.exports.updateApp = function(id, opts, callback) {
    // TODO: Check that user is a global administrator or app administrator
    // TODO: id validation
    // TODO: check that at least one update value has been provided

    // Verify that the provided app exists
    getApp(id, function(err, app) {
        if (err) {
            return callback(err);
        }

        AppsDAO.updateApp(app, opts, callback);
    });
};
