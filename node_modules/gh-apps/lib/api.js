/**
 * Copyright (c) 2014 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var _ = require('lodash');

var GrasshopperUtil = require('gh-core/lib/util');
var log = require('gh-core/lib/logger').logger('gh-apps');
var TenantsAPI = require('gh-tenants');
var Validator = require('gh-core/lib/validator').Validator;
var UsersDAO = require('gh-users/lib/internal/dao');

var AppsDAO = require('./internal/dao');

/**
 * Get all apps in a tenant
 *
 * @param  {Context}        ctx                 Standard context containing the current user and the current app
 * @param  {Number}         tenantId            The id of the tenant to retrieve the apps for
 * @param  {Function}       callback            Standard callback function
 * @param  {Object}         callback.err        An error object, if any
 * @param  {App[]}          callback.apps       All available apps in the tenant
 */
var getApps = module.exports.getApps = function(ctx, tenantId, callback) {
    callback = callback || function() {};

    // Validation
    var validator = new Validator();
    validator.check(null, {'code': 401, 'msg': 'Only global administrators can get all apps in a tenant'}).isGlobalAdmin(ctx);
    validator.check(tenantId, {'code': 400, 'msg': 'A valid tenant id must be provided'}).isInt();
    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    }

    // Verify that the provided tenant exists
    TenantsAPI.getTenant(ctx, tenantId, function(err, tenant) {
        if (err) {
            return callback(err);
        }

        AppsDAO.getApps(tenant.id, callback);
    });
};

/**
 * Get an app
 *
 * @param  {Context}        ctx                 Standard context containing the current user and the current app
 * @param  {Number}         id                  The id of the app to retrieve
 * @param  {Function}       callback            Standard callback function
 * @param  {Object}         callback.err        An error object, if any
 * @param  {App}            callback.app        The requested app
 */
var getApp = module.exports.getApp = function(ctx, id, callback) {
    callback = callback || function() {};

    // Validation
    var validator = new Validator();
    validator.check(id, {'code': 400, 'msg': 'A valid tenant id must be provided'}).isInt();
    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    }

    AppsDAO.getApp(id, callback);
};

/**
 * Get an app by host name
 *
 * @param  {Context}        ctx                 Standard context containing the current user and the current app
 * @param  {String}         host                The host name of the app to retrieve
 * @param  {Function}       callback            Standard callback function
 * @param  {Object}         callback.err        An error object, if any
 * @param  {App}            callback.app        The requested app
 */
var getAppByHost = module.exports.getAppByHost = function(ctx, host, callback) {
    callback = callback || function() {};

    // Validation
    var validator = new Validator();
    validator.check(host, {'code': 400, 'msg': 'A valid host name must be provided'}).notEmpty();
    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    }

    // Lower case the host name
    host = host.toLowerCase();

    AppsDAO.getAppByHost(host, callback);
};

/**
 * Get the administrators for an app
 *
 * @param  {Context}        ctx                 Standard context containing the current user and the current app
 * @param  {Number}         id                  The id of the app to retrieve the administrators for
 * @param  {Number}         [limit]             The maximum number of results to retrieve. Default: 10
 * @param  {Number}         [offset]            The paging number of the results to retrieve
 * @param  {Function}       callback            Standard callback function
 * @param  {Object}         callback.err        An error object, if any
 * @param  {UserList}       callback.appAdmins  The administrators for the app
 */
var getAppAdmins = module.exports.getAppAdmins = function(ctx, id, limit, offset, callback) {
    callback = callback || function() {};

    // Ensure that the paging values are valid
    limit = GrasshopperUtil.getNumberParam(limit, 10, 1, 25);
    offset = GrasshopperUtil.getNumberParam(offset, 0, 0);

    // Validation
    var validator = new Validator();
    validator.check(null, {'code': 401, 'msg': 'Only administrators can get the administrators for an app'}).isAdmin(ctx, id);
    validator.check(id, {'code': 400, 'msg': 'A valid app id must be provided'}).isInt();
    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    }

    // Verify that the provided app exists
    getApp(ctx, id, function(err, app) {
        if (err) {
            return callback(err);
        }

        AppsDAO.getAppAdmins(id, limit, offset, callback);
    });
};

/**
 * Create a new app
 *
 * @param  {Context}        ctx                 Standard context containing the current user and the current app
 * @param  {Number}         tenantId            The id of the tenant on which to create the app
 * @param  {String}         displayName         The name of the app (e.g. `Timetable 2013-14`)
 * @param  {String}         host                The host on which the app can be found
 * @param  {String}         type                The type of the app. One of `timetable`
 * @param  {Function}       callback            Standard callback function
 * @param  {Object}         callback.err        An error object, if any
 * @param  {App}            callback.app        The created app
 */
var createApp = module.exports.createApp = function(ctx, tenantId, displayName, host, type, callback) {
    callback = callback || function() {};

    // Validation
    var validator = new Validator();
    validator.check(null, {'code': 401, 'msg': 'Only global administrators can create a new app'}).isGlobalAdmin(ctx);
    validator.check(tenantId, {'code': 400, 'msg': 'A valid tenant id must be provided'}).isInt();
    validator.check(displayName, {'code': 400, 'msg': 'An app name must be provided'}).notEmpty();
    validator.check(displayName, {'code': 400, 'msg': 'An app name can be at most 256 characters long'}).isShortString();
    validator.check(host, {'code': 400, 'msg': 'An app host must be provided'}).notEmpty();
    validator.check(host, {'code': 400, 'msg': 'An app host can be at most 256 characters long'}).isShortString();
    validator.check(type, {'code': 400, 'msg': 'An app type must be provided'}).notEmpty();
    validator.check(type, {'code': 400, 'msg': 'An app type must be provided'}).isIn(['timetable']);
    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    }

    // Lower case the host name
    host = host.toLowerCase();

    // Verify that the provided tenant exists
    TenantsAPI.getTenant(ctx, tenantId, function(err, tenant) {
        if (err) {
            return callback(err);
        }

        // Ensure that an app with the provided host doesn't already exist
        getAppByHost(ctx, host, function(err, app) {
            if (app) {
                log().error({'err': err, 'host': host}, 'Failed to create a new app');
                return callback({'code': 400, 'msg': 'An app with the provided host name already exists'});
            } else if (err && err.code !== 404) {
                return callback(err);
            }

            AppsDAO.createApp(tenant.id, displayName, host, type, callback);
        });
    });
};

/**
 * Update an app
 *
 * @param  {Context}        ctx                 Standard context containing the current user and the current app
 * @param  {Number}         id                  The id of the app to update
 * @param  {Object}         opts                The values to update
 * @param  {String}         [opts.displayName]  Updated app name
 * @param  {Boolean}        [opts.enabled]      Whether the app should be enabled
 * @param  {String}         [opts.host]         Updated app host
 * @param  {Function}       callback            Standard callback function
 * @param  {Object}         callback.err        An error object, if any
 * @param  {App}            callback.app        The updated app
 */
var updateApp = module.exports.updateApp = function(ctx, id, opts, callback) {
    callback = callback || function() {};

    // Validation
    var validator = new Validator();
    validator.check(null, {'code': 401, 'msg': 'Only administrators can create a new app'}).isAdmin(ctx, id);
    validator.check(id, {'code': 400, 'msg': 'A valid app id must be provided'}).isInt();
    validator.check(_.keys(opts).length, {'code': 400, 'msg': 'A valid app id must be provided'}).min(1);
    if (opts) {
        _.each(opts, function(value, key) {
            validator.check(key, {'code': 400, 'msg': key + ' is not a recognised app update key'}).isIn(['displayName', 'enabled', 'host']);
        });

        if (opts.displayName) {
            validator.check(displayName, {'code': 400, 'msg': 'An app name can be at most 256 characters long'}).isShortString();
        }
        if (opts.enabled) {
            validator.check(null, {'code': 400, 'msg': 'A valid boolean must be provided when enabling/disabling an app'}).isBoolean(opts.enabled);
        }
        if (opts.host) {
            validator.check(opts.host, {'code': 400, 'msg': 'An app host can be at most 256 characters long'}).isShortString();
            // Lower case the host name
            opts.host = opts.host.toLowerCase();
        }
    }
    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    }

    // Verify that the provided app exists
    getApp(ctx, id, function(err, app) {
        if (err) {
            return callback(err);
        }

        AppsDAO.updateApp(app, opts, callback);
    });
};

/**
 * Update the administrators of an app
 *
 * @param  {Context}        ctx                 Standard context containing the current user and the current app
 * @param  {Number}         id                  The id of the app on which the administrators should be updated
 * @param  {Object}         adminUpdates        The keys are the ids of the users for which the app administrator status should be updated. The values are `true` when the user needs to become an app administrator and `false` when the user should not be an app administratoe
 * @param  {Function}       callback            Standard callback function
 * @param  {Object}         callback.err        An error object, if any
 */
var updateAppAdmins = module.exports.updateAppAdmins = function(ctx, id, adminUpdates, callback) {
    callback = callback || function() {};

    adminUpdates = adminUpdates || {};
    var userIds = _.keys(adminUpdates);

    // Validation
    var validator = new Validator();
    validator.check(id, {'code': 400, 'msg': 'A valid app id must be provided'}).isInt();
    validator.check(userIds.length, {'code': 400, 'msg': 'At least one app administrator update must be provided'}).min(1);
    _.each(userIds, function(userId) {
        validator.check(userId, {'code': 400, 'msg': 'An invalid user id has been provided'}).isInt();
    });
    validator.check(null, {'code': 401, 'msg': 'Only administrators can update the app administrators'}).isAdmin(ctx, id);

    // Verify that the provided app exists
    getApp(ctx, id, function(err, app) {
        if (err) {
            return callback(err);
        }

        // Verify that the provided users exist
        UsersDAO.getUsers(userIds, id, function(err, users) {
            if (err) {
                return callback(err);
            }

            AppsDAO.updateAppAdmins(adminUpdates, callback);
        });
    });
};
