/**
 * Copyright (c) 2014 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var GrassHopper = require('gh-core');

/**
 * @REST getTenantUsers
 *
 * Get the users for a tenant
 *
 * @Server      admin,tenant
 * @Method      GET
 * @Path        /tenants/{tenantId}/users
 * @PathParam   {number}            tenantId                The id of the tenant for which to get the users
 * @QueryParam  {number}            [items]                 The maximum number of results to retreive. Default: 10
 * @QueryParam  {number}            [page]                  The paging number of the results to retrieve
 * @Return      {Users}                                     The users for the tenant
 */
var getAppAdmins = function(req, res) {
    res.send(501);
};

GrassHopper.globalAdminServer.get('/api/tenants/:tenantId/users', getAppAdmins);
GrassHopper.tenantServer.get('/api/tenants/:tenantId/users', getAppAdmins);

/**
 * @REST getUser
 *
 * Get a user
 *
 * @Server      admin
 * @Method      GET
 * @Path        /users/{id}
 * @PathParam   {number}            id                      The id of the user to retrieve
 * @Return      {User}                                      The requested user
 */
GrassHopper.globalAdminServer.get('/api/users/:id', function(req, res) {
    res.send(501);
});

/**
 * @REST getMe
 *
 * Get the current user
 *
 * @Server      admin,tenant
 * @Method      GET
 * @Path        /me
 * @Return      {Me}                                        The current user
 */
var getMe = function(req, res) {
    res.send(501);
};

GrassHopper.globalAdminServer.get('/api/me', getMe);
GrassHopper.tenantServer.get('/api/me', getMe);

/**
 * @REST getTermsAndConditions
 *
 * Get the Terms and Conditions
 *
 * @Server      tenant
 * @Method      GET
 * @Path        /users/termsAndConditions
 * @Return      {TermsAndConditions}                        The Terms and Conditions for the current app
 */
GrassHopper.tenantServer.on('get', '/api/users/termsAndConditions', function(req, res) {
    res.send(501);
});

/**
 * @REST acceptTermsAndConditions
 *
 * Accept the Terms and Conditions
 *
 * @Server      tenant
 * @Method      POST
 * @Path        /users/{id}/termsAndConditions
 * @PathParam   {string}            id                      The id of the user for which to accept the Terms and Conditions on the current app
 * @Return      {TermsAndConditionsStatus}                  The updated status of the Terms and Conditions for the user on the current app
 */
GrassHopper.tenantServer.on('post', '/api/users/:id/termsAndConditions', function(req, res) {
    res.send(501);
});

/**
 * @REST createUser
 *
 * Create a new user
 *
 * @Server      admin,tenant
 * @Method      POST
 * @Path        /tenants/{tenantId}/users
 * @PathParam   {number}            tenantId                The id of the tenant on which to create the user
 * @FormParam   {string}            authenticationStrategy  The authentication strategy with which the user will be authenticating  [local,shibboleth]
 * @FormParam   {string}            displayName             The name of the app
 * @FormParam   {string}            email                   The email address for the user
 * @FormParam   {string}            emailPreference         The email preference for the user                                       [immediate,no]
 * @FormParam   {string}            username                The username with which the user will be authenticating
 * @FormParam   {string}            [password]              The password with which the user will be authenticating. Only required when creating a local account
 * @FormParam   {string}            [recaptchaChallenge]    The identifier for the recaptcha challenge. Only required when the user
 *
        'response':  req.body.recaptchaResponse]
 * @Return      {User}                                      The created user
 */
GrassHopper.globalAdminServer.post('/api/tenants/:tenantId/apps', function(req, res) {
    res.send(501);
});

/**
 * @REST updateUser
 * TODO
 *
 * Update a user
 *
 * @Server      admin,tenant
 * @Method      POST
 * @Path        /users/{id}
 * @PathParam   {number}            id                      The id of the user to update
 * @FormParam   {string}            [displayName]           Updated user name
 * @FormParam   {boolean}           [enabled]       Whether the app should be enabled
 * @FormParam   {string}            [host]          Updated app host
 * @Return      {App}                               The updated app
 */
var updateUser = function(req, res) {
    res.send(501);
};

GrassHopper.globalAdminServer.post('/api/users/:id', updateUser);
GrassHopper.tenantServer.post('/api/users/:id', updateUser);


// Update user
// Import users
// Become user
// Upload picture
// Crop picture
// Terms and conditions