/**
 * Copyright (c) 2014 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var GrassHopper = require('gh-core');

var UsersAPI = require('gh-users');

/**
 * @REST getUsers
 *
 * Get all users
 *
 * @Server      admin
 * @Method      GET
 * @Path        /users
 * @QueryParam  {number}            [items]                 The maximum number of results to retreive. Default: 10
 * @QueryParam  {number}            [page]                  The paging number of the results to retrieve
 * @Return      {UserList}                                  All available users
 */
GrassHopper.globalAdminServer.on('get', '/api/users', function(req, res) {
    res.send(501);
});

/**
 * @REST getAppUsers
 *
 * Get the users for an app
 *
 * @Server      admin,app
 * @Method      GET
 * @Path        /apps/{id}/users
 * @PathParam   {number}            id                      The id of the app to get the users for
 * @QueryParam  {number}            [items]                 The maximum number of results to retreive. Default: 10
 * @QueryParam  {number}            [page]                  The paging number of the results to retrieve
 * @Return      {UserList}                                  The users for the app
 */
var getAppUsers = function(req, res) {
    res.send(501);
};

GrassHopper.globalAdminServer.on('get', '/api/apps/:id/users', getAppUsers);
GrassHopper.appServer.on('get', '/api/apps/:id/users', getAppUsers);

/**
 * @REST getUser
 *
 * Get a user
 *
 * @Server      admin
 * @Method      GET
 * @Path        /users/{id}
 * @PathParam   {number}            id                      The id of the user to retrieve
 * @Return      {GlobalUser}                                The requested user
 */
GrassHopper.globalAdminServer.on('get', '/api/users/:id', function(req, res) {
    res.send(501);
});

/**
 * @REST getUser
 *
 * Get a user
 *
 * @Server      admin
 * @Method      GET
 * @Path        /users/{id}
 * @PathParam   {number}            id                      The id of the user to retrieve
 * @Return      {User}                                      The requested user
 */
GrassHopper.appServer.on('get', '/api/users/:id', function(req, res) {
    res.send(501);
});

/**
 * @REST getMe
 *
 * Get the current user
 *
 * @Server      admin,app
 * @Method      GET
 * @Path        /me
 * @Return      {Me}                                        The current user
 */
var getMe = function(req, res) {
    var body = {
        'user': req.user
    };
    res.status(200).send(body);
};

GrassHopper.globalAdminServer.on('get', '/api/me', getMe);
GrassHopper.appServer.on('get', '/api/me', getMe);

/**
 * @REST getTermsAndConditions
 *
 * Get the Terms and Conditions
 *
 * @Server      app
 * @Method      GET
 * @Path        /users/termsAndConditions
 * @Return      {TermsAndConditions}                        The Terms and Conditions for the current app
 */
GrassHopper.appServer.on('get', '/api/users/termsAndConditions', function(req, res) {
    res.send(501);
});

/**
 * @REST acceptTermsAndConditions
 *
 * Accept the Terms and Conditions
 *
 * @Server      app
 * @Method      POST
 * @Path        /users/{id}/termsAndConditions
 * @PathParam   {string}            id                      The id of the user for which to accept the Terms and Conditions on the current app
 * @Return      {TermsAndConditionsStatus}                  The updated status of the Terms and Conditions for the user on the current app
 */
GrassHopper.appServer.on('post', '/api/users/:id/termsAndConditions', function(req, res) {
    res.send(501);
});

/**
 * @REST createUser
 *
 * Create a new user. This user will only be able to authenticate
 * with the `local` authentication strategy.
 *
 * @Server      admin,app
 * @Method      POST
 * @Path        /users
 * @FormParam   {string}            displayName             The name of the user
 * @FormParam   {string}            email                   The email address for the user. This will be used for authentication when using the local authentiation strategy
 * @FormParam   {string}            [tenantId]              The tenant to which the user should be added. This defaults to the tenant of the current app
 * @FormParam   {string}            [emailPreference]       The email preference for the user on the apps to which the user is added    [immediate,no]
 * @FormParam   {string}            [password]              The password with which the user will authenticate. This is only required when using the local authentiation strategy
 * @FormParam   {string}            [recaptchaChallenge]    The identifier for the recaptcha challenge. Only required when the user is not a global or app administrator
 * @FormParam   {string}            [recaptchaResponse]     The recaptcha response entered by the user. Only required when the user is not a global or app administrator
 * @Return      {User}                                      The created user
 */
var createUser = function(req, res) {
    var tenantId = req.body.tenantId || req.ctx.app.Tenant.id;
    var credentials = {
        'type': 'local',
        'username': req.body.username,
        'password': req.body.password
    };
    var userProfile = {
        'email': req.body.email,
        'emailPreference': req.body.emailPreference
    };

    // TODO: Recaptcha validation

    UsersAPI.createUser(req.ctx, tenantId, credentials, userProfile, function(err, user) {
        if (err) {
            return res.status(err.code).send(err.msg);
        }

        res.status(201).send(user);
    });
};

GrassHopper.globalAdminServer.on('post', '/api/users', createUser);
GrassHopper.appServer.on('post', '/api/users', createUser);



/**
 * @REST updateUser
 * TODO
 *
 * Update a user
 *
 * @Server      admin,app
 * @Method      POST
 * @Path        /users/{id}
 * @PathParam   {number}            id                      The id of the user to update
 * @FormParam   {string}            [displayName]           Updated user name
 * @FormParam   {boolean}           [enabled]       Whether the app should be enabled
 * @FormParam   {string}            [host]          Updated app host
 * @Return      {App}                               The updated app
 */
var updateUser = function(req, res) {
    res.send(501);
};

GrassHopper.globalAdminServer.on('post', '/api/users/:id', updateUser);


















/**
 * @REST updateUser
 * TODO
 *
 * Update a user
 *
 * @Server      admin,app
 * @Method      POST
 * @Path        /users/{id}
 * @PathParam   {number}            id                      The id of the user to update
 * @FormParam   {string}            [displayName]           Updated user name
 * @FormParam   {boolean}           [enabled]       Whether the app should be enabled
 * @FormParam   {string}            [host]          Updated app host
 * @Return      {App}                               The updated app
 */
var updateUser = function(req, res) {
    res.send(501);
};

GrassHopper.globalAdminServer.on('post', '/api/users/:id', updateUser);
GrassHopper.appServer.on('post', '/api/users/:id', updateUser);


// Update user
// Import users
// Become user
// Upload picture
// Crop picture
// Terms and conditions