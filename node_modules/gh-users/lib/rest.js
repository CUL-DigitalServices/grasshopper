/**
 * Copyright (c) 2014 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var GrassHopper = require('gh-core');

var UsersAPI = require('gh-users');

/**
 * @REST getUsers
 *
 * Get all users for a tenant or app
 *
 * @Server      admin
 * @Method      GET
 * @Path        /users
 * @QueryParam  {number}            [app]                   The id of the app to retrieve the users for
 * @QueryParam  {number}            [tenant]                The id of the tenant to retrieve the users for
 * @QueryParam  {number}            [items]                 The maximum number of results to retreive. Default: 10
 * @QueryParam  {number}            [page]                  The paging number of the results to retrieve
 * @Return      {UserList}                                  The users for the requested tenant or app
 */
GrassHopper.globalAdminServer.on('get', '/api/users', function(req, res) {
    res.send(501);
});

/**
 * @REST getUsers
 *
 * Get the users in the current app
 *
 * @Server      app
 * @Method      GET
 * @Path        /users
 * @QueryParam  {number}            [items]                 The maximum number of results to retreive. Default: 10
 * @QueryParam  {number}            [page]                  The paging number of the results to retrieve
 * @Return      {UserList}                                  The users for the current app
 */
GrassHopper.appServer.on('get', '/api/users', function(req, res) {
    res.send(501);
});

/**
 * @REST getUser
 *
 * Get a user
 *
 * @Server      admin
 * @Method      GET
 * @Path        /users/{id}
 * @PathParam   {number}            id                      The id of the user to retrieve
 * @Return      {GlobalUser}                                The requested user
 */
GrassHopper.globalAdminServer.on('get', '/api/users/:id', function(req, res) {
    res.send(501);
});

/**
 * @REST getUser
 *
 * Get a user
 *
 * @Server      app
 * @Method      GET
 * @Path        /users/{id}
 * @PathParam   {number}            id                      The id of the user to retrieve
 * @Return      {User}                                      The requested user
 */
GrassHopper.appServer.on('get', '/api/users/:id', function(req, res) {
    res.send(501);
});

/**
 * @REST getMe
 *
 * Get the current user
 *
 * @Server      admin,app
 * @Method      GET
 * @Path        /me
 * @Return      {Me}                                        The current user
 */
var getMe = function(req, res) {
    res.status(200).send(req.user);
};

GrassHopper.globalAdminServer.on('get', '/api/me', getMe);
GrassHopper.appServer.on('get', '/api/me', getMe);

/**
 * @REST getUserCalendar
 *
 * Get the calendar for a user
 *
 * @Server      admin
 * @Method      GET
 * @Path        /users/{id}/calendar
 * @PathParam   {number}            id                      The id of the user to get the calendar for
 * @QueryParam  {number}            app                     The id of the app to get the calendar of the user for
 * @QueryParam  {boolean}           from                    The timestamp (millis since epoch) from which to get the calendar for the user
 * @QueryParam  {boolean}           to                      The timestamp (millis since epoch) until which to get the calendar for the user
 * @Return      {Event[]}                                   The requested user calendar
 */
GrassHopper.globalAdminServer.on('get', '/api/users/:id/calendar', function(req, res) {
    res.send(501);
});

/**
 * @REST getUserCalendar
 *
 * Get the calendar for a user on the current app
 *
 * @Server      app
 * @Method      GET
 * @Path        /users/{id}/calendar
 * @PathParam   {number}            id                      The id of the user to get the calendar for
 * @QueryParam  {boolean}           from                    The timestamp (millis since epoch) from which to get the calendar for the user
 * @QueryParam  {boolean}           to                      The timestamp (millis since epoch) until which to get the calendar for the user
 * @QueryParam  {string}            [signature]             The access control signature
 * @Return      {Event[]}                                   The requested user calendar
 */
GrassHopper.appServer.on('get', '/api/users/:id/calendar', function(req, res) {
    res.send(501);
});

/**
 * @REST getUserCalendarIcal
 *
 * Get the calendar for a user in iCal
 *
 * @Server      admin
 * @Method      GET
 * @Path        /users/{id}/calendar.ical
 * @PathParam   {number}            id                      The id of the user to get the calendar for
 * @QueryParam  {number}            app                     The id of the app to get the calendar of the user for
 * @Return      {ical}                                      The requested user calendar in iCal format
 */
GrassHopper.globalAdminServer.on('get', '/api/users/:id/calendar.ical', function(req, res) {
    res.send(501);
});

/**
 * @REST getUserCalendarIcal
 *
 * Get the calendar for a user on the current app in iCal
 *
 * @Server      app
 * @Method      GET
 * @Path        /users/{id}/calendar.ical
 * @PathParam   {number}            id                      The id of the user to get the calendar for
 * @QueryParam  {string}            [signature]             The access control signature
 * @Return      {ical}                                      The requested user calendar in iCal format
 */
GrassHopper.appServer.on('get', '/api/users/:id/calendar.ical', function(req, res) {
    res.send(501);
});

/**
 * @REST getUserCalendarRss
 *
 * Get the calendar for a user in RSS
 *
 * @Server      admin
 * @Method      GET
 * @Path        /users/{id}/calendar.rss
 * @PathParam   {number}            id                      The id of the user to get the calendar for
 * @QueryParam  {number}            app                     The id of the app to get the calendar of the user for
 * @Return      {rss}                                       The requested event series calendar in RSS format
 */
GrassHopper.globalAdminServer.on('get', '/api/users/:id/calendar.rss', function(req, res) {
    res.send(501);
});

/**
 * @REST getUserCalendarRss
 *
 * Get the calendar for a user on the current app in RSS
 *
 * @Server      app
 * @Method      GET
 * @Path        /users/{id}/calendar.rss
 * @PathParam   {number}            id                      The id of the user to get the calendar for
 * @QueryParam  {string}            [signature]             The access control signature
 * @Return      {ical}                                      The requested user calendar in RSS format
 */
GrassHopper.appServer.on('get', '/api/users/:id/calendar.rss', function(req, res) {
    res.send(501);
});

/**
 * @REST getUserUpcoming
 *
 * Get the upcoming events for a user
 *
 * @Server      admin
 * @Method      GET
 * @Path        /users/{id}/upcoming
 * @PathParam   {number}            id                      The id of the user to get the upcoming events for
 * @QueryParam  {number}            app                     The id of the app to get the upcoming events events for the user for
 * @QueryParam  {number}            [items]                 The maximum number of results to retreive. Default: 10
 * @QueryParam  {number}            [page]                  The paging number of the results to retrieve
 * @Return      {EventList}                                 The upcoming events for the user
 */
GrassHopper.globalAdminServer.on('get', '/api/users/:id/upcoming', function(req, res) {
    res.send(501);
};

/**
 * @REST getUserUpcoming
 *
 * Get the upcoming events for a user
 *
 * @Server      admin,app
 * @Method      GET
 * @Path        /users/{id}/upcoming
 * @PathParam   {number}            id                      The id of the event series to get the upcoming events for
 * @QueryParam  {number}            [items]                 The maximum number of results to retreive. Default: 10
 * @QueryParam  {number}            [page]                  The paging number of the results to retrieve
 * @Return      {EventList}                                 The upcoming events in the event series
 */
GrassHopper.appServer.on('get', '/api/users/:id/upcoming', function(req, res) {
    res.send(501);
};

/**
 * @REST getTermsAndConditions
 *
 * Get the Terms and Conditions
 *
 * @Server      app
 * @Method      GET
 * @Path        /users/termsAndConditions
 * @Return      {TermsAndConditions}                        The Terms and Conditions for the current app
 */
GrassHopper.appServer.on('get', '/api/users/termsAndConditions', function(req, res) {
    res.send(501);
});

/**
 * @REST acceptTermsAndConditions
 *
 * Accept the Terms and Conditions
 *
 * @Server      app
 * @Method      POST
 * @Path        /users/{id}/termsAndConditions
 * @PathParam   {string}            id                      The id of the user for which to accept the Terms and Conditions on the current app
 * @Return      {TermsAndConditionsStatus}                  The updated status of the Terms and Conditions for the user on the current app
 */
GrassHopper.appServer.on('post', '/api/users/:id/termsAndConditions', function(req, res) {
    res.send(501);
});

/**
 * @REST createUser
 *
 * Create a new user with a local authentication strategy
 *
 * @Server      admin,app
 * @Method      POST
 * @Path        /users
 * @FormParam   {string}            displayName             The name of the user
 * @FormParam   {string}            email                   The email address for the user. This will be used for authentication when using the local authentiation strategy
 * @FormParam   {string}            [appId]                 The app to which the user should be added
 * @FormParam   {string}            [emailPreference]       The email preference for the user on the apps to which the user is added    [immediate,no]
 * @FormParam   {string}            [password]              The password with which the user will authenticate. This is only required when using the local authentiation strategy
 * @FormParam   {string}            [recaptchaChallenge]    The identifier for the recaptcha challenge. Only required when the user is not a global or app administrator
 * @FormParam   {string}            [recaptchaResponse]     The recaptcha response entered by the user. Only required when the user is not a global or app administrator
 * @FormParam   {string}            [tenantId]              The tenant to which the user should be added. This defaults to the tenant of the current app
 * @Return      {User}                                      The created user
 */
var createUser = function(req, res) {
    var tenantId = req.body.tenantId || req.ctx.app.Tenant.id;
    var credentials = {
        'type': 'local',
        'username': req.body.username,
        'password': req.body.password
    };
    var userProfile = {
        'email': req.body.email,
        'emailPreference': req.body.emailPreference
    };

    // TODO: Recaptcha validation

    UsersAPI.createUser(req.ctx, tenantId, credentials, userProfile, function(err, user) {
        if (err) {
            return res.status(err.code).send(err.msg);
        }

        res.status(201).send(user);
    });
};

GrassHopper.globalAdminServer.on('post', '/api/users', createUser);
GrassHopper.appServer.on('post', '/api/users', createUser);

/**
 * @REST importUsers
 *
 * Import users using a CSV file
 *
 * @Server      admin
 * @Method      POST
 * @Path        /user/import
 * @FormParam   {string}            authenticationStrategy  The authentication strategy for the user    [local,shibboleth]
 * @FormParam   {File}              file                    The CSV file to import
 * @FormParam   {number}            tenant                  The id of the tenant to which the users should be imported
 * @FormParam   {number}            [app]                   The id of the app to which the users should be associated
 * @FormParam   {boolean}           [forceProfileUpdate]    Whether the user information should be updated, even when other user information is already present. Defaults to `false`
 * @Return      {void}
 */
GrassHopper.globalAdminServer.on('post', '/api/users/import', function(req, res) {
    res.send(501);
});

/**
 * @REST updateUser
 *
 * Update a user
 *
 * @Server      admin,app
 * @Method      POST
 * @Path        /users/{id}
 * @PathParam   {number}            id                      The id of the user to update
 * @FormParam   {string}            [displayName]           Updated user name
 * @FormParam   {string}            [email]                 Updated user email address
 * @FormParam   {string}            [emailPreference]       Updated user email preference on the current app    [immediate,no]
 * @Return      {User}                                      The updated user
 */
var updateUser = function(req, res) {
    res.send(501);
};

GrassHopper.globalAdminServer.on('post', '/api/users/:id', updateUser);
GrassHopper.appServer.on('post', '/api/users/:id', updateUser);

/**
 * @REST updateAdminStatus
 *
 * Update the app administrator status for a user
 *
 * @Server      admin
 * @Method      POST
 * @Path        /users/{id}/admin
 * @PathParam   {number}            id                      The id of the user to update the app administrator status for
 * @FormParam   {number}            app                     The id of the app for which to update the administrator status of the user
 * @FormParam   {boolean}           admin                   Whether the user should be an app administrator
 * @Return      {User}                                      The updated user
 */
GrassHopper.globalAdminServer.on('post', '/api/users/:id/admin', function(req, res) {
    res.send(501);
});

/**
 * @REST updateAdminStatus
 *
 * Update the administrator status for a user on the current app
 *
 * @Server      app
 * @Method      POST
 * @Path        /users/{id}/admin
 * @PathParam   {number}            id                      The id of the user to update the app administrator status for
 * @FormParam   {boolean}           admin                   Whether the user should be an app administrator
 * @Return      {User}                                      The updated user
 */
GrassHopper.appServer.on('post', '/api/users/:id/admin', function(req, res) {
    res.send(501);
});

/**
 * @REST setUserPicture
 *
 * Store a profile picture for a user
 *
 * @Server      admin,app
 * @Method      POST
 * @Path        /users/{id}/picture
 * @PathParam   {number}            id                      The id of the user to store the profile picture for
 * @FormParam   {File}              file                    Image that should be stored as the user profile picture
 * @Return      {User}                                      The updated user
 */
var setUserPicture = function(req, res) {
    res.send(501);
};

GrassHopper.globalAdminServer.on('post', '/api/users/:id/picture', setUserPicture);
GrassHopper.appServer.on('post', '/api/users/:id/picture', setUserPicture);

/**
 * @REST cropUserPicture
 *
 * Crop the profile picture for a user
 *
 * @Server      admin,app
 * @Method      POST
 * @Path        /users/{id}/picture/crop
 * @FormParam   {number}            id                      The id of the user to crop the profile picture for
 * @FormParam   {number}            width                   The width of the square that needs to be cropped out
 * @FormParam   {number}            x                       The x coordinate of the top left corner to start cropping at
 * @FormParam   {number}            y                       The y coordinate of the top left corner to start cropping at
 * @Return      {User}                                      The updated user
 */
var cropUserPicture = function(req, res) {
    res.send(501);
};

GrassHopper.globalAdminServer.on('post', '/api/users/:id/picture/crop', cropUserPicture);
GrassHopper.appServer.on('post', '/api/users/:id/picture/crop', cropUserPicture);
