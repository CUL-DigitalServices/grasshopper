/**
 * Copyright (c) 2015 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var _ = require('lodash');
var assert = require('assert');

var AppsTestsUtil = require('gh-apps/tests/util');
var AuthTestsUtil = require('gh-auth/tests/util');
var ConfigTestsUtil = require('gh-config/tests/util');
var RestAPI = require('gh-rest');
var SeriesTestsUtil = require('gh-series/tests/util');
var TestsUtil = require('gh-tests/lib/util');

var UsersTestsUtil = require('gh-users/tests/util');

describe('Terms and Conditions', function() {

    /**
     * Create a tenant and application that contains 2 users and has an enabled Terms and Conditions
     *
     * @param  {Function}       callback                            Standard callback function
     * @param  {Tenant}         callback.tenant                     The created tenant
     * @param  {App}            callback.app                        The created application
     * @param  {RestClient}     callback.globalAdminClient          A global admin rest client
     * @param  {Object}         callback.user1                      A regular user in the application
     * @param  {Object}         callback.user2                      A regular user in the application
     * @api private
     */
    var setup = function(callback) {
        TestsUtil.generateTestTenant(1, function(tenant, app) {
            TestsUtil.generateTestUsers(app, 2, false, function(simon, nico) {

                // Sanity-check that the application has no Terms and Conditions
                UsersTestsUtil.assertGetMe(simon.client, function(me) {
                    assert.strictEqual(me.termsAndConditions.needsToAccept, false);

                    // Set some Terms and Conditions
                    TestsUtil.getGlobalAdminRestClient(function(globalAdminClient) {
                        var configuration = {
                            'termsAndConditionsEnabled': true,
                            'termsAndConditionsText': 'Oh lawdy',

                            // Allow local accounts to be created
                            'allowLocalAccountCreation': true,

                            // Enable Shibboleth authentication
                            'enableShibbolethAuth': true,
                            'shibIdpEntityId': 'https://idp.olympia.edu/shibboleth',
                            'shibExternalIdAttributes': 'eppn persistent-id targeted-id',
                            'shibMapDisplayname': 'displayname cn',
                            'shibMapEmail': 'mail email eppn'
                        };
                        ConfigTestsUtil.assertUpdateConfig(globalAdminClient, app.id, configuration, function() {
                            return callback(tenant, app, globalAdminClient, simon, nico);
                        });
                    });
                });
            });
        });
    };

    describe('System interaction', function() {

        /**
         * Test that verifies that user need to accept the Terms and Conditions when creating an account
         */
        it('verify users need to accept the Terms and Conditions when creating an account', function(callback) {
            setup(function(tenant, app, globalAdminClient, simon) {

                TestsUtil.getAnonymousAppUserClient(app, function(anonymousClient) {
                    var email = TestsUtil.generateTestEmailAddress();
                    UsersTestsUtil.assertCreateUserFails(anonymousClient, 'displayName', email, 'password', {}, 400, function() {
                        UsersTestsUtil.assertCreateUserFails(anonymousClient, 'displayName', email, 'password', {'termsAndConditions': 'not true'}, 400, function() {
                            UsersTestsUtil.assertCreateUserFails(anonymousClient, 'displayName', email, 'password', {'termsAndConditions': false}, 400, function() {

                                // Check a user can be created if the Terms and Conditions are accepted
                                UsersTestsUtil.assertCreateUser(anonymousClient, 'displayName', email, 'password', {'termsAndConditions': true}, function() {

                                    // Sanity check users can be created without specifying the `termsAndConditions` option
                                    // if the Terms and Conditions are disabled
                                    ConfigTestsUtil.assertUpdateConfig(globalAdminClient, app.id, {'termsAndConditionsEnabled': false}, function() {
                                        var email2 = TestsUtil.generateTestEmailAddress();
                                        UsersTestsUtil.assertCreateUser(anonymousClient, 'displayName', email2, 'password', {}, function() {
                                            return callback();
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that users cannot interact with the system when a Terms and Conditions comes into effect
         */
        it('verify regular users need to accept the Terms and Conditions before they can interact with the system', function(callback) {
            setup(function(tenant, app, globalAdminClient, simon) {

                // When the user tries to do anything, they need to accept the Terms and Conditions
                SeriesTestsUtil.assertCreateSerieFails(simon.client, 'Test series', null, 419, function() {

                    // Verify the me feed confirms that we need to accept the Terms and Conditions
                    UsersTestsUtil.assertGetMe(simon.client, function(me) {
                        assert.strictEqual(me.termsAndConditions.needsToAccept, true);

                        // Accept the Terms and Conditions
                        UsersTestsUtil.assertAcceptTermsAndConditions(simon.client, simon.profile.id, function() {

                            // Verify the me feed confirms that we don't need to accept the Terms and Conditions anymore
                            UsersTestsUtil.assertGetMe(simon.client, function(me) {
                                assert.strictEqual(me.termsAndConditions.needsToAccept, false);

                                // Verify we can interact with the system
                                SeriesTestsUtil.assertCreateSerie(simon.client, 'Test series', null, function() {

                                    // Update the Terms and Conditions
                                    var configuration = {
                                        'termsAndConditionsText': 'Oh heavens no'
                                    };
                                    ConfigTestsUtil.assertUpdateConfig(globalAdminClient, app.id, configuration, function() {

                                        // Verify the user needs to re-accept the Terms and Conditions
                                        UsersTestsUtil.assertGetMe(simon.client, function(me) {
                                            assert.strictEqual(me.termsAndConditions.needsToAccept, true);
                                            return callback();
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that anonymous users don't need to accept the Terms and Conditions
         */
        it('verify anonymous users don\'t need to accept the Terms and Conditions', function(callback) {
            setup(function(tenant, app, globalAdminClient, simon) {

                // Verify anonymous users do not have to accept them
                TestsUtil.getAnonymousAppUserClient(app, function(anonymousClient) {
                    UsersTestsUtil.assertGetMe(anonymousClient, function(me) {
                        assert.strictEqual(me.termsAndConditions.needsToAccept, false);

                        // Verify anonymous users can still do POST requests to start the authentication workflows
                        var options = {
                            'host': TestsUtil.getAppListenUri(),
                            'hostHeader': app.host,
                            'authenticationStrategy': 'local',
                            'username': simon.profile.email,
                            'password': simon.client.options.password
                        };
                        RestAPI.createClient(options, function(err, authenticatedClient) {
                            assert.ok(!err);
                            UsersTestsUtil.assertGetMe(authenticatedClient, function(me) {
                                assert.ok(!me.anon);
                                assert.strictEqual(me.termsAndConditions.needsToAccept, true);

                                // Verify Shibboleth authentication still works
                                var attributes = {
                                    'email': TestsUtil.generateTestEmailAddress(),
                                    'displayname': 'Simon G'
                                };
                                AuthTestsUtil.assertShibbolethLogin(app, null, attributes, null, function(restClient, remoteUser) {
                                    UsersTestsUtil.assertGetMe(restClient, function(me) {
                                        assert.ok(!me.anon);

                                        return callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that administrators don't need to accept the Terms and Conditions to
         * interact with an application
         */
        it('verify administrators don\'t need to accept the Terms and Conditions', function(callback) {
            setup(function(tenant, app, globalAdminClient, simon) {
                // When the user tries to do anything, they need to accept the Terms and Conditions
                SeriesTestsUtil.assertCreateSerieFails(simon.client, 'Test series', null, 419, function() {

                    // Verify the me feed confirms that we need to accept the Terms and Conditions
                    UsersTestsUtil.assertGetMe(simon.client, function(me) {
                        assert.strictEqual(me.termsAndConditions.needsToAccept, true);

                        // Make Simon an application administrator
                        UsersTestsUtil.assertUpdateAdminStatus(globalAdminClient, simon.profile.id, true, function() {

                            // Simon should now be able to create series
                            SeriesTestsUtil.assertCreateSerie(simon.client, 'Test series', null, function() {

                                // Verify the me feed confirms that we don't need to accept the Terms and Conditions
                                UsersTestsUtil.assertGetMe(simon.client, function(me) {
                                    assert.strictEqual(me.termsAndConditions.needsToAccept, false);

                                    return callback();
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Assert that users created by administrators still need to verify the Terms and Conditions
         *
         * @param  {RestClient}     client          A REST client that can administrate the application
         * @param  {App}            app             The application to create a user on
         * @param  {Function}       callback        Standard callback function
         */
        var assertCreateUser = function(client, app, callback) {
            // Assert that global admins can create local user accounts
            var email = TestsUtil.generateTestEmailAddress();
            UsersTestsUtil.assertCreateUser(client, 'displayName', email, 'password', {'app': app.id}, function(user) {

                // Create a REST client for the created user
                var options = {
                    'host': TestsUtil.getAppListenUri(),
                    'hostHeader': app.host,
                    'authenticationStrategy': 'local',
                    'username': email,
                    'password': 'password'
                };
                RestAPI.createClient(options, function(err, client) {
                    assert.ok(!err);

                    // Assert the user still needs to accept the T&C
                    UsersTestsUtil.assertGetMe(client, function(me) {
                        assert.strictEqual(me.termsAndConditions.accepted, null);
                        assert.ok(me.termsAndConditions.needsToAccept);
                        return callback();
                    });
                });
            });
        };

        /**
         * Test that verifies that administrators don't need to accept the Terms and Conditions when
         * creating an account for another user
         */
        it('verify administrators don\'t need to accept the Terms and Conditions when creating an account for another user', function(callback) {
            setup(function(tenant, app, globalAdminClient, simon) {

                // Assert global administrators can create user accounts that still need to accept the T&C
                assertCreateUser(globalAdminClient, app, function() {

                    // Make Simon an application administrator
                    UsersTestsUtil.assertUpdateAdminStatus(globalAdminClient, simon.profile.id, true, function() {

                        // Assert application administrators can create user accounts that still need to accept the T&C
                        assertCreateUser(simon.client, app, function() {
                            return callback();
                        });
                    });
                });
            });
        });
    });

    describe('Accepting', function() {

        /**
         * Test that verifies validation when accepting the Terms and Conditions
         */
        it('verify validation when accepting the Terms and Conditions', function(callback) {
            setup(function(tenant, app, globalAdminClient, simon) {

                UsersTestsUtil.assertAcceptTermsAndConditionsFails(simon.client, 'not a number', 400, function() {
                    UsersTestsUtil.assertAcceptTermsAndConditionsFails(simon.client, -1, 404, function() {
                        UsersTestsUtil.assertAcceptTermsAndConditionsFails(simon.client, 32423423, 404, function() {
                            return callback();
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies authorization when accepting the Terms and Conditions
         */
        it('verify authorization when accepting the Terms and Conditions', function(callback) {
            setup(function(tenant, app, globalAdminClient, simon, nico) {

                // Anonymous user can't accept Terms and Conditions
                TestsUtil.getAnonymousAppUserClient(app, function(anonymousClient) {
                    UsersTestsUtil.assertAcceptTermsAndConditionsFails(anonymousClient, simon.profile.id, 401, function() {

                        // Regular users can't accept the Terms and Conditions of another user
                        UsersTestsUtil.assertAcceptTermsAndConditionsFails(nico.client, simon.profile.id, 401, function() {

                            // Even application administrators shouldn't be able to force-accept
                            // the Terms and Conditions of another user
                            UsersTestsUtil.assertUpdateAdminStatus(globalAdminClient, nico.profile.id, true, function() {
                                UsersTestsUtil.assertAcceptTermsAndConditionsFails(nico.client, simon.profile.id, 401, function() {

                                    // We can't test global administrators as the endpoint is not exposed
                                    // on the global administration server
                                    return callback();
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    describe('Getting the Terms and Conditions', function() {

        /**
         * Test that verifies validation when getting the Terms and Conditions
         */
        it('verify validation when getting the Terms and Conditions', function(callback) {
            setup(function(tenant, app, globalAdminClient, simon, nico) {

                // Invalid application id
                AppsTestsUtil.assertGetTermsAndConditionsFails(simon.client, 'invalid', 400, function() {

                    // Unknown application id
                    AppsTestsUtil.assertGetTermsAndConditionsFails(simon.client, -1, 404, function() {
                        AppsTestsUtil.assertGetTermsAndConditionsFails(simon.client, 32423423, 404, function() {
                            return callback();
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies authorization when getting the Terms and Conditions
         */
        it('verify authorization when getting the Terms and Conditions', function(callback) {
            setup(function(tenant, app, globalAdminClient, simon, nico) {

                // Everyone should be able to get the Terms and Conditions
                TestsUtil.getAnonymousAppUserClient(app, function(anonymousClient) {
                    AppsTestsUtil.assertGetTermsAndConditions(anonymousClient, app.id, function(termsAndConditions) {
                        TestsUtil.getAnonymousGlobalAdminRestClient(function(anonymousGlobalAdminClient) {
                            AppsTestsUtil.assertGetTermsAndConditions(anonymousGlobalAdminClient, app.id, function(termsAndConditions) {

                                AppsTestsUtil.assertGetTermsAndConditions(simon.client, app.id, function(termsAndConditions) {

                                    UsersTestsUtil.assertUpdateAdminStatus(globalAdminClient, nico.profile.id, true, function() {
                                        AppsTestsUtil.assertGetTermsAndConditions(nico.client, app.id, function(termsAndConditions) {

                                            AppsTestsUtil.assertGetTermsAndConditions(globalAdminClient, app.id, function(termsAndConditions) {
                                                return callback();
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies the lastUpdate changes when the Terms and Conditions are changed
         */
        it('verify the lastUpdate timestamp changes after updating the Terms and Conditions', function(callback) {
            setup(function(tenant, app, globalAdminClient, simon, nico) {

                // Get the Terms and Conditions
                AppsTestsUtil.assertGetTermsAndConditions(simon.client, app.id, function(termsAndConditions) {

                    // Add an artificial time-out so we don't run into test failures when the 2 T&C updates happen within the same millisecond
                    setTimeout(function() {

                        // Update the Terms and Conditions
                        var configuration = {'termsAndConditionsText': 'Oh heavens no'};
                        ConfigTestsUtil.assertUpdateConfig(globalAdminClient, app.id, configuration, function() {

                            // Get the updated Terms and Conditions
                            AppsTestsUtil.assertGetTermsAndConditions(simon.client, app.id, function(updatedTermsAndConditions) {
                                assert.ok(updatedTermsAndConditions.lastUpdate > termsAndConditions.lastUpdate);
                                return callback();
                            });
                        });
                    }, 100);
                });
            });
        });
    });
});
