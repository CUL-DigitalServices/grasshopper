/**
 * Copyright (c) 2014 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var _ = require('lodash');
var assert = require('assert');
var moment = require('moment');

var EventsTestsUtil = require('gh-events/tests/util');
var OrgUnitTestUtil = require('gh-orgunit/tests/util');
var SeriesTestUtil = require('gh-series/tests/util');
var TestsUtil = require('gh-tests');

var UsersTestsUtil = require('./util');

describe('Users - calendars', function() {

    describe('Resetting calendar tokens', function() {

        /**
         * Test that verifies that a calendar token can be reset
         */
        it('verify a calendar token can be reset', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 2, false, function(simon, nico) {

                // Verify a user's calendar token is returned in the me feed
                UsersTestsUtil.assertGetMe(simon.client, function(simonMe) {
                    assert.ok(simonMe.calendarToken);
                    assert.strictEqual(simonMe.calendarToken, simon.profile.calendarToken);

                    // Sanity-check that another user's token is different
                    UsersTestsUtil.assertGetMe(nico.client, function(nicoMe) {
                        assert.ok(nicoMe.calendarToken);
                        assert.strictEqual(nicoMe.calendarToken, nico.profile.calendarToken);
                        assert.notStrictEqual(simonMe.calendarToken, nicoMe.calendarToken);

                        // Verify a token can be reset
                        UsersTestsUtil.assertResetUserCalendarToken(simon.client, simon.profile.id, function(simonUpdated) {
                            assert.ok(simonUpdated.calendarToken);
                            assert.notStrictEqual(simonUpdated.calendarToken, simonMe.calendarToken);

                            // Sanity-check the old token is no longer valid
                            TestsUtil.getAnonymousAppUserClient(global.tests.apps.cam2013, function(anonymousClient) {
                                UsersTestsUtil.assertGetUserCalendarICalFails(anonymousClient, simon.profile.id, simonMe.calendarToken, 401, function() {
                                    return callback();
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies the validation when resetting a calendar token
         */
        it('verify validation when resetting a calendar token', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, false, function(simon) {

                // Invalid user id
                UsersTestsUtil.assertResetUserCalendarTokenFails(simon.client, 'Not a number', 400, function() {

                    // Unknown user
                    UsersTestsUtil.assertResetUserCalendarTokenFails(simon.client, -1, 404, function() {
                        UsersTestsUtil.assertResetUserCalendarTokenFails(simon.client, 2453453425245, 404, function() {
                            return callback();
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies the authorization when resetting a calendar token
         */
        it('verify authorization when resetting a calendar token', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 2, false, function(camUser1, camUser2) {
                TestsUtil.generateTestUsers(global.tests.apps.cam2013, 2, false, function(oxfordUser) {

                    // Anonymous users cannot reset a user's calendar token
                    TestsUtil.getAnonymousAppUserClient(global.tests.apps.cam2013, function(anonymousClient) {
                        UsersTestsUtil.assertResetUserCalendarTokenFails(anonymousClient, camUser1.profile.id, 401, function() {
                            TestsUtil.getAnonymousGlobalAdminRestClient(function(anonymousGlobalAdminClient) {
                                UsersTestsUtil.assertResetUserCalendarTokenFails(anonymousGlobalAdminClient, camUser1.profile.id, 401, function() {

                                    // Other users cannot reset a user's calendar token
                                    UsersTestsUtil.assertResetUserCalendarTokenFails(camUser2.client, camUser1.profile.id, 401, function() {

                                        // Users from another application cannot reset a user's calendar token
                                        UsersTestsUtil.assertResetUserCalendarTokenFails(oxfordUser.client, camUser1.profile.id, 401, function() {

                                            // Application admins from another application cannot reset a user's calendar token
                                            UsersTestsUtil.assertResetUserCalendarTokenFails(global.tests.admins.oxford2014.client, camUser1.profile.id, 401, function() {

                                                // A user can reset his own calendar token
                                                UsersTestsUtil.assertResetUserCalendarToken(camUser1.client, camUser1.profile.id, function() {

                                                    // Application admins can reset the calendar tokens from users from their own application
                                                    UsersTestsUtil.assertResetUserCalendarToken(global.tests.admins.cam2013.client, camUser1.profile.id, function() {

                                                        // Global admins can reset everyone's calendar token
                                                        TestsUtil.getGlobalAdminRestClient(function(globalAdminClient) {
                                                            UsersTestsUtil.assertResetUserCalendarToken(globalAdminClient, camUser1.profile.id, function() {
                                                                return callback();
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    describe('JSON', function() {

        /**
         * Test that verifies getting a calendar
         */
        it('verify getting a calendar', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, false, function(simon) {

                var start = moment().format();
                var end = moment().add(2, 'hour').format();
                UsersTestsUtil.assertGetUserCalendar(simon.client, simon.profile.id, start, end, [], function(calendar) {
                    assert.strictEqual(calendar.results.length, 0);
                    return callback();
                });
            });
        });

        /**
         * Test that verifies validation when getting a calendar
         */
        it('verify validation when getting a calendar', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 2, false, function(simon, nicolaas) {

                var start = moment().format();
                var end = moment().add(2, 'hour').format();

                // Invalid user id
                UsersTestsUtil.assertGetUserCalendarFails(simon.client, 'Not a number', start, end, 400, function() {

                    // Missing user
                    UsersTestsUtil.assertGetUserCalendarFails(simon.client, -1, start, end, 404, function() {
                        UsersTestsUtil.assertGetUserCalendarFails(simon.client, 23423424234, start, end, 404, function() {

                            // Mising start date
                            UsersTestsUtil.assertGetUserCalendarFails(simon.client, simon.profile.id, null, end, 400, function() {

                                // Missing end date
                                UsersTestsUtil.assertGetUserCalendarFails(simon.client, nicolaas.profile.id, start, null, 400, function() {

                                    // Invalid start date
                                    UsersTestsUtil.assertGetUserCalendarFails(simon.client, nicolaas.profile.id, 'bleh', end, 400, function() {

                                        // Invalid end date
                                        UsersTestsUtil.assertGetUserCalendarFails(simon.client, nicolaas.profile.id, start, 'bleh', 400, function() {

                                            // The start date cannot come after the end date
                                            UsersTestsUtil.assertGetUserCalendarFails(simon.client, nicolaas.profile.id, end, start, 400, function() {
                                                return callback();
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies authorization when getting a calendar
         */
        it('verify authorization when getting a calendar', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 2, false, function(simon, nicolaas) {
                TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, true, function(appAdmin) {
                    TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, false, function(oxfordUser) {
                        TestsUtil.getAnonymousAppUserClient(global.tests.apps.cam2013, function(anonymousClient) {

                            var start = moment().format();
                            var end = moment().add(2, 'hour').format();

                            // Anonymous users cannot get a user's calendar
                            UsersTestsUtil.assertGetUserCalendarFails(anonymousClient, simon.profile.id, start, end, 401, function() {

                                // User from another app
                                UsersTestsUtil.assertGetUserCalendarFails(simon.client, oxfordUser.profile.id, start, end, 401, function() {

                                    // Another user from the same app
                                    UsersTestsUtil.assertGetUserCalendarFails(simon.client, nicolaas.profile.id, start, end, 401, function() {

                                        // The user has access to his own calendar
                                        UsersTestsUtil.assertGetUserCalendar(simon.client, simon.profile.id, start, end, [], function() {

                                            // An application admin has access to calendars from users on his app
                                            UsersTestsUtil.assertGetUserCalendar(appAdmin.client, simon.profile.id, start, end, [], function() {

                                                // An application does not have access to a calendar on another app
                                                UsersTestsUtil.assertGetUserCalendar(appAdmin.client, oxfordUser.profile.id, start, end, [], function() {

                                                    // A global admin has access to all the calendars
                                                    TestsUtil.getGlobalAdminRestClient(function(globalAdminClient) {
                                                        UsersTestsUtil.assertGetUserCalendar(globalAdminClient, oxfordUser.profile.id, start, end, [], function() {
                                                            return callback();
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies the events order and metadata is correct
         */
        it('verify events order and metadata', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, false, function(simon) {

                // Generate a couple of series with some events in them
                var start = moment().subtract(5, 'day').format();
                var end = moment().add(5, 'day').format();
                SeriesTestUtil.generateSerieWithEvents(simon.client, 3, 4, start, end, function(series) {

                    // Subscribe to all the series
                    SeriesTestUtil.assertSubscribeSeries(simon.client, series[0].id, simon.profile.id, null, function() {
                        SeriesTestUtil.assertSubscribeSeries(simon.client, series[1].id, simon.profile.id, null, function() {
                            SeriesTestUtil.assertSubscribeSeries(simon.client, series[2].id, simon.profile.id, null, function() {

                                var allEvents = _.union(series[0].events, series[1].events, series[2].events);
                                allEvents = _.sortBy(allEvents, 'start');

                                // Get the calendar
                                UsersTestsUtil.assertGetUserCalendar(simon.client, simon.profile.id, start, end, allEvents, function(calendar) {
                                    _.each(calendar.results, function(event, i) {
                                        // Assert the events in the calendar are in the correct order
                                        assert.strictEqual(event.id, allEvents[i].id);

                                        // Assert the events contain the organiser information
                                        assert.strictEqual(event.organisers.length, 1);

                                        // Assert the full user object is returned
                                        assert.ok(event.organisers[0]);
                                    });
                                    return callback();
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Verify a context is returned when possible
         */
        it('verify a context is returned when possible', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, false, function(simon) {

                // Generate a couple of organisational units
                OrgUnitTestUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'Orgunit 1', 'course', null, function(orgUnit1) {
                    OrgUnitTestUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'Orgunit 2', 'course', null, function(orgUnit2) {

                        // Generate a few series with some events in them
                        var start = moment().subtract(5, 'day').format();
                        var end = moment().add(5, 'day').format();
                        SeriesTestUtil.generateSerieWithEvents(simon.client, 3, 4, start, end, function(series) {

                            // Add a serie to each organisational unit
                            OrgUnitTestUtil.assertAddOrgUnitSeries(global.tests.admins.cam2013.client, orgUnit1.id, [series[0].id], function() {
                                OrgUnitTestUtil.assertAddOrgUnitSeries(global.tests.admins.cam2013.client, orgUnit2.id, [series[1].id], function() {

                                    // Subscribe to all the series
                                    SeriesTestUtil.assertSubscribeSeries(simon.client, series[0].id, simon.profile.id, orgUnit1.id, function() {
                                        SeriesTestUtil.assertSubscribeSeries(simon.client, series[1].id, simon.profile.id, orgUnit2.id, function() {
                                            SeriesTestUtil.assertSubscribeSeries(simon.client, series[2].id, simon.profile.id, null, function() {

                                                // Ensure that the first 2 series have the appropriate context. Since the
                                                // third serie was subscribed to without a context, none should be returned
                                                // in the calendar
                                                UsersTestsUtil.assertGetUserCalendar(simon.client, simon.profile.id, start, end, null, function(calendar) {
                                                    var firstSerieEvents = 0;
                                                    var secondSerieEvents = 0;
                                                    var thirdSerieEvents = 0;
                                                    _.each(calendar.results, function(event) {
                                                        if (_.find(series[0].events, {'id': event.id})) {
                                                            assert.ok(event.context);
                                                            assert.strictEqual(event.context.id, orgUnit1.id);
                                                            firstSerieEvents++;
                                                        } else if (_.find(series[1].events, {'id': event.id})) {
                                                            assert.ok(event.context);
                                                            assert.strictEqual(event.context.id, orgUnit2.id);
                                                        } else {
                                                            assert.ok(!event.context);
                                                        }
                                                    });

                                                    return callback();
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    describe('iCal', function() {

        /**
         * Test that verifies getting a calendar
         */
        it('verify getting a calendar', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, false, function(simon) {
                UsersTestsUtil.assertGetMe(simon.client, function(me) {

                    // Generate a serie and subscribe to it
                    var calendarStart = moment().subtract(1, 'day').format();
                    var calendarEnd = moment().add(30, 'day').format();
                    SeriesTestUtil.generateSerieWithEvents(simon.client, 1, 10, calendarStart, calendarEnd, function(series) {
                        var serie = series[0];
                        SeriesTestUtil.assertSubscribeSeries(simon.client, serie.id, simon.profile.id, null, function() {

                            // Verify the iCal feed contains the events
                            UsersTestsUtil.assertGetUserCalendarICal(simon.client, simon.profile.id, me.calendarToken, serie.events, function(calendar) {
                                return callback();
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies validation when getting a calendar
         */
        it('verify validation when getting a calendar', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, false, function(simon) {
                TestsUtil.getAnonymousAppUserClient(global.tests.apps.cam2013, function(anonymousClient) {
                    UsersTestsUtil.assertGetMe(simon.client, function(me) {

                        // Invalid user id
                        UsersTestsUtil.assertGetUserCalendarICalFails(anonymousClient, 'Not a number', me.calendarToken, 400, function() {

                            // Missing user
                            UsersTestsUtil.assertGetUserCalendarICalFails(anonymousClient, -1, me.calendarToken, 404, function() {
                                UsersTestsUtil.assertGetUserCalendarICalFails(anonymousClient, 23423424234, me.calendarToken, 404, function() {

                                    // Mising token cannot be tested as it has to be part of the path
                                    // Invalid token
                                    UsersTestsUtil.assertGetUserCalendarICalFails(anonymousClient, simon.profile.id, 'not 32 chars', 400, function() {
                                        return callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies authorization when getting a calendar
         */
        it('verify authorization when getting a calendar', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 2, false, function(simon, nicolaas) {
                TestsUtil.getAnonymousAppUserClient(global.tests.apps.cam2013, function(anonymousClient) {
                    UsersTestsUtil.assertGetMe(simon.client, function(me) {

                        // Anonymous users with an invalid token are denied
                        UsersTestsUtil.assertGetUserCalendarICalFails(anonymousClient, simon.profile.id, '12345678901234567890123456789012', 401, function() {

                            // Regular users with an invalid token are denied
                            UsersTestsUtil.assertGetUserCalendarICalFails(nicolaas.client, simon.profile.id, '12345678901234567890123456789012', 401, function() {
                                return callback();
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies the correct description is returned when getting a timetable calendar
         */
        it('verify the description when getting a timetable calendar', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, false, function(simon) {
                UsersTestsUtil.assertGetMe(simon.client, function(me) {
                    // Set up an event with lots of metadata
                    var calendarStart = moment().subtract(1, 'day').format();
                    var calendarEnd = moment().add(30, 'day').format();
                    SeriesTestUtil.generateSerieWithEvents(simon.client, 1, 1, calendarStart, calendarEnd, function(series) {
                        var serie = series[0];
                        var event = serie.events[0];
                        var type = 'Lab';
                        var notes = 'Whee, notes';
                        EventsTestsUtil.assertUpdateEvent(global.tests.admins.cam2013.client, event.id, {'notes': notes, 'type': type}, function(updatedEvent) {

                            // Subscribe on the series
                            SeriesTestUtil.assertSubscribeSeries(simon.client, serie.id, simon.profile.id, null, function() {

                                // Get the iCal feed
                                UsersTestsUtil.assertGetUserCalendarICal(simon.client, simon.profile.id, me.calendarToken, [updatedEvent], function(calendar) {

                                    // There should only be 1 event in the calendar
                                    assert.strictEqual(calendar.subComponents.length, 1);
                                    var expectedDescription = 'Lecturer: ' + event.organisers.join(', ') + '\n';
                                    expectedDescription += 'Type: ' + type + '\n\n';
                                    expectedDescription += notes;
                                    assert.strictEqual(calendar.subComponents[0].model.description, expectedDescription);

                                    // Add another lecturer
                                    var update = {'Mr Doo Little': true};
                                    EventsTestsUtil.assertUpdateEventOrganisers(global.tests.admins.cam2013.client, event.id, update, function() {
                                        EventsTestsUtil.assertGetEvent(simon.client, event.id, null, function(event) {

                                            UsersTestsUtil.assertGetUserCalendarICal(simon.client, simon.profile.id, me.calendarToken, [event], function(calendar) {

                                                // There should only be 1 event in the calendar
                                                assert.strictEqual(calendar.subComponents.length, 1);
                                                expectedDescription = 'Lecturers: ' + event.organisers.join(', ') + '\n';
                                                expectedDescription += 'Type: ' + type + '\n\n';
                                                expectedDescription += notes;
                                                assert.strictEqual(calendar.subComponents[0].model.description, expectedDescription);
                                                return callback();
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    describe('RSS', function() {

        /**
         * Test that verifies getting a calendar
         */
        it('verify getting a calendar', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, false, function(simon) {
                UsersTestsUtil.assertGetMe(simon.client, function(me) {

                    // Generate a serie and subscribe to it
                    var calendarStart = moment().subtract(1, 'day').format();
                    var calendarEnd = moment().add(30, 'day').format();
                    SeriesTestUtil.generateSerieWithEvents(simon.client, 1, 10, calendarStart, calendarEnd, function(series) {
                        var serie = series[0];
                        SeriesTestUtil.assertSubscribeSeries(simon.client, serie.id, simon.profile.id, null, function() {

                            // Verify the RSS feed contains the events
                            UsersTestsUtil.assertGetUserCalendarRss(simon.client, simon.profile.id, me.calendarToken, serie.events, function(calendar) {
                                return callback();
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies validation when getting a calendar
         */
        it('verify validation when getting a calendar', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, false, function(simon) {
                TestsUtil.getAnonymousAppUserClient(global.tests.apps.cam2013, function(anonymousClient) {
                    UsersTestsUtil.assertGetMe(simon.client, function(me) {

                        // Invalid user id
                        UsersTestsUtil.assertGetUserCalendarRssFails(anonymousClient, 'Not a number', me.calendarToken, 400, function() {

                            // Missing user
                            UsersTestsUtil.assertGetUserCalendarRssFails(anonymousClient, -1, me.calendarToken, 404, function() {
                                UsersTestsUtil.assertGetUserCalendarRssFails(anonymousClient, 23423424234, me.calendarToken, 404, function() {

                                    // Mising token cannot be tested as it has to be part of the path
                                    // Invalid token
                                    UsersTestsUtil.assertGetUserCalendarRssFails(anonymousClient, simon.profile.id, 'not 32 chars', 400, function() {
                                        return callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies authorization when getting a calendar
         */
        it('verify authorization when getting a calendar', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 2, false, function(simon, nicolaas) {
                TestsUtil.getAnonymousAppUserClient(global.tests.apps.cam2013, function(anonymousClient) {
                    UsersTestsUtil.assertGetMe(simon.client, function(me) {

                        // Anonymous users with an invalid token are denied
                        UsersTestsUtil.assertGetUserCalendarRssFails(anonymousClient, simon.profile.id, '12345678901234567890123456789012', 401, function() {

                            // Regular users with an invalid token are denied
                            UsersTestsUtil.assertGetUserCalendarRssFails(nicolaas.client, simon.profile.id, '12345678901234567890123456789012', 401, function() {
                                return callback();
                            });
                        });
                    });
                });
            });
        });
    });
});
