/**
 * Copyright (c) 2015 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var _ = require('lodash');
var assert = require('assert');
var moment = require('moment');

var TestsUtil = require('gh-tests/lib/util');

var UsersAPI = require('gh-users/lib/api');

/**
 * Assert that the correct profile fields for a user are returned
 *
 * @param  {User}               user                                The user object to verify
 * @param  {Object}             [options]                           A set of options that allow for extra assertions to be made
 * @param  {User}               [options.expectedUser]              If provided, the `user` will be compared to the `options.expectedUser`
 * @param  {Boolean}            [options.canViewPublicFields]       If `true`, basic profile fields such as `displayName` will be asserted, defaults to `true`
 * @param  {Boolean}            [options.canViewLoggedinFields]     If `true`, extra profile fields such as `shibbolethId` will be asserted, defaults to `true`
 * @param  {Boolean}            [options.canViewPrivateFields]      If `true`, extra profile fields such as `authenticationStrategy` will be asserted, defaults to `false`
 * @throws {AssertionError}                                         Error thrown when an assertion failed
 */
var assertUser = module.exports.assertUser = function(user, options) {
    options = options || {};
    if (_.isUndefined(options.canViewPublicFields)) {
        options.canViewPublicFields = true;
    }
    if (_.isUndefined(options.canViewLoggedinFields)) {
        options.canViewLoggedinFields = true;
    }
    if (_.isUndefined(options.canViewPrivateFields)) {
        options.canViewPrivateFields = false;
    }
    var publicFields = ['AppId', 'createdAt', 'displayName', 'id', 'updatedAt'];
    var loggedinFields = ['shibbolethId'];
    var privateFields = ['AppId', 'authenticationStrategy', 'calendarToken', 'createdAt', 'displayName', 'email',
                         'emailPreference', 'id', 'isAdmin', 'termsAndConditions', 'updatedAt'];

    var expectedFields = [];
    if (options.canViewPublicFields) {
        expectedFields = expectedFields.concat(publicFields);
    }
    if (options.canViewLoggedinFields) {
        expectedFields = expectedFields.concat(loggedinFields);
    }
    if (options.canViewPrivateFields) {
        expectedFields = expectedFields.concat(privateFields);
    }
    _.each(user, function(val, field) {
        // Ensure the user object is allowed to have this field
        var isAllowedField = _.contains(expectedFields, field);
        assert.ok(isAllowedField, field + ' was not expected on the user object');

        // Assert each field has the correct value
        if (options.expectedUser) {
            assert.strictEqual(val, options.expectedUser[field]);
        }
    });

    // Ensure each field is available on the user object
    _.each(expectedFields, function(field) {
        var hasField = _.has(user, field);
        assert.ok(hasField, field + ' was expected but not found on the user object');
    });
};

/**
 * Ensure the me object passes all provided assertions
 *
 * @see TestsUtil#createAssertionFunction for more information
 *
 * @param  {Me}             me          The me object on which to perform assertions
 * @param  {Object}         assertions  An object specifying the assertions to perform
 * @throws {AssertionError}             Thrown if any of the specified assertions fail
 */
var assertMe = module.exports.assertMe = TestsUtil.createAssertionFunction();

/**
 * Assert that the me feed can be retrieved
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Function}           callback                        Standard callback function
 * @param  {Object}             callback.me                     The retrieved me feed
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertGetMe = module.exports.assertGetMe = function(client, callback) {
    client.user.getMe(function(err, me) {
        assert.ok(!err);
        assert.ok(me);
        assert.ok(me.app);
        assert.ok(_.isObject(me.app));
        assert.ok(_.isString(me.app.displayName));
        return callback(me);
    });
};

/**
 * Assert that the me feed can be retrieved and equals the given me feed
 *
 * @param  {RestClient}     client          The REST client to make the request with
 * @param  {Me}             expectedMe      The expected me feed
 * @param  {Function}       callback        Invoked when the me feed assertions have passed
 * @throws {AssertionError}                 Error thrown when an assertion failed
 */
var assertGetMeEquals = module.exports.assertGetMeEquals = function(client, expectedMe, callback) {
    assertGetMe(client, function(me) {
        assertMe(me, {'equals': expectedMe});
        return callback();
    });
};

/**
 * Assert that a user can be created
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {String}             displayName                     The name of the user
 * @param  {String}             email                           The email address for the user. This will be used as the username for the user
 * @param  {String}             password                        The password with which the user will authenticate
 * @param  {Object}             options                         Optional user creation values
 * @param  {Number}             [options.app]                   The id of the app on which the user should be created. Only required when a global administrator is creating the user
 * @param  {String}             [options.emailPreference]       The email preference for the user
 * @param  {Boolean}            [options.isAdmin]               Whether the user is an app administrator
 * @param  {String}             [options.recaptchaChallenge]    The identifier for the recaptcha challenge. Only required when the current user is not an app administrator
 * @param  {String}             [options.recaptchaResponse]     The recaptcha response entered for the presented challenge. Only required when the current user is not an app administrator
 * @param  {Boolean}            [options.termsAndConditions]    Whether the user accepts the Terms and Conditions
 * @param  {Function}           callback                        Standard callback function
 * @param  {Object}             callback.user                   The basic user profile of the created test user
 */
var assertCreateUser = module.exports.assertCreateUser = function(client, displayName, email, password, options, callback) {
    client.user.createUser(displayName, email, password, options, function(err, user) {
        assert.ok(!err);
        assert.ok(user);
        assert.strictEqual(user.displayName, displayName);
        assert.strictEqual(user.email, email);
        if (options.emailPreference) {
            assert.strictEqual(user.emailPreference, options.emailPreference);
        }
        return callback(user);
    });
};

/**
 * Assert that a user can not be created
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {String}             displayName                     The name of the user
 * @param  {String}             email                           The email address for the user. This will be used as the username for the user
 * @param  {String}             password                        The password with which the user will authenticate
 * @param  {Object}             options                         Optional user creation values
 * @param  {Number}             [options.app]                   The id of the app on which the user should be created. Only required when a global administrator is creating the user
 * @param  {String}             [options.emailPreference]       The email preference for the user
 * @param  {Boolean}            [options.isAdmin]               Whether the user is an app administrator
 * @param  {String}             [options.recaptchaChallenge]    The identifier for the recaptcha challenge. Only required when the current user is not an app administrator
 * @param  {String}             [options.recaptchaResponse]     The recaptcha response entered for the presented challenge. Only required when the current user is not an app administrator
 * @param  {Boolean}            [options.termsAndConditions]    Whether the user accepts the Terms and Conditions
 * @param  {Number}             code                            The expected HTTP error code
 * @param  {Function}           callback                        Standard callback function
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertCreateUserFails = module.exports.assertCreateUserFails = function(client, displayName, email, password, options, code, callback) {
    client.user.createUser(displayName, email, password, options, function(err, user) {
        assert.ok(err);
        assert.strictEqual(err.code, code);
        assert.ok(!user);
        return callback();
    });
};

/**
 * Assert that a user can be retrieved
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Number}             id                              The id of the user to retrieve
 * @param  {Function}           callback                        Standard callback function
 * @param  {User}               callback.user                   The retrieved user
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertGetUser = module.exports.assertGetUser = function(client, id, callback) {
    client.user.getUser(id, function(err, user) {
        assert.ok(!err);
        assert.ok(user);
        return callback(user);
    });
};

/**
 * Assert that a user can not be retrieved
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Number}             id                              The id of the user to retrieve
 * @param  {Number}             code                            The expected HTTP error code
 * @param  {Function}           callback                        Standard callback function
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertGetUserFails = module.exports.assertGetUserFails = function(client, id, code, callback) {
    client.user.getUser(id, function(err, user) {
        assert.ok(err);
        assert.strictEqual(err.code, code);
        assert.ok(!user);
        return callback();
    });
};

/**
 * Assert that a user can be updated
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Number}             id                              The id of the user to update
 * @param  {Object}             update                          The updates to make
 * @param  {String}             [update.displayName]            The updated displayName
 * @param  {String}             [update.email]                  The updated email
 * @param  {String}             [update.emailPreference]        The updated email preference
 * @param  {Function}           callback                        Standard callback function
 * @param  {User}               callback.user                   The updated user
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertUpdateUser = module.exports.assertUpdateUser = function(client, id, update, callback) {
    client.user.updateUser(id, update, function(err, user) {
        assert.ok(!err);
        assert.ok(user);

        // Assert the updates are persisted
        assertGetUser(client, id, function(user) {
            if (update.displayName) {
                assert.strictEqual(user.displayName, update.displayName);
            }
            if (update.email) {
                assert.strictEqual(user.email, update.email);
            }
            if (update.emailPreference) {
                assert.strictEqual(user.emailPreference, update.emailPreference);
            }

            return callback(user);
        });
    });
};

/**
 * Assert that a user can not be updated
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Number}             id                              The id of the user to update
 * @param  {Object}             update                          The updates to make
 * @param  {String}             [update.displayName]            The updated displayName
 * @param  {String}             [update.email]                  The updated email
 * @param  {String}             [update.emailPreference]        The updated email preference
 * @param  {Number}             code                            The expected HTTP error code
 * @param  {Function}           callback                        Standard callback function
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertUpdateUserFails = module.exports.assertUpdateUserFails = function(client, id, update, code, callback) {
    client.user.updateUser(id, update, function(err, user) {
        assert.ok(err);
        assert.strictEqual(err.code, code);
        assert.ok(!user);
        return callback();
    });
};

/**
 * Assert that the app administrator status for a user can be updated
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Number}             id                              The id of the user to update the app administrator status for
 * @param  {Boolean}            admin                           Whether the user should be an app administrator
 * @param  {Function}           callback                        Standard callback function
 * @param  {User}               callback.user                   The updated user
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertUpdateAdminStatus = module.exports.assertUpdateAdminStatus = function(client, id, admin, callback) {
    client.user.updateAdminStatus(id, admin, function(err, user) {
        assert.ok(!err);
        assert.ok(user);
        assert.strictEqual(user.isAdmin, admin);

        // Verify the change was persisted
        assertGetUser(client, id, function(user) {
            assert.strictEqual(user.isAdmin, admin);

            return callback(user);
        });
    });
};

/**
 * Assert that the app administrator status for a user can not be updated
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Number}             id                              The id of the user to update the app administrator status for
 * @param  {Boolean}            admin                           Whether the user should be an app administrator
 * @param  {Number}             code                            The expected HTTP error code
 * @param  {Function}           callback                        Standard callback function
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertUpdateAdminStatusFails = module.exports.assertUpdateAdminStatusFails = function(client, id, admin, code, callback) {
    client.user.updateAdminStatus(id, admin, function(err, user) {
        assert.ok(err);
        assert.strictEqual(err.code, code);
        assert.ok(!user);
        return callback();
    });
};

/**
 * Assert that the users for an application can be retrieved
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Number}             [app]                           The id of the app to get the users for
 * @param  {String}             [query]                         The string to query users by
 * @param  {Number}             [limit]                         The maximum number of results to retrieve. Defaults to 10
 * @param  {Number}             [offset]                        The number to start paging from. Defaults to 0
 * @param  {Function}           callback                        Standard callback function
 * @param  {User[]}             callback.users                  The users in the application
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertGetUsers = module.exports.assertGetUsers = function(client, app, query, limit, offset, callback) {
    client.user.getUsers(app, query, limit, offset, function(err, users) {
        assert.ok(!err);
        assert.ok(users);
        return callback(users);
    });
};

/**
 * Assert that the users for an application can not be retrieved
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Number}             [app]                           The id of the app to get the users for
 * @param  {String}             [query]                         The string to query users by
 * @param  {Number}             [limit]                         The maximum number of results to retrieve. Defaults to 10
 * @param  {Number}             [offset]                        The number to start paging from. Defaults to 0
 * @param  {Number}             code                            The expected HTTP error code
 * @param  {Function}           callback                        Standard callback function
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertGetUsersFails = module.exports.assertGetUsersFails = function(client, app, query, limit, offset, code, callback) {
    client.user.getUsers(app, query, limit, offset, function(err, users) {
        assert.ok(err);
        assert.strictEqual(err.code, code);
        assert.ok(!users);
        return callback(users);
    });
};

/**
 * Assert that a user can accept the Terms and Conditions
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Number}             id                              The id of the user for which to accept the Terms and Conditions
 * @param  {Function}           callback                        Standard callback function
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertAcceptTermsAndConditions = module.exports.assertAcceptTermsAndConditions = function(client, id, callback) {
    // Get the user profile so we can check whether the timestamp when they accepted
    // the Terms and Conditions gets updated
    assertGetUser(client, id, function(user) {
        // Default the start timestamp to the current timestamp. This happens when a user hasn't
        // accepted the Terms and Conditions before
        var start = user.termsAndConditions || moment();

        // Introduce an artificial delay to avoid intermittent test failures
        setTimeout(function() {

            // Accept the Terms and Conditions
            client.user.acceptTermsAndConditions(id, function(err, termsAndConditionsStatus) {
                assert.ok(!err);
                assert.ok(_.isObject(termsAndConditionsStatus));
                assert.ok(_.isString(termsAndConditionsStatus.accepted));
                assert.strictEqual(termsAndConditionsStatus.needsToAccept, false);
                TestsUtil.assertTimestamp(termsAndConditionsStatus.accepted, {
                    'after': start
                });

                // Assert that the timestamp of when the Terms and Conditions were accepted
                // are persisted on the user profile
                assertGetUser(client, id, function(user) {
                    assert.strictEqual(user.termsAndConditions, termsAndConditionsStatus.accepted);
                    return callback();
                });
            });
        }, 5);
    });
};

/**
 * Assert that a user cannot accept the Terms and Conditions
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Number}             id                              The id of the user for which to accept the Terms and Conditions
 * @param  {Number}             code                            The expected HTTP error code
 * @param  {Function}           callback                        Standard callback function
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertAcceptTermsAndConditionsFails = module.exports.assertAcceptTermsAndConditionsFails = function(client, id, code, callback) {
    client.user.acceptTermsAndConditions(id, function(err, termsAndConditionsStatus) {
        assert.ok(err);
        assert.strictEqual(err.code, code);
        assert.ok(!termsAndConditionsStatus);
        return callback();
    });
};

/**
 * Assert that a set of users can be imported into an application
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Stream}             stream                          A stream that points to a CSV file
 * @param  {Number}             app                             The id of the application into which the users should be imported. Defaults to the current application
 * @param  {String}             authenticationStrategy          The authentication strategy for the user. One of `local` or `shibboleth`
 * @param  {Boolean}            [forceProfileUpdate]            Whether the user information should be updated, even when other user information is already present. Defaults to `false`
 * @param  {Function}           callback                        Standard callback function
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertImportUsers = module.exports.assertImportUsers = function(client, stream, app, authenticationStrategy, forceProfileUpdate, callback) {
    client.user.importUsers(stream, app, authenticationStrategy, forceProfileUpdate, function(err) {
        assert.ok(!err);

        // Return to the caller when all users have been imported
        UsersAPI.once('postImportUsers', function(err) {
            assert.ok(!err);

            return callback();
        });
    });
};

/**
 * Assert that a set of users can not be imported into an application
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Stream}             stream                          A stream that points to a CSV file
 * @param  {Number}             app                             The id of the application into which the users should be imported. Defaults to the current application
 * @param  {String}             authenticationStrategy          The authentication strategy for the user. One of `local` or `shibboleth`
 * @param  {Boolean}            [forceProfileUpdate]            Whether the user information should be updated, even when other user information is already present. Defaults to `false`
 * @param  {Number}             code                            The expected HTTP error code
 * @param  {Function}           callback                        Standard callback function
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertImportUsersFails = module.exports.assertImportUsersFails = function(client, stream, app, authenticationStrategy, forceProfileUpdate, code, callback) {
    client.user.importUsers(stream, app, authenticationStrategy, forceProfileUpdate, function(err) {
        assert.ok(err);
        assert.strictEqual(err.code, code);
        return callback();
    });
};

/**
 * Assert that the calendar token for a user can be reset
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Number}             id                              The id of the user to reset the calendar token for
 * @param  {Function}           callback                        Standard callback function
 * @param  {User}               callback.user                   The updated user
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertResetUserCalendarToken = module.exports.assertResetUserCalendarToken = function(client, id, callback) {
    client.user.resetUserCalendarToken(id, function(err, user) {
        assert.ok(!err);
        assert.ok(user);

        // TODO: Once the /api/users/:id endpoint is implemented we should verify that the token has been reset
        return callback(user);
    });
};

/**
 * Assert that the calendar token for a user can not be reset
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Number}             id                              The id of the user to reset the calendar token for
 * @param  {Number}             code                            The expected HTTP error code
 * @param  {Function}           callback                        Standard callback function
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertResetUserCalendarTokenFails = module.exports.assertResetUserCalendarTokenFails = function(client, id, code, callback) {
    client.user.resetUserCalendarToken(id, function(err, user) {
        assert.ok(err);
        assert.strictEqual(err.code, code);
        assert.ok(!user);
        return callback();
    });
};

/**
 * Assert that the calendar for a user can be retrieved
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Number}             id                              The id of the user to get the calendar for
 * @param  {String}             start                           The timestamp (ISO 8601) from which to get the calendar for the user
 * @param  {String}             end                             The timestamp (ISO 8601) until which to get the calendar for the user
 * @param  {Event[]}            expectedEvents                  A set of events that should be in the calendar
 * @param  {Function}           callback                        Standard callback function
 * @param  {Event[]}            callback.calendar               The retrieved calendar
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertGetUserCalendar = module.exports.assertGetUserCalendar = function(client, id, start, end, expectedEvents, callback) {
    client.user.getUserCalendar(id, start, end, function(err, calendar) {
        assert.ok(!err);
        assert.ok(calendar);
        assert.ok(calendar.results);
        assert.ok(_.isArray(calendar.results));

        // Assert the calendar contains the expected events
        if (expectedEvents) {
            _.each(expectedEvents, function(event) {
                assert.ok(_.find(calendar.results, {'id': event.id}));
            });
        }

        // Assert only the required information is returned
        var allowedEventKeys = ['id', 'displayName', 'location', 'start', 'end', 'organisers', 'updatedAt', 'context', 'type', 'description', 'notes'];
        var allowedContextKeys = ['id', 'ParentId', 'displayName', 'type'];
        _.each(calendar.results, function(event) {
            _.each(event, function(val, key) {
                assert.ok(_.contains(allowedEventKeys, key), key + ' is not allowed as an event property in a calendar');
            });
            if (event.context) {
                _.each(event.context, function(val, key) {
                    assert.ok(_.contains(allowedContextKeys, key), key + ' is not allowed as an event\'s context property in a calendar');
                });
            }
        });

        return callback(calendar);
    });
};

/**
 * Assert that the calendar for a user can not be retrieved
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Number}             id                              The id of the user to get the calendar for
 * @param  {String}             start                           The timestamp (ISO 8601) from which to get the calendar for the user
 * @param  {String}             end                             The timestamp (ISO 8601) until which to get the calendar for the user
 * @param  {Number}             code                            The expected HTTP error code
 * @param  {Function}           callback                        Standard callback function
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertGetUserCalendarFails = module.exports.assertGetUserCalendarFails = function(client, id, start, end, code, callback) {
    client.user.getUserCalendar(id, start, end, function(err, calendar) {
        assert.ok(err);
        assert.strictEqual(err.code, code);
        assert.ok(!calendar);
        return callback();
    });
};

/**
 * Assert that the iCal calendar for a user can be retrieved
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Number}             id                              The id of the user to get the calendar for
 * @param  {String}             token                           The access control token
 * @param  {Event[]}            expectedEvents                  A set of events that should be in the calendar
 * @param  {Function}           callback                        Standard callback function
 * @param  {String}             callback.calendar               The retrieved calendar
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertGetUserCalendarICal = module.exports.assertGetUserCalendarICal = function(client, id, token, expectedEvents, callback) {
    // Get the user's information
    assertGetUser(client, id, function(user) {

        // Get the me feed so we have access to the application's display name
        assertGetMe(client, function(me) {

            client.user.getUserCalendarICal(id, token, function(err, calendar, response) {
                assert.ok(!err);
                assert.ok(calendar);

                // Assert the response is iCal
                assert.strictEqual(response.headers['content-type'], 'text/calendar; charset=utf-8');

                // Parse the iCal calendar
                TestsUtil.parseIcalCalendar(calendar, me.app.displayName, user.displayName, function(calendar) {

                    // Check if the returned events are the ones we expected
                    if (expectedEvents) {
                        assert.strictEqual(calendar.subComponents.length, expectedEvents.length);
                        _.each(calendar.subComponents, function(subComponent, i) {
                            var id = parseInt(subComponent.model.uid, 10);
                            assert.strictEqual(id, expectedEvents[i].id);
                            assert.strictEqual(subComponent.model.summary, expectedEvents[i].displayName);
                        });
                    }

                    return callback(calendar);
                });
            });
        });
    });
};

/**
 * Assert that the iCal calendar for a user can not be retrieved
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Number}             id                              The id of the user to get the calendar for
 * @param  {String}             token                           The access control token
 * @param  {Number}             code                            The expected HTTP error code
 * @param  {Function}           callback                        Standard callback function
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertGetUserCalendarICalFails = module.exports.assertGetUserCalendarICalFails = function(client, id, token, code, callback) {
    client.user.getUserCalendarICal(id, token, function(err, calendar) {
        assert.ok(err);
        assert.strictEqual(err.code, code);
        assert.ok(!calendar);
        return callback();
    });
};

/**
 * Assert that the RSS calendar for a user can be retrieved
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Number}             id                              The id of the user to get the calendar for
 * @param  {String}             token                           The access control token
 * @param  {Event[]}            expectedEvents                  A set of events that should be in the calendar
 * @param  {Function}           callback                        Standard callback function
 * @param  {String}             callback.calendar               The retrieved calendar
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertGetUserCalendarRss = module.exports.assertGetUserCalendarRss = function(client, id, token, expectedEvents, callback) {
    client.user.getUserCalendarRss(id, token, function(err, calendar, response) {
        assert.ok(!err);
        assert.ok(calendar);

        // Assert the response is RSS
        assert.strictEqual(response.headers['content-type'], 'application/rss+xml; charset=utf-8');

        // Parse the RSS calendar
        TestsUtil.parseRssCalendar(calendar, function(calendar) {

            // Check if the returned events are the ones we expected
            if (expectedEvents) {
                if (_.isEmpty(expectedEvents)) {
                    // If no items should be returned, the RSS feed will not contain an `<item>` tag
                    assert.ok(!calendar.item);
                } else {
                    assert.strictEqual(calendar.item.length, expectedEvents.length);
                    _.each(calendar.item, function(item, i) {
                        var guid = item.guid[0];
                        var id = parseInt(guid.split('/').pop(), 10);
                        assert.strictEqual(id, expectedEvents[i].id);
                        assert.strictEqual(item.title[0], expectedEvents[i].displayName);
                        assert.strictEqual(item['ev:organizer'][0], expectedEvents[i].organisers.sort().join());
                    });
                }
            }

            return callback(calendar);
        });
    });
};

/**
 * Assert that the RSS calendar for a user can not be retrieved
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Number}             id                              The id of the user to get the calendar for
 * @param  {String}             token                           The access control token
 * @param  {Number}             code                            The expected HTTP error code
 * @param  {Function}           callback                        Standard callback function
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertGetUserCalendarRssFails = module.exports.assertGetUserCalendarRssFails = function(client, id, token, code, callback) {
    client.user.getUserCalendarRss(id, token, function(err, calendar) {
        assert.ok(err);
        assert.strictEqual(err.code, code);
        assert.ok(!calendar);
        return callback();
    });
};
