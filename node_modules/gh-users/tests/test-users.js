/**
 * Copyright (c) 2014 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var assert = require('assert');

var TestsUtil = require('gh-tests/lib/util');

var UsersTestsUtil = require('./util');

describe('Users', function() {

    describe('Creating a user', function() {

        /**
         * Test that verifies that a user can be created
         */
        it('verify a user can be created', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2014, 1, false, function(simon) {
                assert.ok(simon);

                UsersTestsUtil.assertGetMe(simon.client, function(me) {
                    assert.strictEqual(me.displayName, simon.profile.displayName);
                    return callback();
                });
            });
        });
    });

    describe('Updating a user', function() {

        /**
         * Test that verifies that a user can be updated
         */
        it('verify a user can be updated', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2014, 1, false, function(simon) {
                assert.ok(simon);

                // Update the user
                var update = {
                    'displayName': 'Simon',
                    'email': TestsUtil.generateTestEmailAddress()
                };
                UsersTestsUtil.assertUpdateUser(simon.client, simon.profile.id, update, function(updatedUser) {

                    // Verify the update has been persisted
                    UsersTestsUtil.assertGetMe(simon.client, function(me) {
                        assert.strictEqual(me.displayName, update.displayName);
                        assert.strictEqual(me.email, update.email);
                        return callback();
                    });
                });
            });
        });

        /**
         * Test that verifies validation when updating a user
         */
        it('verify validation when updating a user', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2014, 1, false, function(simon) {

                // Invalid user id
                UsersTestsUtil.assertUpdateUserFails(simon.client, 'Not a number', {'displayName': 'bleh'}, 400, function() {
                    // Unknown user id
                    UsersTestsUtil.assertUpdateUserFails(simon.client, -1, {'displayName': 'bleh'}, 404, function() {

                        // Missing update parameters
                        UsersTestsUtil.assertUpdateUserFails(simon.client, simon.profile.id, {}, 400, function() {

                            // Unknown update parameter
                            UsersTestsUtil.assertUpdateUserFails(simon.client, simon.profile.id, {'foo': 'bar'}, 400, function() {

                                // Missing value
                                UsersTestsUtil.assertUpdateUserFails(simon.client, simon.profile.id, {'displayName': null}, 400, function() {

                                    // Invalid parameters
                                    UsersTestsUtil.assertUpdateUserFails(simon.client, simon.profile.id, {'email': 'not an email address'}, 400, function() {
                                        UsersTestsUtil.assertUpdateUserFails(simon.client, simon.profile.id, {'emailPreference': 'lolwhat'}, 400, function() {
                                            return callback();
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies authorization when updating a user
         */
        it('verify authorization when updating a user', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2014, 2, false, function(simon, nico) {
                assert.ok(simon);

                // Update the user
                var update = {
                    'displayName': 'Simon',
                    'email': TestsUtil.generateTestEmailAddress()
                };

                // Anonymous users can't update other users
                TestsUtil.getAnonymousAppUserClient(global.tests.apps.cam2014, function(anonymousClient) {
                    UsersTestsUtil.assertUpdateUserFails(anonymousClient, simon.profile.id, update, 401, function() {
                        TestsUtil.getAnonymousGlobalAdminRestClient(function(anonymousGlobalAdminClient) {
                            UsersTestsUtil.assertUpdateUserFails(anonymousGlobalAdminClient, simon.profile.id, update, 401, function() {

                                // Regular users can't update other users
                                UsersTestsUtil.assertUpdateUserFails(nico.client, simon.profile.id, update, 401, function() {

                                    // Application admins can't update users from other applications
                                    UsersTestsUtil.assertUpdateUserFails(global.tests.admins.oxford2013.client, simon.profile.id, update, 401, function() {

                                        // Users can update their own profile
                                        UsersTestsUtil.assertUpdateUser(simon.client, simon.profile.id, update, function() {

                                            // App admins can update users from their application
                                            UsersTestsUtil.assertUpdateUser(global.tests.admins.cam2014.client, simon.profile.id, update, function() {

                                                // Global admins can update users
                                                TestsUtil.getGlobalAdminRestClient(function(globalAdminClient) {
                                                    UsersTestsUtil.assertUpdateUser(globalAdminClient, simon.profile.id, update, function() {

                                                        return callback();
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });
});
