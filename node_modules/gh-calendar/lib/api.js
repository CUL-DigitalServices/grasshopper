/**
 * Copyright (c) 2014 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var _ = require('lodash');

var GrasshopperUtil = require('gh-core/lib/util');
var log = require('gh-core/lib/logger').logger('gh-calendar');
var UsersAPI = require('gh-users');
var Validator = require('gh-core/lib/validator').Validator;

var CalendarAuthz = require('./authz');
var CalendarDAO = require('./internal/dao');

/**
 * Get the calendar for a user
 *
 * @param  {User}       user                The user for whom to retrieve the calendar
 * @param  {String}     start               The timestamp (ISO 8601) from which to get the calendar for the user
 * @param  {String}     end                 The timestamp (ISO 8601) until which to get the calendar for the user
 * @param  {Function}   callback            Standard callback function
 * @param  {Object}     callback.err        An error object, if any
 * @param  {Event[]}    callback.events     The events in a user's calendar
 */
var getUserCalendar = module.exports.getUserCalendar = function(ctx, id, start, end, callback) {
    // Ensure that the user id is a valid number
    id = GrasshopperUtil.getNumberParam(id);

    var validator = new Validator();
    validator.check(null, {'code': 401, 'msg': 'Only authenticated users can retrieve a user\'s calendar'}).isLoggedInUser(ctx);
    validator.check(id, {'code': 400, 'msg': 'A valid user id must be provided'}).isInt();
    validator.check(start, {'code': 400, 'msg': 'A start time must be provided in a valid date format'}).isDate();
    validator.check(end, {'code': 400, 'msg': 'An end time must be provided in a valid date format'}).isDate();
    validator.check(start, {'code': 400, 'msg': 'The start time must be before the end time'}).isBefore(end);
    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    }

    // Ensure the user exists
    UsersAPI.getUser(id, function(err, user) {
        if (err) {
            return callback(err);
        }

        CalendarAuthz.canGetUserCalendar(ctx, user, function(err, canGetCalendar) {
            if (err) {
                return callback(err);
            } else if (!canGetCalendar) {
                log().warn({'id': id, 'actor': ctx.user.id}, 'Unauthorized attempt at retrieving a user\'s calendar');
                return callback({'code': 401, 'msg': 'You are not allowed to retrieve this user\'s calendar'});
            }

            return _getUserCalendar(user, start, end, callback);
        });
    });
};

/**
 * Internal function that gets the calendar for a user. This function
 * will not perform any validation or authz checks
 *
 * @param  {User}       user                The user for whom to retrieve the calendar
 * @param  {String}     [start]             The timestamp (ISO 8601) from which to get the calendar for the user
 * @param  {String}     [end]               The timestamp (ISO 8601) until which to get the calendar for the user
 * @param  {Function}   callback            Standard callback function
 * @param  {Object}     callback.err        An error object, if any
 * @param  {Event[]}    callback.events     The events in a user's calendar
 * @api private
 */
var _getUserCalendar = function(user, start, end, callback) {
    // Get the user's calendar
    CalendarDAO.getUserCalendar(user, start, end, function(err, calendar) {
        if (err) {
            return callback(err);
        } else if (!calendar) {
            return callback(null, []);
        }

        // Flatten the calendar into a simple event list
        var events = calendar.Events;
        _.each(calendar.Series, function(serie) {
            if (serie.Events) {
                events = events.concat(serie.Events);
            }
        });

        // Sort the events on their start date
        events = _.sortBy(events, 'start');

        return callback(null, events);
    });
};
