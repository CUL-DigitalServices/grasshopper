/**
 * Copyright (c) 2014 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var DB = require('gh-core/lib/db');
var log = require('gh-core/lib/logger').logger('gh-calendar');

/**
 * Get the calendar for a user
 *
 * @param  {User}       user                The user whose calendar to retrieve
 * @param  {String}     [start]             The timestamp (ISO 8601) from which to get the calendar for the user
 * @param  {String}     [end]               The timestamp (ISO 8601) until which to get the calendar for the user
 * @param  {Function}   callback            Standard callback function
 * @param  {Object}     callback.err        An error object, if any
 * @param  {Calendar}   callback.calendar   The user's calendar
 */
var getUserCalendar = module.exports.getUserCalendar = function(user, start, end, callback) {
    var dateTimeFilter = {};
    if (start) {
        dateTimeFilter.start = {'gte': start};
    }
    if (end) {
        dateTimeFilter.end = {'lte': end};
    }

    var options = {
        // Adding `required` into the model inclusions forces Sequelize to use a
        // `left outer join` to connect the Serie/Events. If these were to be omitted,
        // Sequelize would use an `inner join` which would always result in 0 rows
        'include': [
            {'model': DB.Serie, 'required': false, 'include': [
                {'model': DB.Event, 'where': dateTimeFilter, 'required': false, 'include': [
                    {'model': DB.User, 'as': 'Organisers', 'required': false}
                ]}
            ]},
            {'model': DB.Event, 'where': dateTimeFilter, 'required': false, 'include': [
                {'model': DB.User, 'as': 'Organisers', 'required': false}
            ]}
        ],

        // We need to add a limit so Sequelize avoids doing a subquery to get the calendar row
        // @see: https://github.com/sequelize/sequelize/issues/2698
        'limit': null
    };
    user.getCalendar(options).complete(function(err, calendar) {
        if (err) {
            log().error({'err': err, 'user': user.id}, 'Could not get a user\'s calendar');
            return callback({'code': 500, 'msg': 'Could not get a user\'s calendar'});
        }

        return callback(null, calendar);
    });
};

/**
 * Subscribe a user to an event series
 *
 * @param  {Serie}      serie           The serie to subscribe the user to
 * @param  {User}       user            The user that needs to be subscribed to a serie
 * @param  {Function}   callback        Standard callback function
 * @param  {Object}     callback.err    An error object, if any
 */
var subscribeSeries = module.exports.subscribeSeries = function(serie, user, callback) {
    // Get the user's calendar
    _getOrCreateCalendar(user, function(err, calendar) {
        if (err) {
            return callback(err);
        }

        // Add the serie to the calendar
        calendar.addSerie(serie).complete(function(err) {
            if (err) {
                log().error({'err': err, 'serie': serie.id, 'user': user.id}, 'Error when subscribing a user to a calendar');
                return callback({'code': 500, 'msg': 'Error when subscribing a user to a calendar'});
            }

            return callback();
        });
    });
};

/**
 * Unsubscribe a user from an event series
 *
 * @param  {Serie}      serie           The serie to unsubscribe the user from
 * @param  {User}       user            The user that needs to be unsubscribed from a serie
 * @param  {Function}   callback        Standard callback function
 * @param  {Object}     callback.err    An error object, if any
 */
var unsubscribeSeries = module.exports.unsubscribeSeries = function(serie, user, callback) {
    // Get the user's calendar
    _getOrCreateCalendar(user, function(err, calendar) {
        if (err) {
            return callback(err);
        }

        // Remove the serie from the calendar
        calendar.removeSerie(serie).complete(function(err) {
            if (err) {
                log().error({'err': err, 'serie': serie.id, 'user': user.id}, 'Error when unsubscribing a user from a calendar');
                return callback({'code': 500, 'msg': 'Error when unsubscribing a user from a calendar'});
            }

            return callback();
        });
    });
};

/**
 * Get or create the calendar for a user
 *
 * @param  {User}       user                The user whose calendar to retrieve
 * @param  {Function}   callback            Standard callback function
 * @param  {Object}     callback.err        An error object, if any
 * @param  {Calendar}   callback.calendar   The user's calendar
 * @api private
 */
var _getOrCreateCalendar = function(user, callback) {
    var options = {
        'where': {'UserId': user.id},
    };
    DB.Calendar.findOrCreate(options).complete(function(err, data) {
        if (err) {
            log().error({'err': err, 'user': user.id}, 'Could not get or create a user\'s calendar');
            return callback({'code': 500, 'msg': err.msg});
        }

        var calendar = data[0];
        var wasCreated = data[1];
        if (wasCreated) {
            log().debug({'user': user.id}, 'Created a calendar for a user');
        }

        return callback(null, calendar);
    });
};
