/**
 * Copyright (c) 2015 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var _ = require('lodash');
var assert = require('assert');

/**
 * Assert that the groups of a user can be retrieved
 *
 * @param  {RestClient}         client                  The REST client to make the request with
 * @param  {Number}             id                      The id of the user to get the memberships of
 * @param  {Number}             [limit]                 The amount of groups that should be returned
 * @param  {Number}             [offset]                The paging number of the results to retrieve
 * @param  {Function}           callback                Standard callback function
 * @param  {Group[]}            callback.memberships    The groups the user is a member of
 * @throws {AssertionError}                             Error thrown when an assertion failed
 */
var assertGetUserMemberships = module.exports.assertGetUserMemberships = function(client, id, limit, offset, callback) {
    client.group.getUserMemberships(id, limit, offset, function(err, memberships) {
        assert.ok(!err);
        assert.ok(memberships);
        assert.ok(memberships.results);
        return callback(memberships.results);
    });
};

/**
 * Assert that the groups of a user can not be retrieved
 *
 * @param  {RestClient}         client                  The REST client to make the request with
 * @param  {Number}             id                      The id of the user to get the memberships of
 * @param  {Number}             [limit]                 The amount of groups that should be returned
 * @param  {Number}             [offset]                The paging number of the results to retrieve
 * @param  {Number}             code                    The expected HTTP error code
 * @param  {Function}           callback                Standard callback function
 * @throws {AssertionError}                             Error thrown when an assertion failed
 */
var assertGetUserMembershipsFails = module.exports.assertGetUserMembershipsFails = function(client, id, limit, offset, code, callback) {
    client.group.getUserMemberships(id, limit, offset, function(err, memberships) {
        assert.ok(err);
        assert.strictEqual(err.code, code);
        assert.ok(!memberships);

        return callback();
    });
};

/**
 * Assert that all the groups a user is a member of can be retrieved
 *
 * @param  {RestClient}         client                      The REST client to make the request with
 * @param  {Number}             id                          The id of the user to get the memberships of
 * @param  {Function}           callback                    Standard callback function
 * @param  {Group[]}            callback.allMemberships     All the groups the user is a member of
 * @throws {AssertionError}                                 Error thrown when an assertion failed
 */
var assertGetAllUserMemberships = module.exports.assertGetAllUserMemberships = function(client, id, callback, _offset, _allMemberships) {
    _offset = _offset || 0;
    _allMemberships = _allMemberships || [];

    assertGetUserMemberships(client, id, 25, _offset, function(memberships) {
        // If no extra memberships were returned, we return to the caller
        if (_.isEmpty(memberships)) {
            return callback(_allMemberships);

        // Otherwise we try to fetch the next batch of memberships
        } else {
            _allMemberships = _.union(_allMemberships, memberships);
            assertGetAllUserMemberships(client, id, callback, _offset + 25, _allMemberships);
        }
    });
};

/**
 * Assert that the groups of a user match a given set of groups
 *
 * @param  {RestClient}         client                  The REST client to make the request with
 * @param  {Number}             id                      The id of the user to get the memberships of
 * @param  {Number}             [limit]                 The amount of groups that should be returned
 * @param  {Number}             [offset]                The paging number of the results to retrieve
 * @param  {Number[]}           [expectedMemberships]   The expected ids of the groups a user is a member of
 * @param  {Function}           callback                Standard callback function
 * @param  {Group[]}            callback.memberships    The groups the user is a member of
 * @throws {AssertionError}                             Error thrown when an assertion failed
 */
var assertGetUserMembershipsEquals = module.exports.assertGetUserMembershipsEquals = function(client, id, limit, offset, expectedMemberships, callback) {
    assertGetUserMemberships(client, id, limit, offset, function(memberships) {
        var membershipsIds = _.pluck(memberships, 'id').sort();
        assert.deepEqual(membershipsIds, expectedMemberships);
        return callback(memberships);
    });
};

/**
 * Assert that the members of a group can be retrieved
 *
 * @param  {RestClient}         client                  The REST client to make the request with
 * @param  {Number}             id                      The id of the group to get the members of
 * @param  {Number}             [limit]                 The amount of members that should be returned
 * @param  {Number}             [offset]                The paging number of the results to retrieve
 * @param  {User[]}             [expectedMembers]       The expected members
 * @param  {Function}           callback                Standard callback function
 * @param  {Object}             callback.members        The members of the group
 * @throws {AssertionError}                             Error thrown when an assertion failed
 */
var assertGetGroupMembers = module.exports.assertGetGroupMembers = function(client, id, limit, offset, expectedMembers, callback) {
    client.group.getGroupMembers(id, limit, offset, function(err, members) {
        assert.ok(!err);
        assert.ok(members);
        assert.ok(members.results);

        if (expectedMembers) {
            assert.strictEqual(members.results.length, expectedMembers.length);
            _.each(members.results, function(member) {
                assert.ok(_.find(expectedMembers, {'id': member.id}));
            });
        }

        return callback(members);
    });
};

/**
 * Assert that the members of a group can not be retrieved
 *
 * @param  {RestClient}         client                  The REST client to make the request with
 * @param  {Number}             id                      The id of the group to get the members of
 * @param  {Number}             [limit]                 The amount of groups that should be returned, defaults to 50
 * @param  {Number}             [offset]                The paging number of the results to retrieve
 * @param  {Number}             code                    The expected HTTP error code
 * @param  {Function}           callback                Standard callback function
 * @throws {AssertionError}                             Error thrown when an assertion failed
 */
var assertGetGroupMembersFails = module.exports.assertGetGroupMembersFails = function(client, id, limit, offset, code, callback) {
    client.group.getGroupMembers(id, limit, offset, function(err, members) {
        assert.ok(err);
        assert.strictEqual(err.code, code);
        return callback();
    });
};

/**
 * Assert that all the members of a group can be retrieved
 *
 * @param  {RestClient}         client                  The REST client to make the request with
 * @param  {Number}             id                      The id of the group to get the members of
 * @param  {Function}           callback                Standard callback function
 * @param  {User[]}             callback.allMembers     All the members of the group
 * @throws {AssertionError}                             Error thrown when an assertion failed
 */
var assertGetAllGroupMembers = module.exports.assertGetAllGroupMembers = function(client, id, callback, _offset, _allMembers) {
    _offset = _offset || 0;
    _allMembers = _allMembers || [];

    assertGetGroupMembers(client, id, 25, _offset, null, function(members) {
        // If no extra members were returned, we return to the caller
        if (_.isEmpty(members.results)) {
            return callback(_allMembers);

        // Otherwise we try to fetch the next batch of members
        } else {
            _allMembers = _.union(_allMembers, members.results);
            assertGetAllGroupMembers(client, id, callback, _offset + 25, _allMembers);
        }
    });
};

/**
 * Assert a group's members can be updated
 *
 * @param  {RestClient}         client              The REST client to make the request with
 * @param  {Number}             id                  The id of the group to update
 * @param  {Object}             update              The members to add to or remove from the group. The keys should hold the user ids and the value should be a boolean indicating whether the user should be added(true) or removed(false)
 * @param  {Function}           callback            Standard callback function
 * @throws {AssertionError}                         Error thrown when an assertion failed
 */
var assertUpdateGroupMembers = module.exports.assertUpdateGroupMembers = function(client, id, update, callback) {
    // Update the group's members
    client.group.updateGroupMembers(id, update, function(err) {
        assert.ok(!err);

        // Get all the members of the group
        assertGetAllGroupMembers(client, id, function(members) {
            _.each(update, function(change, userId) {
                // If the user was added, ensure the user is a member of the group
                if (change) {
                    assert.ok(_.find(members, {'id': _.parseInt(userId)}));
                } else {
                    assert.ok(!_.find(members, {'id': _.parseInt(userId)}));
                }
            });

            return callback();
        });
    });
};

/**
 * Assert a group's members can not be updated
 *
 * @param  {RestClient}         client              The REST client to make the request with
 * @param  {Number}             id                  The id of the group to update
 * @param  {Object}             update              The members to add to or remove from the group. The keys should hold the user ids and the value should be a boolean indicating whether the user should be added(true) or removed(false)
 * @param  {Number}             code                The expected HTTP error code
 * @param  {Function}           callback            Standard callback function
 * @throws {AssertionError}                         Error thrown when an assertion failed
 */
var assertUpdateGroupMembersFails = module.exports.assertUpdateGroupMembersFails = function(client, id, update, code, callback) {
    client.group.updateGroupMembers(id, update, function(err) {
        assert.ok(err);
        assert.strictEqual(err.code, code);
        return callback();
    });
};

/**
 * Assert a group can be locked
 *
 * @param  {RestClient}         client              The REST client to make the request with
 * @param  {Number}             id                  The id of the group to lock
 * @param  {Function}           callback            Standard callback function
 */
var assertLock = module.exports.assertLock = function(client, id, callback) {
    client.group.lock(id, function(err) {
        assert.ok(!err);
        return callback();
    });
};

/**
 * Assert a group can not be locked
 *
 * @param  {RestClient}         client              The REST client to make the request with
 * @param  {Number}             id                  The id of the group to lock
 * @param  {Number}             code                The expected HTTP error code
 * @param  {Function}           callback            Standard callback function
 */
var assertLockFails = module.exports.assertLockFails = function(client, id, code, callback) {
    client.group.lock(id, function(err) {
        assert.ok(err);
        assert.strictEqual(err.code, code);
        return callback();
    });
};

/**
 * Assert the lock on a group can be released
 *
 * @param  {RestClient}         client              The REST client to make the request with
 * @param  {Number}             id                  The id of the group to release the lock from
 * @param  {Function}           callback            Standard callback function
 */
var assertReleaseLock = module.exports.assertReleaseLock = function(client, id, callback) {
    client.group.releaseLock(id, function(err) {
        assert.ok(!err);
        return callback();
    });
};

/**
 * Assert the lock on a group can not be released
 *
 * @param  {RestClient}         client              The REST client to make the request with
 * @param  {Number}             id                  The id of the group to release the lock from
 * @param  {Number}             code                The expected HTTP error code
 * @param  {Function}           callback            Standard callback function
 */
var assertReleaseLockFails = module.exports.assertReleaseLockFails = function(client, id, code, callback) {
    client.group.releaseLock(id, function(err) {
        assert.ok(err);
        assert.strictEqual(err.code, code);
        return callback();
    });
};
