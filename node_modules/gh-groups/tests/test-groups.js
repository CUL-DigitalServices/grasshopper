/**
 * Copyright (c) 2015 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var _ = require('lodash');
var assert = require('assert');

var OrgUnitTestUtil = require('gh-orgunit/tests/util');
var TestsUtil = require('gh-tests');
var UsersTestsUtil = require('gh-users/tests/util');

var GroupsTestsUtil = require('./util');

describe('Groups', function() {

    describe('Group creation', function() {

        /**
         * Test that verifies that a group has no members when created by a global admin
         */
        it('verify a group has no members when created by a global admin', function(callback) {
            // Get a global admin client
            TestsUtil.getGlobalAdminRestClient(function(globalAdminClient) {

                // Create an organisational unit
                var opts = {'app': global.tests.apps.cam2013.id};
                OrgUnitTestUtil.assertCreateOrgUnit(globalAdminClient, 'Test org unit', 'course', opts, function(orgUnit) {

                    // A new group with no members should've been created
                    GroupsTestsUtil.assertGetGroupMembers(globalAdminClient, orgUnit.GroupId, null, null, [], function(members) {
                        assert.strictEqual(members.results.length, 0);

                        return callback();
                    });
                });
            });
        });
    });

    describe('Getting group members', function() {

        /**
         * Test that verifies getting a group's members
         */
        it('verify getting group members', function(callback) {
            // Create a group by creating a new organisational unit
            OrgUnitTestUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'Test org unit', 'course', null, function(orgUnit) {

                // Get the group members
                GroupsTestsUtil.assertGetGroupMembers(global.tests.admins.cam2013.client, orgUnit.GroupId, null, null, [global.tests.admins.cam2013.profile], function(members) {
                    return callback();
                });
            });
        });

        /**
         * Test that verifies validation when getting a group's members
         */
        it('verify getting group members validation', function(callback) {
            // Create a group by creating a new organisational unit
            OrgUnitTestUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'Test org unit', 'course', null, function(orgUnit) {

                // Invalid group id
                GroupsTestsUtil.assertGetGroupMembersFails(global.tests.admins.cam2013.client, 'Not a number', null, null, 400, function() {

                    // Unknown group id
                    GroupsTestsUtil.assertGetGroupMembersFails(global.tests.admins.cam2013.client, -1, null, null, 404, function() {
                        return callback();
                    });
                });
            });
        });

        /**
         * Test that verifies authorization when getting a group's members
         */
        it('verify getting group members authorization', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, false, function(simon) {
                TestsUtil.generateTestUsers(global.tests.apps.cam2014, 1, false, function(nico) {

                    // Create a group by creating a new organisational unit
                    OrgUnitTestUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'Test org unit', 'course', null, function(orgUnit) {

                        // Anonymous users cannot get group members
                        TestsUtil.getAnonymousAppUserClient(global.tests.apps.cam2013, function(anonymousClient) {
                            GroupsTestsUtil.assertGetGroupMembersFails(anonymousClient, orgUnit.GroupId, null, null, 401, function() {
                                TestsUtil.getAnonymousGlobalAdminRestClient(function(anonymousGlobalAdminClient) {
                                    GroupsTestsUtil.assertGetGroupMembersFails(anonymousGlobalAdminClient, orgUnit.GroupId, null, null, 401, function() {

                                        // Non-members from the same application cannot get group members
                                        GroupsTestsUtil.assertGetGroupMembersFails(simon.client, orgUnit.GroupId, null, null, 401, function() {
                                            // Non-members from another application cannot get group members
                                            GroupsTestsUtil.assertGetGroupMembersFails(nico.client, orgUnit.GroupId, null, null, 401, function() {

                                                // Make Simon a member
                                                var update = {};
                                                update[simon.profile.id] = true;
                                                GroupsTestsUtil.assertUpdateGroupMembers(global.tests.admins.cam2013.client, orgUnit.GroupId, update, function() {

                                                    // Simon can now get the group's members
                                                    GroupsTestsUtil.assertGetGroupMembers(simon.client, orgUnit.GroupId, null, null, null, function(members) {

                                                        // Administrators from other applications cannot get group members
                                                        GroupsTestsUtil.assertGetGroupMembersFails(global.tests.admins.cam2014.client, orgUnit.GroupId, null, null, 401, function(members) {

                                                            // Global administrators can get group members
                                                            TestsUtil.getGlobalAdminRestClient(function(globalAdminClient) {
                                                                GroupsTestsUtil.assertGetGroupMembers(globalAdminClient, orgUnit.GroupId, null, null, null, function(members) {
                                                                    return callback();
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies paging when getting a group's members
         */
        it('verify getting group members paging', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 30, false, function() {
                var users = _.values(arguments);

                // Create a new group by creating a new organisational unit
                OrgUnitTestUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'Test org unit', 'course', null, function(orgUnit) {

                    // Add 30 users as members of the group
                    var update = {};
                    _.each(users, function(user) {
                        update[user.profile.id] = true;
                    });
                    GroupsTestsUtil.assertUpdateGroupMembers(global.tests.admins.cam2013.client, orgUnit.GroupId, update, function() {

                        // Verify that specifying no limit defaults to 10
                        GroupsTestsUtil.assertGetGroupMembers(global.tests.admins.cam2013.client, orgUnit.GroupId, null, null, null, function(members) {
                            assert.strictEqual(members.results.length, 10);

                            // Verify that the upper limit is 25
                            GroupsTestsUtil.assertGetGroupMembers(global.tests.admins.cam2013.client, orgUnit.GroupId, 50000, null, null, function(members) {
                                assert.strictEqual(members.results.length, 25);

                                // Verify proper paging
                                // Get the first set of members
                                GroupsTestsUtil.assertGetGroupMembers(global.tests.admins.cam2013.client, orgUnit.GroupId, 5, null, null, function(firstPage) {
                                    assert.strictEqual(firstPage.results.length, 5);

                                    // Assert the members are sorted on their displayName
                                    for (var i = 1; i < firstPage.results.length; i++) {
                                        assert.ok(firstPage.results[i].displayName >= firstPage.results[i - 1].displayName);
                                    }

                                    // Verify the next set of members
                                    GroupsTestsUtil.assertGetGroupMembers(global.tests.admins.cam2013.client, orgUnit.GroupId, 5, 5, null, function(secondPage) {
                                        assert.strictEqual(secondPage.results.length, 5);

                                        for (var i = 1; i < secondPage.results.length; i++) {
                                            // Assert the members are sorted on their displayName
                                            assert.ok(secondPage.results[i].displayName >= secondPage.results[i - 1].displayName);

                                            // Assert this member does not appear in the first page
                                            assert.ok(!_.find(firstPage.results, {'id': secondPage.results[i].id}));
                                        }
                                        return callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    describe('Updating group members', function() {

        /**
         * Test that verifies updating a group's members
         */
        it('verify updating group members', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, false, function(simon) {

                // Create a new group by creating a new organisational unit
                OrgUnitTestUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'Test org unit', 'course', null, function(orgUnit) {

                    // Make Simon a member of the group
                    var update = {};
                    update[simon.profile.id] = true;
                    GroupsTestsUtil.assertUpdateGroupMembers(global.tests.admins.cam2013.client, orgUnit.GroupId, update, function() {

                        // Simon and the app admin should be the only members of the group
                        var expectedMembers = [simon.profile, global.tests.admins.cam2013.profile];
                        GroupsTestsUtil.assertGetGroupMembers(global.tests.admins.cam2013.client, orgUnit.GroupId, null, null, expectedMembers, function(members) {

                            // Remove Simon
                            update[simon.profile.id] = false;
                            GroupsTestsUtil.assertUpdateGroupMembers(global.tests.admins.cam2013.client, orgUnit.GroupId, update, function() {

                                // The app admin should be the only member of the group
                                expectedMembers = [global.tests.admins.cam2013.profile];
                                GroupsTestsUtil.assertGetGroupMembers(global.tests.admins.cam2013.client, orgUnit.GroupId, null, null, expectedMembers, function(members) {
                                    return callback();
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies validation when updating a group's members
         */
        it('verify updating group members validation', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, false, function(simon) {

                // Create a new group by creating a new organisational unit
                OrgUnitTestUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'Test org unit', 'course', null, function(orgUnit) {

                    var update = {};
                    update[simon.profile.id] = true;

                    // Invalid group id
                    GroupsTestsUtil.assertUpdateGroupMembersFails(global.tests.admins.cam2013.client, 'Not a number', update, 400, function() {

                        // Unknown group id
                        GroupsTestsUtil.assertUpdateGroupMembersFails(global.tests.admins.cam2013.client, -1, update, 404, function() {

                            // Invalid user id
                            update = {};
                            update['Not a number'] = true;
                            GroupsTestsUtil.assertUpdateGroupMembersFails(global.tests.admins.cam2013.client, orgUnit.GroupId, update, 400, function() {

                                // Unknown user id
                                update = {};
                                update['-1'] = true;
                                GroupsTestsUtil.assertUpdateGroupMembersFails(global.tests.admins.cam2013.client, orgUnit.GroupId, update, 400, function() {

                                    // Unknown value
                                    update = {};
                                    update[simon.profile.id] = 'what';
                                    GroupsTestsUtil.assertUpdateGroupMembersFails(global.tests.admins.cam2013.client, orgUnit.GroupId, update, 400, function() {
                                        return callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies authorization when updating a group's members
         */
        it('verify updating group members authorization', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 3, false, function(simon, nico, sam) {

                // Create a new group by creating a new organisational unit
                OrgUnitTestUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'Test org unit', 'course', null, function(orgUnit) {

                    var update = {};
                    update[simon.profile.id] = true;

                    // Anonymous users cannot update group members
                    TestsUtil.getAnonymousAppUserClient(global.tests.apps.cam2013, function(anonymousClient) {
                        GroupsTestsUtil.assertUpdateGroupMembersFails(anonymousClient, orgUnit.GroupId, update, 401, function() {
                            TestsUtil.getAnonymousGlobalAdminRestClient(function(anonymousGlobalAdminClient) {
                                GroupsTestsUtil.assertUpdateGroupMembersFails(anonymousGlobalAdminClient, orgUnit.GroupId, update, 401, function() {

                                    // Non-members cannot update group members
                                    GroupsTestsUtil.assertUpdateGroupMembersFails(simon.client, orgUnit.GroupId, update, 401, function() {

                                        // Administrators from other applications cannot update group members
                                        GroupsTestsUtil.assertUpdateGroupMembersFails(global.tests.admins.cam2014.client, orgUnit.GroupId, update, 401, function() {

                                            // Make Simon a member
                                            GroupsTestsUtil.assertUpdateGroupMembers(global.tests.admins.cam2013.client, orgUnit.GroupId, update, function() {

                                                // Members can add other members
                                                update = {};
                                                update[nico.profile.id] = true;
                                                GroupsTestsUtil.assertUpdateGroupMembers(simon.client, orgUnit.GroupId, update, function() {

                                                    // Global administrators can update group members
                                                    TestsUtil.getGlobalAdminRestClient(function(globalAdminClient) {
                                                        update = {};
                                                        update[sam.profile.id] = true;
                                                        GroupsTestsUtil.assertUpdateGroupMembers(globalAdminClient, orgUnit.GroupId, update, function() {
                                                            return callback();
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that users cannot be added to a group from another application
         */
        it('verify users cannot be added to a group from another application', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.oxford2014, 1, false, function(nico) {

                // Create a new group by creating a new organisational unit
                OrgUnitTestUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'Test org unit', 'course', null, function(orgUnit) {

                    var update = {};
                    update[nico.profile.id] = true;
                    GroupsTestsUtil.assertUpdateGroupMembersFails(global.tests.admins.cam2013.client, orgUnit.GroupId, update, 400, callback);
                });
            });
        });
    });

    describe('Group locking', function() {

        var originalNow = null;

        /**
         * Take a copy of the original `Date.now` function before each test. This allows tests
         * to move the "current time" around and test things such as expiring locks
         */
        beforeEach(function() {
            originalNow = Date.now;
        });

        /**
         * Restore the `Date.now` function after each test
         */
        afterEach(function() {
            Date.now = originalNow;
        });

        /**
         * Test that verifies that a group can be locked
         */
        it('verify a group can be locked', function(callback) {
            // Create a new group by creating a new organisational unit
            OrgUnitTestUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'Test org unit', 'course', null, function(orgUnit) {

                // Lock it
                GroupsTestsUtil.assertLock(global.tests.admins.cam2013.client, orgUnit.GroupId, function() {

                    // Verify the lock is returned when retrieving the organisational units
                    OrgUnitTestUtil.assertGetOrgUnits(global.tests.admins.cam2013.client, null, null, true, null, null, function(orgUnits) {
                        var result = _.find(orgUnits.results, {'id': orgUnit.id});
                        assert.ok(result.Group);
                        assert.strictEqual(result.Group.isLocked, true);

                        // After 1 minute the lock should still be valid
                        Date.now = function() {
                            return originalNow() + 60000;
                        };
                        OrgUnitTestUtil.assertGetOrgUnits(global.tests.admins.cam2013.client, null, null, true, null, null, function(orgUnits) {
                            var result = _.find(orgUnits.results, {'id': orgUnit.id});
                            assert.ok(result.Group);
                            assert.strictEqual(result.Group.isLocked, true);

                            // After 90 seconds the lock should've expired
                            Date.now = function() {
                                // Add 95 seconds to take the organisational unit creation and locking into account
                                return originalNow() + 95000;
                            };

                            // Verify the group is no longer locked
                            OrgUnitTestUtil.assertGetOrgUnits(global.tests.admins.cam2013.client, null, null, true, null, null, function(orgUnits) {
                                var result = _.find(orgUnits.results, {'id': orgUnit.id});
                                assert.ok(result.Group);
                                assert.strictEqual(result.Group.isLocked, false);
                                return callback();
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies validation when locking a group
         */
        it('verify validation when locking a group', function(callback) {
            // Invalid group id
            GroupsTestsUtil.assertLockFails(global.tests.admins.cam2013.client, 'Not a number', 400, function() {

                // Unknown group id
                GroupsTestsUtil.assertLockFails(global.tests.admins.cam2013.client, 23423423, 404, function() {
                    GroupsTestsUtil.assertLockFails(global.tests.admins.cam2013.client, -1, 404, function() {
                        return callback();
                    });
                });
            });
        });

        /**
         * Test that verifies authorization when locking a group
         */
        it('verify authorization when locking a group', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 2, false, function(simon, nico) {

                // Create a new group by creating a new organisational unit
                OrgUnitTestUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'Test org unit', 'course', null, function(orgUnit) {

                    // Anonymous users cannot lock groups
                    TestsUtil.getAnonymousAppUserClient(global.tests.apps.cam2013, function(anonymousClient) {
                        GroupsTestsUtil.assertLockFails(anonymousClient, orgUnit.GroupId, 401, function() {

                            // Non-members cannot lock a group
                            GroupsTestsUtil.assertLockFails(simon.client, orgUnit.GroupId, 401, function() {

                                // Administrators from other applications cannot lock a group
                                GroupsTestsUtil.assertLockFails(global.tests.admins.cam2014.client, orgUnit.GroupId, 401, function() {

                                    // Make Simon and Nico a member
                                    var update = {};
                                    update[simon.profile.id] = true;
                                    update[nico.profile.id] = true;
                                    GroupsTestsUtil.assertUpdateGroupMembers(global.tests.admins.cam2013.client, orgUnit.GroupId, update, function() {

                                        // Members can lock the group
                                        GroupsTestsUtil.assertLock(simon.client, orgUnit.GroupId, function() {

                                            // Nico can't lock the group as it's already locked by Simon
                                            GroupsTestsUtil.assertLockFails(nico.client, orgUnit.GroupId, 401, function() {
                                                return callback();
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    describe('Group unlocking', function() {

        /**
         * Test that verifies that a lock on a group can be released
         */
        it('verify a lock on a group can be released', function(callback) {
            // Create a new group by creating a new organisational unit
            OrgUnitTestUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'Test org unit', 'course', null, function(orgUnit) {

                // Lock it
                GroupsTestsUtil.assertLock(global.tests.admins.cam2013.client, orgUnit.GroupId, function() {

                    // Verify the lock is returned when retrieving the organisational units
                    OrgUnitTestUtil.assertGetOrgUnits(global.tests.admins.cam2013.client, null, null, true, null, null, function(orgUnits) {
                        var result = _.find(orgUnits.results, {'id': orgUnit.id});
                        assert.ok(result.Group);
                        assert.strictEqual(result.Group.isLocked, true);

                        // Release the lock
                        GroupsTestsUtil.assertReleaseLock(global.tests.admins.cam2013.client, orgUnit.GroupId, function() {

                            // Verify the group is no longer locked
                            OrgUnitTestUtil.assertGetOrgUnits(global.tests.admins.cam2013.client, null, null, true, null, null, function(orgUnits) {
                                var result = _.find(orgUnits.results, {'id': orgUnit.id});
                                assert.ok(result.Group);
                                assert.strictEqual(result.Group.isLocked, false);
                                return callback();
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that releasing an unlocked group causes no harm
         */
        it('verify releasing an unlocked group causes no harm', function(callback) {
            // Create a new group by creating a new organisational unit
            OrgUnitTestUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'Test org unit', 'course', null, function(orgUnit) {

                // Release a lock that doesn't exist
                GroupsTestsUtil.assertReleaseLock(global.tests.admins.cam2013.client, orgUnit.GroupId, function() {

                    // Sanity-check that this group can still be locked
                    GroupsTestsUtil.assertLock(global.tests.admins.cam2013.client, orgUnit.GroupId, function() {
                        OrgUnitTestUtil.assertGetOrgUnits(global.tests.admins.cam2013.client, null, null, true, null, null, function(orgUnits) {
                            var result = _.find(orgUnits.results, {'id': orgUnit.id});
                            assert.ok(result.Group);
                            assert.strictEqual(result.Group.isLocked, true);

                            // Verify this lock can now be released
                            GroupsTestsUtil.assertReleaseLock(global.tests.admins.cam2013.client, orgUnit.GroupId, function() {
                                OrgUnitTestUtil.assertGetOrgUnits(global.tests.admins.cam2013.client, null, null, true, null, null, function(orgUnits) {
                                    var result = _.find(orgUnits.results, {'id': orgUnit.id});
                                    assert.ok(result.Group);
                                    assert.strictEqual(result.Group.isLocked, false);
                                    return callback();
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies validation when releasing the lock on a group
         */
        it('verify validation when releasing the lock on a group', function(callback) {
            // Invalid group id
            GroupsTestsUtil.assertReleaseLockFails(global.tests.admins.cam2013.client, 'Not a number', 400, function() {

                // Unknown group id
                GroupsTestsUtil.assertReleaseLockFails(global.tests.admins.cam2013.client, 12312321, 404, function() {
                    GroupsTestsUtil.assertReleaseLockFails(global.tests.admins.cam2013.client, -1, 404, function() {
                        return callback();
                    });
                });
            });
        });

        /**
         * Test that verifies authorization when releasing the lock on a group
         */
        it('verify authorization when releasing the lock on a group', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 3, false, function(simon, nico, sam) {

                // Create a new group by creating a new organisational unit
                OrgUnitTestUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'Test org unit', 'course', null, function(orgUnit) {

                    // Make Simon and Nico a member
                    var update = {};
                    update[simon.profile.id] = true;
                    update[nico.profile.id] = true;
                    GroupsTestsUtil.assertUpdateGroupMembers(global.tests.admins.cam2013.client, orgUnit.GroupId, update, function() {

                        // Lock it
                        GroupsTestsUtil.assertLock(simon.client, orgUnit.GroupId, function() {

                            // Anonymous users cannot release locks on groups
                            TestsUtil.getAnonymousAppUserClient(global.tests.apps.cam2013, function(anonymousClient) {
                                GroupsTestsUtil.assertReleaseLockFails(anonymousClient, orgUnit.GroupId, 401, function() {

                                    // Regular users cannot release locks on groups that they're not a member of
                                    GroupsTestsUtil.assertReleaseLockFails(sam.client, orgUnit.GroupId, 401, function() {

                                        // Administrators from other applications cannot release locks
                                        GroupsTestsUtil.assertReleaseLockFails(global.tests.admins.cam2014.client, orgUnit.GroupId, 401, function() {

                                            // Nico can't release the lock on the group as it's locked by Simon
                                            GroupsTestsUtil.assertReleaseLockFails(nico.client, orgUnit.GroupId, 401, function() {

                                                // Simon can release it
                                                GroupsTestsUtil.assertReleaseLock(simon.client, orgUnit.GroupId, function() {

                                                    // Application admins can release it as well
                                                    GroupsTestsUtil.assertLock(simon.client, orgUnit.GroupId, function() {
                                                        GroupsTestsUtil.assertReleaseLock(global.tests.admins.cam2013.client, orgUnit.GroupId, function() {
                                                            return callback();
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    describe('Getting user memberships', function() {

        /**
         * Test that verifies getting a user's memberships
         */
        it('verify getting user memberships', function(callback) {
            // Create a group by creating a new organisational unit
            OrgUnitTestUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'Test org unit', 'course', null, function(orgUnit) {

                // Create a user and add them to the group
                TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, false, function(user) {
                    var update = {};
                    update[user.profile.id] = true;
                    GroupsTestsUtil.assertUpdateGroupMembers(global.tests.admins.cam2013.client, orgUnit.GroupId, update, function() {

                        // Get the user's memberships
                        GroupsTestsUtil.assertGetUserMembershipsEquals(global.tests.admins.cam2013.client, user.profile.id, null, null, [orgUnit.GroupId], function(memberships) {
                            return callback();
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies validation when getting a user's memberships
         */
        it('verify getting user memberships validation', function(callback) {
            // Invalid user id
            GroupsTestsUtil.assertGetUserMembershipsFails(global.tests.admins.cam2013.client, 'not a number', null, null, 400, function() {

                // Unknown user
                GroupsTestsUtil.assertGetUserMembershipsFails(global.tests.admins.cam2013.client, -1, null, null, 404, function() {
                    GroupsTestsUtil.assertGetUserMembershipsFails(global.tests.admins.cam2013.client, 23423234, null, null, 404, function() {
                        return callback();
                    });
                });
            });
        });

        /**
         * Test that verifies authorization when getting a user's memberships
         */
        it('verify getting user memberships authorization', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, false, function(simon) {
                TestsUtil.generateTestUsers(global.tests.apps.cam2014, 1, false, function(nico) {

                    // Create a group by creating a new organisational unit
                    OrgUnitTestUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'Test org unit', 'course', null, function(orgUnit) {

                        // Anonymous users cannot get user memberships
                        TestsUtil.getAnonymousAppUserClient(global.tests.apps.cam2013, function(anonymousClient) {
                            GroupsTestsUtil.assertGetUserMembershipsFails(anonymousClient, simon.profile.id, null, null, 401, function() {
                                TestsUtil.getAnonymousGlobalAdminRestClient(function(anonymousGlobalAdminClient) {
                                    GroupsTestsUtil.assertGetGroupMembersFails(anonymousGlobalAdminClient, simon.profile.id, null, null, 401, function() {

                                        // Regular users can not get another user's memberships
                                        GroupsTestsUtil.assertGetUserMembershipsFails(nico.client, simon.profile.id, null, null, 401, function() {

                                            // Regular users can get their own memberships
                                            GroupsTestsUtil.assertGetUserMembershipsEquals(simon.client, simon.profile.id, null, null, [], function() {

                                                // Application administrators can not get users from another application's memberships
                                                GroupsTestsUtil.assertGetUserMembershipsFails(global.tests.admins.cam2014.client, simon.profile.id, null, null, 401, function() {

                                                    // Application administrators can get user memberships from their own application
                                                    GroupsTestsUtil.assertGetUserMembershipsEquals(global.tests.admins.cam2013.client, simon.profile.id, null, null, [], function() {

                                                        // Global administrators can get all user's memberships
                                                        TestsUtil.getGlobalAdminRestClient(function(globalAdminClient) {
                                                            GroupsTestsUtil.assertGetUserMembershipsEquals(globalAdminClient, simon.profile.id, null, null, [], function() {
                                                                GroupsTestsUtil.assertGetUserMembershipsEquals(globalAdminClient, nico.profile.id, null, null, [], function() {
                                                                    return callback();
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Add a user to a set of groups
         *
         * @param  {RestClient}     client          The client who will be adding the user to the groups
         * @param  {Number}         userId          The id of the user to add to the groups
         * @param  {Number[]}       groupIds        The ids of the groups to which the user should be added
         * @param  {Function}       callback        Invoked when the user has been added to all the groups
         */
        var _addUserToGroups = function(client, userId, groupIds, callback) {
            var _done = _.after(groupIds.length, callback);

            _.each(groupIds, function(groupId) {
                var update = {};
                update[userId] = true;
                GroupsTestsUtil.assertUpdateGroupMembers(client, groupId, update, _done);
            });
        };

        /**
         * Test that verifies paging when getting a user's memberships
         */
        it('verify getting user memberships paging', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, false, function(user) {

                // Create 30 new groups
                OrgUnitTestUtil.generateOrgUnits(global.tests.admins.cam2013.client, 30, function() {

                    var groupIds = _.chain(arguments)
                        .values()
                        .pluck('id')
                        .value();

                    // Add the test user to all the groups
                    _addUserToGroups(global.tests.admins.cam2013.client, user.profile.id, groupIds, function() {

                        // Verify that specifying no limit defaults to 25
                        GroupsTestsUtil.assertGetUserMembershipsEquals(global.tests.admins.cam2013.client, user.profile.id, null, null, null, function(memberships) {
                            assert.strictEqual(memberships.results.length, 25);

                            // Verify proper paging
                            // Get the first set of memberships
                            GroupsTestsUtil.assertGetUserMembershipsEquals(global.tests.admins.cam2013.client, user.profile.id, 15, null, null, function(firstPage) {
                                assert.strictEqual(firstPage.results.length, 15);

                                // Verify the next set of memberships
                                GroupsTestsUtil.assertGetUserMembershipsEquals(global.tests.admins.cam2013.client, user.profile.id, 15, 15, null, function(secondPage) {
                                    assert.strictEqual(secondPage.results.length, 15);

                                    // Assert each membership does not appear in the first page
                                    _.each(secondPage.results, function(membership) {
                                        assert.ok(!_.find(firstPage.results, {'id': membership.id}));
                                    });

                                    return callback();
                                });
                            });
                        });
                    });
                });
            });
        });
    });
});
