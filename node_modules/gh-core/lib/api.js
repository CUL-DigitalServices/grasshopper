/**
 * Copyright (c) 2014 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var _ = require('lodash');
var fs = require('fs');
var path = require('path');

var AdminsDAO = require('gh-admins/lib/internal/dao');
var AuthAPI = require('gh-auth');
var DocsAPI = require('gh-docs');

var DB = require('./db');
var Logger = require('./logger');
var Server = require('./server');

var log = Logger.logger('gh-core/api');

// The Express server for the global admin server
var globalAdminServer = module.exports.globalAdminServer = null;

// The Express server for apps
var appServer = module.exports.appServer = null;

/**
 * Initialize the application
 *
 * @param  {Object}         config              The config as per `config.js` in the root directory
 * @param  {Function}       callback            Standard callback function
 * @param  {Object}         callback.err        An error object, if any
 */
var init = module.exports.init = function(config, callback) {
    // Initialize the logger
    Logger.refreshLogConfiguration(config.log);

    // Connect to the database
    DB.init(config, function(err) {
        if (err) {
            return callback(err);
        }

        // Ensure that the default global administrator exists
        var defaultGlobalAdmin = {
            'username': 'administrator',
            'password': 'administrator',
            'displayName': 'Global Admin'
        };

        AdminsDAO.getGlobalAdminByUsername(defaultGlobalAdmin.username, function(err, globalAdmin) {
            // The default global administrator already exists
            if (globalAdmin) {
                return initialiseExpressServers(config, callback);
            // The default global administrator doesn't exists yet
            } else {
                AdminsDAO.createGlobalAdmin(defaultGlobalAdmin.username, defaultGlobalAdmin.password, defaultGlobalAdmin.displayName, function(err, globalAdmin) {
                    if (err) {
                        log().error({'err': err}, 'Failed to create the default global administrator');
                        return callback(err);
                    }

                    return initialiseExpressServers(config, callback);
                });
            }
        });
    });
};

/**
 * Initialise the global admin and app Express servers, initialise the REST API endpoint
 * and cache the REST API documentation
 *
 * @param  {Object}         config              The config as per `config.js` in the root directory
 * @param  {Function}       callback            Standard callback function
 * @param  {Object}         callback.err        An error object, if any
 */
var initialiseExpressServers = function(config, callback) {
    // Initialise the Express servers
    module.exports.globalAdminServer = Server.setUpServer(config.servers.adminPort, config);
    module.exports.appServer = Server.setUpServer(config.servers.appsPort, config);

    // Get all the node modules
    fs.readdir(path.join(__dirname, '../..'), function(err, modules) {
        if (err) {
            log().error({'err': err}, 'Unable to read the node modules directory');
            return callback({'code': 500, 'msg': 'Unable to read the node modules directory'});
        }

        var ghModules = _.filter(modules, function(module) {
            return module.match(/^gh-.+$/);
        });

        // Check if a `rest.js` file exists in the `lib` folder in each
        // module. If such a file exists, we require it. This allows other
        // modules to add in their own set of REST apis
        _.each(ghModules, function(module) {
            var restFile = path.join(__dirname, '../..', module, '/lib/rest.js');
            if (fs.existsSync(restFile)) {
                log().debug({'module': module}, 'Trying to register REST apis');
                require(module + '/lib/rest');
            }
        });
        log().info('All REST APIs have been initialized');

        // Initialise the Passport authentication strategies
        AuthAPI.initialise(config);

        module.exports.globalAdminServer.postInit();
        module.exports.appServer.postInit();

        /*!
         * Called when all the modules have been documented
         */
        var moduleDocumented = _.after(ghModules.length, function() {
            // Add the models to all the api resources
            DocsAPI.addModelsToResources();
            log().info('All REST APIs have been documented');
            return callback();
        });

        // Document each module's REST APIs
        _.each(ghModules, function(module) {
            DocsAPI.documentModule(module, moduleDocumented);
        });
    });
};
