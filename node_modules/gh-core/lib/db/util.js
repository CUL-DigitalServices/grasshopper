
var _ = require('lodash');
var util = require('util');

var DB = require('gh-core/lib/db');
var log = require('gh-core/lib/logger').logger('gh-core/db/util');

var findBy = module.exports.findBy = function(name, fieldName, fieldValue, opts, callback) {
    opts = opts || {};
    var query = _.ghExtendDefined({}, {
        'where': _.ghObj(fieldName, fieldValue),
        'include': opts.include
    });

    var logData = {'model': name, 'field': fieldName, 'value': fieldValue};
    DB[name].find(query).complete(function(err, instance) {
        if (err) {
            log().error(_.extend({'err': err}, logData), util.format('Failed to fetch a %s row by %s', name, fieldName));
            return callback({'code': 500, 'msg': err.message});
        } else if (!instance) {
            log().debug(logData, util.format('Attempted to fetch a non-existing %s row by %s', name, fieldName));
            return callback({'code': 404, 'msg': util.format('Attempted to fetch a non-existing %s row by %s', name, fieldName)});
        }

        return callback(null, instance);
    });
};

var create = module.exports.create = function(name, data, callback) {
    DB[name].create(data).complete(function(err, instance) {
        if (err) {
            log().error({'err': err, 'data': data}, util.format('Failed to create an instance of "%s"', name));
            return callback({'code': 500, 'msg': err.message});
        }

        log().debug({'instance': instance}, util.format('Created a new instance of "%s"', name));
        return callback(null, instance);
    });
};
