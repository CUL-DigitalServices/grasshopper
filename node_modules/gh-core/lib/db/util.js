/**
 * Copyright (c) 2015 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var _ = require('lodash');
var util = require('util');

var DB = require('gh-core/lib/db');
var log = require('gh-core/lib/logger').logger('gh-core/db/util');

/**
 * Find a model object by a specified field name and value. This is a convenience for common query
 * operations performed that can automatically provide helpful log messages using the model `name`
 * and lookup fields.
 *
 * @param  {String}     name                The name of the registered model object to find (e.g., 'User', 'Event')
 * @param  {String}     fieldName           The field name on which to perform the lookup
 * @param  {Object}     fieldValue          The value to match on the field
 * @param  {Object}     [opts]              Optional arguments
 * @param  {Object}     [opts.include]      The additional model objects to join on. This is the standard `include` object provided to `DB.Model.find`
 * @param  {Function}   callback            Standard callback function
 * @param  {Object}     callback.err        An error that occurred, if any
 * @param  {Object}     callback.instance   The instance of the model object that was found
 */
var findBy = module.exports.findBy = function(name, fieldName, fieldValue, opts, callback) {
    opts = opts || {};
    var query = _.ghExtendDefined({}, {
        'where': _.ghObj(fieldName, fieldValue),
        'include': opts.include
    });

    var logData = {'model': name, 'field': fieldName, 'value': fieldValue};
    DB[name].find(query).complete(function(err, instance) {
        if (err) {
            log().error(_.extend({'err': err}, logData), util.format('Failed to fetch a %s row by %s', name, fieldName));
            return callback({'code': 500, 'msg': err.message});
        } else if (!instance) {
            log().debug(logData, util.format('Attempted to fetch a non-existing %s row by %s', name, fieldName));
            return callback({'code': 404, 'msg': util.format('Attempted to fetch a non-existing %s row by %s', name, fieldName)});
        }

        return callback(null, instance);
    });
};

/**
 * Create an instance of a model object with the given `name` and the specified `data`. This is a
 * convenience for create operations performed that can automatically provide helpful log messages
 * using the model `name` and data.
 *
 * @param  {String}     name                The name of the registered model object of which we will create an instance
 * @param  {Object}     data                The fields and values that represent the data of the model object to create
 * @param  {Function}   callback            Standard callback function
 * @param  {Object}     callback.err        An error that occurred, if any
 * @param  {Object}     callback.instance   The instance of the model object that was found
 */
var create = module.exports.create = function(name, data, callback) {
    DB[name].create(data).complete(function(err, instance) {
        if (err) {
            log().error({'err': err, 'data': data}, util.format('Failed to create an instance of "%s"', name));
            return callback({'code': 500, 'msg': err.message});
        }

        log().debug({'instance': instance}, util.format('Created a new instance of "%s"', name));
        return callback(null, instance);
    });
};
