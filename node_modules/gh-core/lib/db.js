/**
 * Copyright (c) 2014 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var Sequelize = require('sequelize');

var log = require('./logger').logger('gh-core/db');

var init = module.exports.init = function(config, callback) {

    /*!
     * Pipe sequelize log statements to our own logger
     *
     * @param  {String}     msg     The sequelize log statement
     */
    config.db.logging = function(msg) {
        log().debug(msg);
    };

    // Set up a connection to the database
    var sequelize = new Sequelize(config.db.database, config.db.username, config.db.password, config.db);
    sequelize
    .authenticate()
    .done(function(err) {
        if (err) {
            log().error({'err': err}, 'Unable to set up a connection to the database');
            return callback({'code': 500, 'msg': 'Unable to set up a connection to the database'});
        }

        log().debug('Connected to the database');

        // Set up the model
        _setUpModel(sequelize);

        // By setting `force` to `true` we will drop each table and recreate it. This is useful
        // during development/testing when models tend to change. We NEVER do this in production though
        var force = false;
        if (process.env['NODE_ENV'] !== 'production' && config.db.dropOnStartup === true) {
            force = true;
        }

        sequelize
        .sync({'force': force})
        .done(function(err) {
            if (err) {
                log().error({'err': err}, 'Unable to sync the model to the database');
                return callback({'code': 500, 'msg': 'Unable to sync the model to the database'});
            }

            log().debug('Synced model to database');

            return callback();
        });
    });
};

/**
 * Set up the DB model
 *
 * @param  {Sequelize}      sequelize       A sequelize instance that is connected to the database
 * @api private
 */
var _setUpModel = function(sequelize) {

    /**
     * The Tenant model
     *
     * @param {Number}       id                      The id of the tenant
     * @param {String}       displayName             The name of the tenant
     */
    var Tenant = module.exports.Tenant = sequelize.define('Tenant', {
        'displayName': {
            'type': Sequelize.STRING,
            'allowNull': false
        }
    });

    /**
     * The App model
     *
     * @param {Number}       id                      The id of the app
     * @param {String}       displayName             The name of the app (e.g. `Timetable 2013-14`)
     * @param {Boolean}      enabled                 Whether the app is currently enabled
     * @param {String}       host                    The host on which the app can be found
     * @param {String}       type                    The type of the app
     * @param {Tenant}       tenant                  The tenant associated to the app
     */
    var App = module.exports.App = sequelize.define('App', {
        'displayName': {
            'type': Sequelize.STRING,
            'allowNull': false
        },
        'host': {
            'type': Sequelize.STRING,
            'allowNull': false,
            'unique': true
        },
        'type': {
            'type': Sequelize.ENUM('timetable'),
            'allowNull': false
        },
        'enabled': {
            'type': Sequelize.BOOLEAN,
            'defaultValue': true
        }
    });

    App.belongsTo(Tenant);
    Tenant.hasMany(App);

    /**
     * The global administrator model
     *
     * @param {String}       displayName             The name of the global administrator
     * @param {String}       password                The password for the global administrator
     * @param {String}       username                The username for the global administrator
     */
    var GlobalAdmin = module.exports.GlobalAdmin = sequelize.define('GlobalAdmin', {
        'displayName': {
            'type': Sequelize.STRING,
            'allowNull': false
        },
        'password': {
            'type': Sequelize.STRING,
            'allowNull': false
        },
        'username': {
            'type': Sequelize.STRING,
            'allowNull': false,
            'unique': true
        }
    }, {
        'instanceMethods': {
            'isGlobalAdmin': function() {
                return true;
            }
        }
    });

    /**
     * The tenant user model
     *
     * @param {String}       authenticationStrategy  The authentication strategy for the user
     * @param {String}       displayName             The name of the user
     * @param {String}       email                   The email address for the user
     * @param {String}       password                The password for the user
     * @param {String}       shibbolethId            The unique shibboleth id for the user
     */
    var TenantUser = module.exports.TenantUser = sequelize.define('TenantUser', {
        'authenticationStrategy': {
            'type': Sequelize.ENUM('local', 'shibboleth'),
            'allowNull': false
        },
        'displayName': {
            'type': Sequelize.STRING,
            'allowNull': false
        },
        'email': {
            'type': Sequelize.STRING,
            'allowNull': true,
            'unique': true
        },
        'password': Sequelize.STRING,
        'shibbolethId': Sequelize.STRING
    }, {
        'instanceMethods': {
            'isGlobalAdmin': function() {
                return false;
            }
        }
    });

    TenantUser.belongsTo(Tenant);
    Tenant.hasMany(TenantUser);

    /**
     * The app user model
     *
     * @param {String}       emailPreference         The email preference for the user on the current app
     * @param {String}       isAdmin                 Whether the user is an administrator for the current app
     * @param {Date}         termsAndConditions      The timestamp (ISO 6081) at which the user accepted the Terms and Conditions
     */
    var AppUser = module.exports.AppUser = sequelize.define('AppUser', {
        'emailPreference': {
            'type': Sequelize.ENUM('immediate', 'no'),
            'allowNull': false
        },
        'isAdmin': {
            'type': Sequelize.BOOLEAN,
            'defaultValue': false
        },
        'termsAndConditions': Sequelize.DATE
    }, {
        'instanceMethods': {
            'isGlobalAdmin': function() {
                return false;
            }
        }
    });

    AppUser.belongsTo(TenantUser);
    TenantUser.hasMany(AppUser);



    /*

    /**
     * The group model
     *
     * @property {Number}       id                  The unique identifier of the group
     * @property {Date}         lockedOn            When the group was locked
     * @property {App}          app                 The application with which the group is associated
     * @property {User}         lockedBy            The user who locked the group
     * @property {User[]}       members             The users who are in this group
     *
    var Group = module.exports.Group = sequelize.define('Group', {
        'lockedOn': Sequelize.DATE
    });
    Group.belongsTo(App);
    App.hasMany(Group);

    Group.belongsTo(User, {'as': 'LockedBy'});

    Group.hasMany(User, {'as': 'Members', 'through': 'Group_Members'});
    User.hasMany(Group, {'as': 'Memberships', 'through': 'Group_Members'});

    /**
     * The organization unit (orgunit) model
     *
     * @property {Number}       id                  The unique identifier of the organizational unit
     * @property {String}       displayName         The display name of the organizational unit
     * @property {String}       type                A label that identifies what this organization unit represents within the tree of organizational units
     * @property {String}       [sourceId]          The identifier of the serie in an external system
     * @property {OrgUnit}      [parent]            The parent organization unit for this unit. If left `null` then this node will be a root node
     * @property {Serie[]}      [series]            The series that are associated with this organizational unit
     * @property {Event[]}      [events]            The events that are directly associated with this organizational unit
     * @property {App}          app                 The application with which the organizational unit is associated
     * @property {Group}        group               The group who can edit this organizational unit and the units below it
     *
    var OrgUnit = module.exports.OrgUnit = sequelize.define('OrgUnit', {
        'displayName': Sequelize.STRING,
        'type': Sequelize.STRING(10),
        'sourceId': Sequelize.STRING
    });
    OrgUnit.belongsTo(App);
    App.hasMany(OrgUnit);

    OrgUnit.belongsTo(Group);
    Group.hasMany(OrgUnit);

    OrgUnit.hasOne(OrgUnit, { 'as': 'Parent', 'foreignKey': 'parentId' });


    /**
     * The serie model
     *
     * @property {Number}       id                  The unique identifier of the serie
     * @property {String}       displayName         The display name of the serie
     * @property {String}       description         The description of the serie
     * @property {String}       image               The path to an image for the serie
     * @property {String}       [sourceId]          The identifier of the serie in an external system
     * @property {Event[]}      events              The events that are listed in the serie
     * @property {OrgUnit}      orgunit             The organizational unit the serie belongs to
     * @property {App}          app                 The application with which the serie is associated
     * @property {Group}        group               The group who can edit this serie
     *
    var Serie = module.exports.Serie = sequelize.define('Serie', {
        'displayName': Sequelize.STRING,
        'description': Sequelize.TEXT,
        'image': Sequelize.STRING,
        'sourceId': Sequelize.STRING
    });
    Serie.belongsTo(App);
    App.hasMany(Serie);

    Serie.belongsTo(Group);
    Group.hasMany(Serie);

    OrgUnit.hasMany(Serie);
    // TODO: Borrowing: make hasMany
    Serie.belongsTo(OrgUnit);

    /**
     * The event model
     *
     * @property {Number}       id                  The unique identifier of the event
     * @property {String}       displayName         The display name of the event
     * @property {String}       description         The description of the event
     * @property {String}       image               The path to an image for the event
     * @property {String}       notes               Special notes about the event
     * @property {String}       location            The location where the event will be held
     * @property {Date}         start               The time the event starts
     * @property {Date}         end                 The time the event ends
     * @property {String}       [sourceId]          The identifier of the event in an external system
     * @property {String}       [organizersText]    In case no user record is available for the organizer, a free-form value can be netered
     * @property {User[]}       organizers          The users who organize the event
     * @property {App}          app                 The application with which the event is associated
     * @property {Group}        group               The group who can edit this event
     *
    var Event = module.exports.Event = sequelize.define('Event', {
        'displayName': Sequelize.STRING,
        'description': Sequelize.TEXT,
        'image': Sequelize.STRING,
        'notes': Sequelize.TEXT,
        'location': Sequelize.STRING,
        'start': Sequelize.DATE,
        'end': Sequelize.DATE,
        'sourceId': Sequelize.STRING,
        'organizersText': Sequelize.TEXT
    });
    Event.belongsTo(App);
    App.hasMany(Event);

    Event.belongsTo(Group);
    Group.hasMany(Event);

    Event.hasMany(User, {'as': 'Organizers', 'through': 'Event_Organizers'});
    User.hasMany(Event, {'as': 'OrganizedEvents', 'through': 'Event_Organizers'});

    Serie.hasMany(Event);
    Event.hasMany(Serie);

    /**
     * The calendar model
     *
     * @property {String}       id                  The unique identifier of the calendar
     * @property {User}         user                The user who owns the calendar
     * @property {Serie[]}      series              The series in this calendar
     * @property {Event[]}      events              The events in this calendar
     * @property {App}          app                 The application with which the calendar is associated
     *
    var Calendar = module.exports.Calendar = sequelize.define('Calendar', {});

    Calendar.belongsTo(User);
    User.hasOne(Calendar);

    Calendar.belongsTo(App);
    App.hasMany(Calendar);

    Calendar.hasMany(Serie);
    Serie.hasMany(Calendar);

    Calendar.hasMany(Event);
    Event.hasMany(Calendar); */
};
