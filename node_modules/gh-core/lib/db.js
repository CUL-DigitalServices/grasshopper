/**
 * Copyright (c) 2014 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var Sequelize = require('sequelize');

var log = require('./logger').logger('gh-core/db');

var init = module.exports.init = function(config, callback) {
    /*!
     * Pipe sequelize log statements to our own logger
     *
     * @param  {String}     msg     The sequelize log statement
     */
    config.db.logging = function(msg) {
        log().debug(msg);
    };

    // Set up a connection to the database
    var sequelize = new Sequelize(config.db.database, config.db.username, config.db.password, config.db);
    sequelize
    .authenticate()
    .complete(function(err) {
        if (err) {
            log().error({'err': err}, 'Unable to set up a connection to the database');
            return callback({'code': 500, 'msg': 'Unable to set up a connection to the database'});
        }

        log().debug('Connected to database');

        // Set up the mode
        _setUpModel(sequelize);

        // Create the tables (if they did not exist) by syncing the model
        // TODO: Remove `force` once the model has stabilized
        sequelize
        .sync({ 'force': true })
        .complete(function(err) {
            if (err) {
                log().error({'err': err}, 'Unable to sync the model to the database');
                return callback({'code': 500, 'msg': 'Unable to sync the model to the database'});
            }

            log().debug('Synced model to database');

            return callback();
        });
    });
};

/**
 * Set up the DB model
 *
 * @param {Sequelize}           sequelize           A sequelize instance that is connected to the database
 * @api private
 */
var _setUpModel = function(sequelize) {
    /**
     * The tenant model
     *
     * @property {Number}       id                  The unique identifier of the tenant
     * @property {String}       displayName         The display name of the tenant
     */
    var Tenant = module.exports.Tenant = sequelize.define('Tenant', {
        'displayName': Sequelize.STRING
    });


    /**
     * The `app` model
     *
     * @property {Number}       id                  The unique identifier of the app
     * @property {Tenant}       tenant              The tenant with which the app is associated
     * @property {String}       displayName         The display name of the app
     * @property {String}       hostname            The hostname on which the app is available
     * @property {String}       type                The type of the app
     * @property {Boolean}      enabled             Whether or not the app is active. Defaults to `true`
     * @property {String}       shibbolethIDP       The entity id of the shibboleth identity provider
     * @property {User[]}       admins              The users who can administer the app
     */
    var App = module.exports.App = sequelize.define('App', {
        'displayName': Sequelize.STRING,
        'hostname': Sequelize.STRING,
        'type': {
            'type': Sequelize.ENUM('timetable'),
            'allowNull': false
        },
        'enabled': {
            'type': Sequelize.BOOLEAN,
            'defaultValue': true
        },
        'shibbolethIDP': Sequelize.STRING
    },
    {
        'instanceMethods': {

            /**
             * Whether or not this app is the global admin server
             *
             * @return {Boolean} Whether or not this app is the global admin server
             */
            'isGlobalAdmin': function() {
                return (this.hostname === 'admin.grasshopper.com');
            }
        }
    });

    Tenant.hasMany(App);


    /**
     * The user model
     *
     * @property {Number}       id                  The unique identifier of the user
     * @property {Tenant}       tenant              The tenant with which the user is associated
     * @property {String}       username            The username with which the user logs in. This should be unique within the tenant
     * @property {String}       [password]          The password for this user account. Can be null if Shibboleth authentication is used
     * @property {String}       displayName         The display name of the user
     * @property {String}       email               The email of the user
     * @property {String}       emailPreference     The email preference of the user. Options are `never`, `daily`, `weekly` or `never`. The default is `immediate`
     */
    var User = module.exports.User = sequelize.define('User', {
        'username': Sequelize.STRING,
        'displayName': Sequelize.STRING,
        'email': Sequelize.STRING,
        'emailPreference': {
            'type': Sequelize.ENUM('immediate', 'daily', 'weekly', 'never'),
            'allowNull': false
        },
        'password': Sequelize.STRING
    });
    App.hasMany(User, {'as': 'Admins'});
    App.hasMany(User, {'as': 'AppUsers'});


    /**
     * The group model
     *
     * @property {Number}       id                  The unique identifier of the group
     * @property {App}          app                 The application with which the group is associated
     * @property {Date}         lockedOn            When the group was locked
     * @property {User}         lockedBy            The user who locked the group
     */
    var Group = module.exports.Group = sequelize.define('Group', {
        'lockedOn': Sequelize.DATE
    });
    Group.hasOne(App);
    Group.hasOne(User, {'as': 'LockedBy'});


    /**
     * The organization unit (orgunit) model
     *
     * @property {Number}       id                  The unique identifier of the organizational unit
     * @property {App}          app                 The application with which the organizational unit is associated
     * @property {Group}        group               The group who can edit this organizational unit and the units below it
     * @property {String}       displayName         The display name of the organizational unit
     * @property {String}       type                A label that identifies what this organization unit represents within the tree of organizational units
     * @property {OrgUnit}      [parent]            The parent organization unit for this unit. If left `null` then this node will be a root node
     * @property {Serie[]}      [series]            The series that are associated with this organizational unit
     * @property {Event[]}      [events]            The events that are directly associated with this organizational unit
     */
    var OrgUnit = module.exports.OrgUnit = sequelize.define('OrgUnit', {
        'displayName': Sequelize.STRING,
        'type': Sequelize.STRING(10)
    });
    OrgUnit.hasOne(App);
    OrgUnit.hasOne(Group);
    OrgUnit.hasOne(OrgUnit, { 'as': 'Parent', 'foreignKey': 'parentId' });


    /**
     * The serie model
     *
     * @property {Number}       id                  The unique identifier of the serie
     * @property {App}          app                 The application with which the serie is associated
     * @property {Group}        group               The group who can edit this serie
     * @property {String}       displayName         The display name of the serie
     * @property {String}       description         The description of the serie
     * @property {String}       image               The path to an image for the serie
     * @property {Event[]}      events              The events that are listed in the serie
     */
    var Serie = module.exports.Serie = sequelize.define('Serie', {
        'displayName': Sequelize.STRING,
        'description': Sequelize.TEXT,
        'image': Sequelize.STRING,
    });
    Serie.hasOne(App);
    Serie.hasOne(Group);
    OrgUnit.hasMany(Serie);


    /**
     * The location model
     *
     * @property {Number}       id                  The unique identifier of the location
     * @property {Tenant}       tenant              The tenant with which the location is associated
     * @property {String}       displayName         The display name of the location
     * @property {String}       address             The address of the location
     * @property {Number}       latitude            The latitude coordinate for the location
     * @property {Number}       longitude           The longitude coordinate for the location
     */
    var Location = module.exports.Location = sequelize.define('Location', {
        'displayName': Sequelize.STRING,
        'address': Sequelize.STRING,
        'latitude': Sequelize.DECIMAL,
        'longitude': Sequelize.DECIMAL
    });
    Location.hasOne(Tenant);


    /**
     * The event model
     *
     * @property {Number}       id                  The unique identifier of the event
     * @property {App}          app                 The application with which the event is associated
     * @property {Group}        group               The group who can edit this event
     * @property {String}       displayName         The display name of the event
     * @property {String}       description         The description of the event
     * @property {String}       image               The path to an image for the event
     * @property {Location}     location            The location where the event will be held
     * @property {User}         organizer           The user who organizes the event
     */
    var Event = module.exports.Event = sequelize.define('Event', {
        'displayName': Sequelize.STRING,
        'description': Sequelize.TEXT,
        'image': Sequelize.STRING,
        'notes': Sequelize.TEXT,
        'start': Sequelize.DATE,
        'end': Sequelize.DATE
    });
    Event.hasOne(App);
    Event.hasOne(Group);
    Event.hasOne(Location);
    Event.hasOne(User, {'as': 'Organizer'});
    Serie.hasMany(Event);


    /**
     * The calendar model
     *
     * @property {String}       id                  The unique identifier of the calendar 
     * @property {User}         user                The user who owns the calendar
     * @property {Serie[]}      series              The series in this calendar
     * @property {Event[]}      events              The events in this calendar
     */
    var Calendar = module.exports.Calendar = sequelize.define('Calendar', {});
    Calendar.hasOne(User);
    Calendar.hasMany(Serie);
    Calendar.hasMany(Event);
};