/**
 * Copyright (c) 2015 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var assert = require('assert');
var Readable = require('stream').Readable;

var TestsUtil = require('gh-tests/lib/util');
var UsersTestsUtil = require('gh-users/tests/util');

describe('Core', function() {

    /**
     * Test that verifies that file uploads cannot exceed 10MB
     */
    it('verify file uploads cannot exceed 10MB', function(callback) {
        TestsUtil.getGlobalAdminRestClient(function(globalAdminClient) {
            TestsUtil.generateTestTenant(1, function(tenant, app) {

                // Generate exactly 10MB of data
                var stream = _getStream(10 * 1024 * 1024);

                // Submitting exactly 10MB should not trip up the middleware, but it will trip up
                // the import validator. We use the RestClient directly, as the test utility hides
                // away the test error
                globalAdminClient.user.importUsers(stream, app.id, 'shibboleth', false, function(err) {
                    assert.ok(err);
                    assert.strictEqual(err.code, 400);
                    assert.notStrictEqual(err.msg, 'File too big');

                    // Submitting 1 byte more than 10MB will trip up the middleware
                    stream = _getStream(10 * 1024 * 1024 + 1);
                    globalAdminClient.user.importUsers(stream, app.id, 'shibboleth', false, function(err) {
                        assert.ok(err);
                        assert.strictEqual(err.code, 400);
                        assert.strictEqual(err.msg, 'File too big');
                        return callback();
                    });
                });
            });
        });
    });

    /**
     * Test that verifies that only 1 file can be uploaded
     */
    it('verify only 1 file can be uploaded', function(callback) {
        TestsUtil.getGlobalAdminRestClient(function(globalAdminClient) {
            TestsUtil.generateTestTenant(1, function(tenant, app) {

                // Assert 2 files is too many
                // Use the RestClient's _request method directly so we can submit 2 files
                var url = '/api/users/import';
                var data = {
                    'file1': _getStream(16),
                    'file2': _getStream(16)
                };
                globalAdminClient._request(url, 'POST', data, null, function(err) {
                    assert.ok(err);
                    assert.strictEqual(err.code, 400);
                    assert.strictEqual(err.msg, 'Too many files uploaded');

                    // Assert 1 file is fine. This should trip up the importUsers validation
                    data = {
                        'file': _getStream(16)
                    };
                    globalAdminClient._request(url, 'POST', data, null, function(err) {
                        assert.ok(err);
                        assert.strictEqual(err.code, 400);
                        assert.notStrictEqual(err.msg, 'Too many files uploaded');
                        return callback();
                    });
                });
            });
        });
    });
});

/**
 * Get a stream that returns an specified amount of data
 *
 * @param  {Number} size The number of bytes the stream should return
 * @return {Stream}      The stream that will be returned
 * @api private
 */
var _getStream = function(size) {
    var stream = new Readable();
    stream.push(new Buffer(size));

    // End the stream
    stream.push(null);

    // Setting a `path` property on the stream tricks requestjs' form-data to pass along
    // a filename. If we were to omit this, we would get a HPE_INVALID_METHOD_ERROR
    stream.path = 'test.csv';
    return stream;
};
