/**
 * Copyright (c) 2014 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

module.exports = function(client) {
    client.group = {};

    /**
     * Get the members of a group
     *
     * @param  {Number}         id                              The group for which to get the members
     * @param  {Number}         [limit]                         The maximum number of results to retrieve
     * @param  {Number}         [offset]                        The paging number of the results to retrieve
     * @param  {Function}       callback                        Standard callback function
     * @param  {Object}         callback.err                    An error that occurred, if any
     * @param  {Object}         callback.body                   The JSON response from the REST API
     * @param  {Response}       callback.response               The response object as returned by requestjs
     * @see gh-groups/lib/rest.js for more information
     */
    client.group.getGroupMembers = function(id, limit, offset, callback) {
        var url = '/api/groups/' + client.util.encodeURIComponent(id) + '/members';
        var data = {
            'limit': limit,
            'offset': offset
        };
        client._request(url, 'GET', data, null, callback);
    };

    /**
     * Update the members of a group
     *
     * @param  {Number}         id                              The group for which to get the members
     * @param  {Object}         memberUpdates                   The members to add to or remove from the group. The keys should hold the user ids and the value should be a boolean indicating whether the user should be added(true) or removed(false)
     * @param  {Function}       callback                        Standard callback function
     * @param  {Object}         callback.err                    An error that occurred, if any
     * @param  {Object}         callback.body                   The JSON response from the REST API
     * @param  {Response}       callback.response               The response object as returned by requestjs
     * @see gh-groups/lib/rest.js for more information
     */
    client.group.updateGroupMembers = function(id, memberUpdates, callback) {
        var url = '/api/groups/' + client.util.encodeURIComponent(id) + '/members';
        client._request(url, 'POST', memberUpdates, null, callback);
    };

    /**
     * Lock a group
     *
     * @param  {Number}         id                              The id of the group to lock
     * @param  {Function}       callback                        Standard callback function
     * @param  {Object}         callback.err                    An error that occurred, if any
     * @param  {Object}         callback.body                   The JSON response from the REST API
     * @param  {Response}       callback.response               The response object as returned by requestjs
     * @see gh-groups/lib/rest.js for more information
     */
    client.group.lock = function(id, callback) {
        var url = '/api/groups/' + client.util.encodeURIComponent(id) + '/lock';
        client._request(url, 'POST', null, null, callback);
    };

    /**
     * Release the lock on a group
     *
     * @param  {Number}         id                              The id of the group to release the lock from
     * @param  {Function}       callback                        Standard callback function
     * @param  {Object}         callback.err                    An error that occurred, if any
     * @param  {Object}         callback.body                   The JSON response from the REST API
     * @param  {Response}       callback.response               The response object as returned by requestjs
     * @see gh-groups/lib/rest.js for more information
     */
    client.group.releaseLock = function(id, callback) {
        var url = '/api/groups/' + client.util.encodeURIComponent(id) + '/lock';
        client._request(url, 'DELETE', null, null, callback);
    };
};
