/**
 * Copyright (c) 2015 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var _ = require('lodash');

module.exports = function(client) {
    client.auth = {};

    /**
     * Log in using local authentication
     *
     * @param  {String}         username                The username for the user
     * @param  {String}         password                The password for the user
     * @param  {Function}       callback                Standard callback function
     * @param  {Object}         callback.err            An error that occurred, if any
     * @param  {Object}         callback.body           The JSON response from the REST API
     * @param  {Response}       callback.response       The response object as returned by requestjs
     * @see gh-auth/lib/rest.js for more information
     */
    client.auth.login = function(username, password, callback) {
        client._request('/api/auth/login', 'POST', {
            'username': username,
            'password': password
        }, null, callback);
    };

    /**
     * Log out
     *
     * @param  {Function}       callback                Standard callback function
     * @param  {Object}         callback.err            An error that occurred, if any
     * @param  {Object}         callback.body           The JSON response from the REST API
     * @param  {Response}       callback.response       The response object as returned by requestjs
     * @see gh-auth/lib/rest.js for more information
     */
    client.auth.logout = function(callback) {
        client._request('/api/auth/logout', 'POST', null, null, callback);
    };

    /**
     * Redirect a user from an application to the SP
     *
     * @param  {String}         redirectUrl         The URL where the user should be redirect to once he succesfully authenticates
     * @param  {Function}       callback            Standard callback method
     * @param  {Object}         callback.err        An error object, if any
     * @param  {String}         callback.body       The response body
     * @param  {Object}         callback.response   The HTTP response object
     * @see gh-auth/lib/rest.js for more information
     * @api private
     */
    client.auth.shibbolethApplicationRedirect = function(redirectUrl, callback) {
        client._request('/api/auth/shibboleth', 'POST', {'redirectUrl': redirectUrl}, null, callback);
    };

    /**
     * Redirect a user from the SP to the IdP
     *
     * @param  {Object}         params                  The query string parameters for this endpoint
     * @param  {Number}         params.app              The id of the application on which the user wants to authenticate
     * @param  {String}         params.signature        The signature for the application id
     * @param  {Number}         params.expires          The time in ms since epoch when the signature expires
     * @param  {Function}       callback                Standard callback method
     * @param  {Object}         callback.err            An error object, if any
     * @param  {String}         callback.body           The response body
     * @param  {Object}         callback.response       The HTTP response object
     * @see gh-auth/lib/rest.js for more information
     * @api private
     */
    client.auth.shibbolethSPRedirect = function(params, callback) {
        client._request('/api/auth/shibboleth/sp', 'GET', params, null, callback);
    };

    /**
     * The request Apache's mod_shib would make to our app server once a user authenticates
     *
     * @param  {Object}         attributes          The attributes that should be sent to the app server
     * @param  {Function}       callback            Standard callback method
     * @param  {Object}         callback.err        An error object, if any
     * @param  {String}         callback.body       The response body
     * @param  {Object}         callback.response   The HTTP response object
     * @see gh-auth/lib/rest.js for more information
     * @api private
     */
    client.auth.shibbolethSPCallback = function(attributes, callback) {
        client._request('/api/auth/shibboleth/sp/callback', 'GET', null, attributes, callback);
    };

    /**
     * Send a request to the application callback endpoint for Shibboleth authentication
     *
     * @param  {Object}         params              The query string parameters for this endpoint
     * @param  {String}         params.userId       The id of the user that will be signing in
     * @param  {String}         params.signature    A signature for the user id
     * @param  {Number}         params.expires      The time in ms since epoch when the signature expires
     * @param  {Function}       callback            Standard callback method
     * @param  {Object}         callback.err        An error object, if any
     * @param  {String}         callback.body       The response body
     * @param  {Object}         callback.response   The HTTP response object
     * @see gh-auth/lib/rest.js for more information
     * @api private
     */
    client.auth.shibbolethApplicationCallback = function(params, callback) {
        client._request('/api/auth/shibboleth/callback', 'GET', params, null, callback);
    };

    /**
     * Create an oauth client
     *
     * @param  {String}         displayName         The display name of the client
     * @param  {String}         redirectUri         The redirect uri of the client
     * @param  {Object}         [opts]              Optional arguments
     * @param  {Number}         [opts.appId]        The app id on which to create the client
     * @param  {Function}       callback            Standard callback function
     * @param  {Object}         callback.err        An error that occurred, if any
     * @param  {OauthClient}    callback.body       The oauth client
     * @param  {Object}         callback.response   The HTTP response object
     */
    client.auth.createOauthClient = function(displayName, redirectUri, opts, callback) {
        opts = _.ghOptional(opts);
        var params = {
            'app': opts.appId,
            'displayName': displayName,
            'redirectUri': redirectUri
        };
        client._request('/api/auth/oauth/client', 'POST', params, null, callback);
    };

    /**
     * Update an oauth client
     *
     * @param  {Number}         clientId                The id of the client to update
     * @param  {Object}         fields                  Object containing the field updates to apply
     * @param  {String}         [fields.displayName]    The updated display name of the client
     * @param  {String}         [fields.redirectUri]    The updated redirect uri of the client
     * @param  {Function}       callback                Standard callback function
     * @param  {Object}         callback.err            An error that occurred, if any
     * @param  {OauthClient}    callback.body           The oauth client
     * @param  {Object}         callback.response       The HTTP response object
     */
    client.auth.updateOauthClient = function(clientId, fields, callback) {
        client._request('/api/auth/oauth/client/' + client.util.encodeURIComponent(clientId), 'POST', fields, null, callback);
    };

    /**
     * Disable an oauth client
     *
     * @param  {Number}         clientId            The id of the client to disable
     * @param  {Function}       callback            Standard callback function
     * @param  {Object}         callback.err        An error that occurred, if any
     * @param  {OauthClient}    callback.body       The oauth client
     * @param  {Object}         callback.response   The HTTP response object
     */
    client.auth.disableOauthClient = function(clientId, callback) {
        client._request('/api/auth/oauth/client/' + client.util.encodeURIComponent(clientId) + '/disable', 'POST', null, null, callback);
    };

    /**
     * Enable an oauth client
     *
     * @param  {Number}         clientId            The id of the client to enable
     * @param  {Function}       callback            Standard callback function
     * @param  {Object}         callback.err        An error that occurred, if any
     * @param  {OauthClient}    callback.body       The oauth client
     * @param  {Object}         callback.response   The HTTP response object
     */
    client.auth.enableOauthClient = function(clientId, callback) {
        client._request('/api/auth/oauth/client/' + client.util.encodeURIComponent(clientId) + '/enable', 'POST', null, null, callback);
    };

    /**
     * Regenerate an oauth client secret
     *
     * @param  {Number}         clientId            The id of the client whose secret to regenerate
     * @param  {Function}       callback            Standard callback function
     * @param  {Object}         callback.err        An error that occurred, if any
     * @param  {OauthClient}    callback.body       The oauth client
     * @param  {Object}         callback.response   The HTTP response object
     */
    client.auth.regenerateOauthClientSecret = function(clientId, callback) {
        client._request('/api/auth/oauth/client/' + client.util.encodeURIComponent(clientId) + '/regenerateSecret', 'POST', null, null, callback);
    };

    /**
     * Get a list of oauth clients
     *
     * @param  {Object}             [opts]              Optional arguments
     * @param  {Number}             [opts.appId]        The app id whose clients to list
     * @param  {Number}             [opts.limit]        The maximum number of clients to retrieve
     * @param  {Number}             [opts.offset]       The offset index at which to return clients
     * @param  {Function}           callback            Standard callback function
     * @param  {Object}             callback.err        An error that occurred, if any
     * @param  {OauthClientList}    callback.body       The oauth client list
     * @param  {Object}             callback.response   The HTTP response object
     */
    client.auth.getOauthClients = function(opts, callback) {
        opts = _.ghOptional(opts);
        var params = {
            'app': opts.appId,
            'offset': opts.offset,
            'limit': opts.limit
        };
        client._request('/api/auth/oauth/client', 'GET', params, null, callback);
    };

    /**
     * Get an oauth client
     *
     * @param  {Number}         clientId            The id of the client to get
     * @param  {Function}       callback            Standard callback function
     * @param  {Object}         callback.err        An error that occurred, if any
     * @param  {OauthClient}    callback.body       The oauth client
     * @param  {Object}         callback.response   The HTTP response object
     */
    client.auth.getOauthClient = function(clientId, callback) {
        client._request('/api/auth/oauth/client/' + client.util.encodeURIComponent(clientId), 'GET', null, null, callback);
    };

    /**
     * Grant an oauth authorization code
     *
     * @param  {Number}         clientId                The id of the client to which to grant the authorization code
     * @param  {Object}         [opts]                  Optional arguments
     * @param  {String}         [opts.responseType]     The type of response, if specified, only "code" is currently supported
     * @param  {Number}         [opts.redirectUri]      Provided for compliance, but currently unused. Successful grants are always redirected to the client's configured redirect uri
     * @param  {Number}         [opts.forUserId]        The id of the user for which to perform the grant, if not the current user. If unspecified, authorization code will be granted for the currently authenticated user. Only available for amdministrators
     * @param  {Function}       callback                Standard callback function
     * @param  {Object}         callback.err            An error that occurred, if any
     * @param  {OauthClient}    callback.body           The response body
     * @param  {Object}         callback.response       The HTTP response object. If successful, this will be a redirect to the redirect uri with query string parameter "code"
     */
    client.auth.grantOauthAuthCode = function(clientId, opts, callback) {
        opts = _.ghOptional(opts, {'responseType': 'code'});
        var params = {
            'response_type': opts.responseType,
            'client_id': clientId,
            'redirect_uri': opts.redirectUri,
            'for_user_id': opts.forUserId
        };
        client._request('/api/auth/oauth/grant', 'POST', params, null, callback);
    };

    /**
     * Exchange an authorization code for an access token
     *
     * @param  {Number}                     clientId            The id of the client to which to grant the authorization code
     * @param  {String}                     clientSecret        The secret of the client to which to grant the authorization code
     * @param  {String}                     code                The authorization code to exchange for an access token
     * @param  {String}                     redirectUri         The redirect uri of the client to which to grant the authorization code
     * @param  {Object}                     [opts]              Optional arguments
     * @param  {String}                     [opts.grantType]    The type of OAuth grant to perform. Only "authorization_code" is supported, and it is the default
     * @param  {Function}                   callback            Standard callback function
     * @param  {Object}                     callback.err        An error that occurred, if any
     * @param  {OauthAccessTokenExchange}   callback.body       The access token exchange result
     * @param  {Object}                     callback.response   The HTTP response object
     */
    client.auth.exchangeOauthAuthCode = function(clientId, clientSecret, code, redirectUri, opts, callback) {
        opts = _.ghOptional(opts, {'grantType': 'authorization_code'});
        var params = {
            'grant_type': opts.grantType,
            'code': code,
            'client_id': clientId,
            'client_secret': clientSecret,
            'redirect_uri': redirectUri
        };
        client._request('/api/auth/oauth/exchange', 'POST', params, null, callback);
    };

    /**
     * Get a list of oauth access tokens belonging to a user
     *
     * @param  {Number}                 userId              The id of the user whose access tokens to list
     * @param  {Object}                 [opts]              Optional arguments
     * @param  {Number}                 [opts.limit]        The maximum number of access tokens to retrieve
     * @param  {Number}                 [opts.offset]       The offset index at which to return access tokens
     * @param  {Function}               callback            Standard callback function
     * @param  {Object}                 callback.err        An error that occurred, if any
     * @param  {OauthAccessTokenList}   callback.body       The oauth access token list
     * @param  {Object}                 callback.response   The HTTP response object
     */
    client.auth.getOauthAccessTokensByUser = function(userId, opts, callback) {
        opts = _.ghOptional(opts);
        client._request('/api/auth/oauth/accessToken/user/' + client.util.encodeURIComponent(userId), 'GET', opts, null, callback);
    };

    /**
     * Delete an oauth access token by its unique token value
     *
     * @param  {String}     token               The token value of the access token to delete
     * @param  {Function}   callback            Standard callback function
     * @param  {Object}     callback.err        An error that occurred, if any
     * @param  {String}     callback.body       The response body
     * @param  {Object}     callback.response   The HTTP response object
     */
    client.auth.deleteOauthAccessTokenByToken = function(token, callback) {
        var params = {
            'token': token
        };
        client._request('/api/auth/oauth/accessToken/token', 'DELETE', params, null, callback);
    };
};
