/**
 * Copyright (c) 2015 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var _ = require('lodash');
var assert = require('assert');
var fs = require('fs');
var moment = require('moment');
var path = require('path');
var util = require('util');

var Rollover = require('gh-series/lib/internal/patterns/cambridge/rollover');

/**
 * Get the all the combinations of pairs from items.
 *
 * `_pairwiseCombinations(['a', 'b', 'c'])` will return:
 *
 * ```
 * [
 *   ['a', 'b'],
 *   ['a', 'c'],
 *   ['b', 'a'],
 *   ['b', 'c'],
 *   ['c', 'a'],
 *   ['c', 'b']
 * ]
 * ```
 *
 * @param  {Number[]}   items   An array of items for which all possible pair combinations should be returned
 * @return {Number[]}           All the possible pair combinations
 * @api private
 */
var _pairwiseCombinations = function(items) {
    var pairs = [];
    for (var i = 0; i < items.length; ++i) {
        for (var j = 0; j < items.length; j++) {
            if (j !== i) {
                pairs.push([items[i], items[j]]);
            }
        }
    }
    return pairs;
};

describe('Rollover', function() {

    /**
     * Test timestamp roll over against a dataset of testcases containing actual timestamps for
     * every day in every term of several academic years.
     *
     * data/rollover-testcases.json is generated by the rollover_testcases
     * management command from https://github.com/CUL-DigitalServices/timetable-3
     */
    it('verify timestamps are rolled over from one academic year to another correctly', function() {
        // This tests verifies tens of thousands of possible dates, so it can take a while
        this.timeout(1000 * 10);

        var testData = require('./data/rollover-testcases.json');

        // The rollover code is currently hard-coded to roll over in time local to Europe/London,
        // so we need to ensure the dataset contains times local to London.
        assert.strictEqual(testData.roll_zone, 'Europe/London');

        // The years to test rolling between
        var rolls = _pairwiseCombinations(testData.years);

        // Getting all the possible pairs in an array of length n
        // results in an array of length: n^2 - n
        assert.strictEqual(rolls.length, (Math.pow(testData.years.length, 2) - testData.years.length));

        var count = 0;
        _.each(rolls, function(pair) {
            var yearFrom = pair[0];
            var yearTo = pair[1];

            assert.ok(_.isNumber(yearFrom));
            assert.ok(_.isNumber(yearTo));

            _.each(testData.testcases, function(testcase) {
                assert.ok(_.isObject(testcase));
                assert.ok(testcase[yearFrom]);
                assert.ok(testcase[yearTo]);

                // Timestamps in the test data are UTC
                assert.strictEqual(moment.tz(testcase[yearFrom], 'UTC').format(), testcase[yearFrom]);

                // Roll over the the "from" date and verify the correct date is returned
                var from = testcase[yearFrom];
                var rolledOverDate = Rollover.rollOverTimestamp(from, yearFrom, yearTo);
                assert.strictEqual(rolledOverDate, testcase[yearTo]);
                count++;
            });
        });

        // Ensure we completed the expected number of test cases
        assert.strictEqual(count, rolls.length * testData.testcases.length);
    });

    /**
     * Verify dateInBetween returns the day between two dates
     */
    it('verify dateInBetween returns the day between two dates', function() {
        var cases = [
            {'a': [2014, 1, 5], 'b': [2014, 1, 6], 'expected': '2014-02-05T00:00:00+00:00'},
            {'a': [2014, 1, 5], 'b': [2014, 1, 7], 'expected': '2014-02-06T00:00:00+00:00'},
            {'a': [2014, 1, 5], 'b': [2014, 1, 10], 'expected': '2014-02-07T00:00:00+00:00'},
            {'a': [2014, 1, 5], 'b': [2014, 1, 15], 'expected': '2014-02-10T00:00:00+00:00'}
        ];

        _.each(cases, function(testcase) {
            var between = Rollover.dateInBetween(moment.utc(testcase.a), moment.utc(testcase.b));
            assert.strictEqual(between.format(), testcase.expected);
        });
    });

    /**
     * Verify getTerm returns the term nearest a timestamp
     */
    it('verify getTerm returns the term nearest a timestamp', function() {
        var testcases = [
            {'date': [2014, 11, 5], 'year': 2014, 'expected': 0},
            {'date': [2014, 5, 5], 'year': 2014, 'expected': 0},
            {'date': [2015, 0, 1], 'year': 2014, 'expected': 1},
            {'date': [2015, 2, 20], 'year': 2014, 'expected': 1},
            {'date': [2015, 3, 10], 'year': 2014, 'expected': 2},
            {'date': [2015, 3, 25], 'year': 2014, 'expected': 2},
            {'date': [2015, 7, 1], 'year': 2014, 'expected': 2}
        ];

        _.each(testcases, function(tc) {
            assert.strictEqual(Rollover.getTerm(moment.utc(tc.date), tc.year), tc.expected);
        });
    });
});
