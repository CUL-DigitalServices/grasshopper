/**
 * Copyright (c) 2015 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var _ = require('lodash');
var assert = require('assert');
var moment = require('moment');

var EventsTestUtil = require('gh-events/tests/util');
var GroupsTestsUtil = require('gh-groups/tests/util');
var TestsUtil = require('gh-tests');
var UsersTestsUtil = require('gh-users/tests/util');

var SeriesTestsUtil = require('./util');

describe('Event series', function() {

    describe('Adding events to series', function() {

        /**
         * Test that verifies an event can be added to a serie
         */
        it('verify an event can be added to a serie', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, false, function(simon) {

                // Create an event
                var start = moment().format();
                var end = moment().add(2, 'hour').format();
                EventsTestUtil.assertCreateEvent(simon.client, 'Test event', start, end, null, function(event) {

                    // Create a serie
                    SeriesTestsUtil.assertCreateSerie(simon.client, 'Test serie', null, function(serie) {

                        // Add an event to a serie
                        SeriesTestsUtil.assertAddSeriesEvents(simon.client, serie.id, [event.id], function() {

                            // Verify the event has been added
                            SeriesTestsUtil.assertGetSeriesEvents(simon.client, serie.id, null, null, null, [event], function(events) {
                                return callback();
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies validation when adding an event to a serie
         */
        it('verify an event can be added to a serie validation', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, false, function(simon) {

                // Create an event
                var start = moment().format();
                var end = moment().add(2, 'hour').format();
                EventsTestUtil.assertCreateEvent(simon.client, 'Test event', start, end, null, function(event) {

                    // Create a serie
                    SeriesTestsUtil.assertCreateSerie(simon.client, 'Test serie', null, function(serie) {

                        // Invalid serie id
                        SeriesTestsUtil.assertAddSeriesEventsFails(simon.client, 'not a number', [event.id], 400, function() {

                            // Unknown serie id
                            SeriesTestsUtil.assertAddSeriesEventsFails(simon.client, -1, [event.id], 404, function() {

                                // Invalid event id
                                SeriesTestsUtil.assertAddSeriesEventsFails(simon.client, serie.id, ['not a number'], 400, function() {

                                    // Unknown event id
                                    SeriesTestsUtil.assertAddSeriesEventsFails(simon.client, serie.id, [-1], 404, function() {

                                        // Invalid event id
                                        SeriesTestsUtil.assertAddSeriesEventsFails(simon.client, serie.id, [event.id, 'not a number'], 400, function() {

                                            // Unknown event id
                                            SeriesTestsUtil.assertAddSeriesEventsFails(simon.client, serie.id, [event.id, -1], 404, function() {

                                                // Sanity-check no events have been added
                                                SeriesTestsUtil.assertGetSeriesEvents(simon.client, serie.id, null, null, null, [], function(events) {
                                                    return callback();
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies authorization when adding an event to a serie
         */
        it('verify an event can be added to a serie authorization', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 2, false, function(simon, nico) {

                // Create a test serie
                SeriesTestsUtil.assertCreateSerie(simon.client, 'Test serie', null, function(serie) {

                    // Generate events
                    var calendarStart = moment().subtract(1, 'day').format();
                    var calendarEnd = moment().add(30, 'day').format();
                    EventsTestUtil.generateTestEvents(simon.client, 3, calendarStart, calendarEnd, function(events) {
                        var eventIds = _.pluck(events, 'id');

                        // Anonymous users cannot add events to a serie
                        TestsUtil.getAnonymousAppUserClient(global.tests.apps.cam2013, function(anonymousClient) {
                            SeriesTestsUtil.assertAddSeriesEventsFails(anonymousClient, serie.id, eventIds, 401, function() {

                                // Users who are not part of the serie's group cannot add events to it
                                SeriesTestsUtil.assertAddSeriesEventsFails(nico.client, serie.id, eventIds, 401, function() {

                                    // Application admins from another application cannot add events to a serie
                                    SeriesTestsUtil.assertAddSeriesEventsFails(global.tests.admins.cam2014.client, serie.id, eventIds, 401, function() {

                                        // Users who are members of the serie's group can add events to it
                                        var memberUpdate = {};
                                        memberUpdate[nico.profile.id] = true;
                                        GroupsTestsUtil.assertUpdateGroupMembers(global.tests.admins.cam2013.client, serie.GroupId, memberUpdate, function() {
                                            SeriesTestsUtil.assertAddSeriesEvents(nico.client, serie.id, events[0].id, function() {

                                                // Application admins can add series events
                                                SeriesTestsUtil.assertAddSeriesEvents(global.tests.admins.cam2013.client, serie.id, events[1].id, function() {

                                                    // Verify both events were added
                                                    SeriesTestsUtil.assertGetSeriesEvents(simon.client, serie.id, null, null, null, [events[0], events[1]], function(events) {
                                                        return callback();
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that events from another application cannot be added to a serie
         */
        it('verify events from another application cannot be added to a serie', function(callback) {
            // Create some events on the cambridge application
            var calendarStart = moment().subtract(1, 'day').format();
            var calendarEnd = moment().add(30, 'day').format();
            EventsTestUtil.generateTestEvents(global.tests.admins.cam2013.client, 3, calendarStart, calendarEnd, function(camEvents) {
                var camEventIds = _.pluck(camEvents, 'id');

                // Create some events on the oxford application
                EventsTestUtil.generateTestEvents(global.tests.admins.oxford2013.client, 3, calendarStart, calendarEnd, function(oxfordEvents) {
                    var oxfordEventIds = _.pluck(oxfordEvents, 'id');

                    // Create a serie on the cambridge application
                    SeriesTestsUtil.assertCreateSerie(global.tests.admins.cam2013.client, 'Test serie', null, function(serie) {

                        // Verify the oxford events cannot be added to the cambridge serie
                        SeriesTestsUtil.assertAddSeriesEventsFails(global.tests.admins.cam2013.client, serie.id, oxfordEventIds, 400, function() {

                            // Sanity check the cambridge events can be added to the cambridge serie
                            SeriesTestsUtil.assertAddSeriesEvents(global.tests.admins.cam2013.client, serie.id, camEventIds, function() {
                                return callback();
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies an event cannot be added to a serie twice
         */
        it('verify an event cannot be added to a serie twice', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, false, function(simon) {

                // Create an event
                var start = moment().format();
                var end = moment().add(2, 'hour').format();
                EventsTestUtil.assertCreateEvent(simon.client, 'Test event', start, end, null, function(event) {

                    // Create a serie
                    SeriesTestsUtil.assertCreateSerie(simon.client, 'Test serie', null, function(serie) {

                        // Add the event to the serie
                        SeriesTestsUtil.assertAddSeriesEvents(simon.client, serie.id, [event.id], function() {

                            // Try to add it again
                            SeriesTestsUtil.assertAddSeriesEvents(simon.client, serie.id, [event.id], function() {

                                // Verify the event has been added only once
                                SeriesTestsUtil.assertGetSeriesEvents(simon.client, serie.id, null, null, null, [event], function(events) {
                                    return callback();
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    describe('Removing events from a serie', function(callback) {

        /**
         * Test that verifies an event can be removed from a serie
         */
        it('verify an event can be removed from a serie', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, false, function(simon) {

                // Create an event
                var start = moment().format();
                var end = moment().add(2, 'hour').format();
                EventsTestUtil.assertCreateEvent(simon.client, 'Test event blabal', start, end, null, function(event) {

                    // Create a serie
                    SeriesTestsUtil.assertCreateSerie(simon.client, 'Test serie', null, function(serie) {

                        // Add the event to the serie
                        SeriesTestsUtil.assertAddSeriesEvents(simon.client, serie.id, [event.id], function() {

                            // Verify the event has been added
                            SeriesTestsUtil.assertGetSeriesEvents(simon.client, serie.id, null, null, null, [event], function(events) {

                                // Remove the event from the serie
                                SeriesTestsUtil.assertDeleteSeriesEvents(simon.client, serie.id, [event.id], function() {

                                    // Verify the event has been removed
                                    SeriesTestsUtil.assertGetSeriesEvents(simon.client, serie.id, null, null, null, [], function(events) {
                                        return callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies validation when adding an event to a serie
         */
        it('verify an event can be removed from a serie validation', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, false, function(simon) {

                // Create an event
                var start = moment().format();
                var end = moment().add(2, 'hour').format();
                EventsTestUtil.assertCreateEvent(simon.client, 'Test event', start, end, null, function(event) {

                    // Create a serie
                    SeriesTestsUtil.assertCreateSerie(simon.client, 'Test serie', null, function(serie) {

                        // Add the event
                        SeriesTestsUtil.assertAddSeriesEvents(simon.client, serie.id, [event.id], function() {

                            // Invalid serie id
                            SeriesTestsUtil.assertDeleteSeriesEventsFails(simon.client, 'not a number', [event.id], 400, function() {

                                // Unknown serie id
                                SeriesTestsUtil.assertDeleteSeriesEventsFails(simon.client, -1, [event.id], 404, function() {

                                    // Invalid event id
                                    SeriesTestsUtil.assertDeleteSeriesEventsFails(simon.client, serie.id, ['not a number'], 400, function() {

                                        // Unknown event id
                                        SeriesTestsUtil.assertDeleteSeriesEventsFails(simon.client, serie.id, [-1], 400, function() {

                                            // Invalid event id
                                            SeriesTestsUtil.assertDeleteSeriesEventsFails(simon.client, serie.id, [event.id, 'not a number'], 400, function() {

                                                // Unknown event id
                                                SeriesTestsUtil.assertDeleteSeriesEventsFails(simon.client, serie.id, [event.id, -1], 400, function() {

                                                    // An event that's not related to the serie
                                                    EventsTestUtil.assertCreateEvent(simon.client, 'Test event', start, end, null, function(otherEvent) {
                                                        SeriesTestsUtil.assertDeleteSeriesEventsFails(simon.client, serie.id, [otherEvent.id], 400, function() {

                                                            // Sanity-check no events have been removed
                                                            SeriesTestsUtil.assertGetSeriesEvents(simon.client, serie.id, null, null, null, [event], function(events) {
                                                                return callback();
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies authorization when removing an event from a serie
         */
        it('verify an event can be removed from a serie authorization', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 2, false, function(simon, nico) {

                // Create a test serie
                SeriesTestsUtil.assertCreateSerie(simon.client, 'Test serie', null, function(serie) {

                    // Generate events
                    var calendarStart = moment().subtract(1, 'day').format();
                    var calendarEnd = moment().add(30, 'day').format();
                    EventsTestUtil.generateTestEvents(simon.client, 3, calendarStart, calendarEnd, function(events) {
                        var eventIds = _.pluck(events, 'id');

                        // Add the events to the serie
                        SeriesTestsUtil.assertAddSeriesEvents(simon.client, serie.id, eventIds, function() {

                            // Anonymous users cannot remove events from a serie
                            TestsUtil.getAnonymousAppUserClient(global.tests.apps.cam2013, function(anonymousClient) {
                                SeriesTestsUtil.assertDeleteSeriesEventsFails(anonymousClient, serie.id, eventIds, 401, function() {

                                    // Users who are not part of the serie's group cannot remove events from a serie
                                    SeriesTestsUtil.assertDeleteSeriesEventsFails(nico.client, serie.id, eventIds, 401, function() {

                                        // Application admins from another application cannot remove events from a serie
                                        SeriesTestsUtil.assertDeleteSeriesEventsFails(global.tests.admins.cam2014.client, serie.id, eventIds, 401, function() {

                                            // Users who are members of the serie's group can remove events from a serie
                                            var memberUpdate = {};
                                            memberUpdate[nico.profile.id] = true;
                                            GroupsTestsUtil.assertUpdateGroupMembers(global.tests.admins.cam2013.client, serie.GroupId, memberUpdate, function() {
                                                SeriesTestsUtil.assertDeleteSeriesEvents(nico.client, serie.id, events[0].id, function() {

                                                    // Application admins can remove events from a serie
                                                    SeriesTestsUtil.assertDeleteSeriesEvents(global.tests.admins.cam2013.client, serie.id, events[1].id, function() {

                                                        // Verify both events were removed and only one event is left
                                                        SeriesTestsUtil.assertGetSeriesEvents(simon.client, serie.id, null, null, null, [events[2]], function(events) {
                                                            return callback();
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    describe('Getting the events in a serie', function() {

        /**
         * Test that verifies that events in a serie can be retrieved
         */
        it('verify getting the events in a serie', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, false, function(simon) {

                // Create a serie
                SeriesTestsUtil.assertCreateSerie(simon.client, 'Test serie', null, function(serie) {

                    // Generate events
                    var calendarStart = moment().subtract(1, 'day').format();
                    var calendarEnd = moment().add(30, 'day').format();
                    EventsTestUtil.generateTestEvents(simon.client, 3, calendarStart, calendarEnd, function(events) {

                        // Add the events to the serie
                        var eventIds = _.pluck(events, 'id');
                        SeriesTestsUtil.assertAddSeriesEvents(simon.client, serie.id, eventIds, function() {

                            // Get the serie's events
                            SeriesTestsUtil.assertGetSeriesEvents(simon.client, serie.id, null, null, null, events, function(events) {
                                return callback();
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies validation when getting the events in a serie
         */
        it('verify getting the events in a serie validation', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, false, function(simon) {

                // Create a serie
                SeriesTestsUtil.assertCreateSerie(simon.client, 'Test serie', null, function(serie) {

                    // Generate events
                    var calendarStart = moment().subtract(1, 'day').format();
                    var calendarEnd = moment().add(30, 'day').format();
                    EventsTestUtil.generateTestEvents(simon.client, 3, calendarStart, calendarEnd, function(events) {

                        // Add the events to the serie
                        var eventIds = _.pluck(events, 'id');
                        SeriesTestsUtil.assertAddSeriesEvents(simon.client, serie.id, eventIds, function() {

                            // Invalid serie id
                            SeriesTestsUtil.assertGetSeriesEventsFails(simon.client, 'not a number', null, null, null, 400, function() {

                                // Unknown serie
                                SeriesTestsUtil.assertGetSeriesEventsFails(simon.client, -1, null, null, null, 404, function() {
                                    return callback();
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies authorization when getting the events in a serie
         */
        it('verify getting the events in a serie authorization', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, false, function(simon) {
                TestsUtil.generateTestUsers(global.tests.apps.cam2014, 1, false, function(nico) {

                    // Create a serie
                    SeriesTestsUtil.assertCreateSerie(simon.client, 'Test serie', null, function(serie) {

                        // Generate events
                        var calendarStart = moment().subtract(1, 'day').format();
                        var calendarEnd = moment().add(30, 'day').format();
                        EventsTestUtil.generateTestEvents(simon.client, 3, calendarStart, calendarEnd, function(events) {

                            // Add the events to the serie
                            var eventIds = _.pluck(events, 'id');
                            SeriesTestsUtil.assertAddSeriesEvents(simon.client, serie.id, eventIds, function() {

                                // Getting the events in serie on another application is not allowed
                                SeriesTestsUtil.assertGetSeriesEventsFails(nico.client, serie.id, null, null, null, 401, function() {
                                    return callback();
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies a serie's events can be paged
         */
        it('verify paging', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, false, function(simon) {

                // Create a serie
                SeriesTestsUtil.assertCreateSerie(simon.client, 'Test serie', null, function(serie) {

                    // Generate events
                    var calendarStart = moment().subtract(1, 'day').format();
                    var calendarEnd = moment().add(30, 'day').format();
                    EventsTestUtil.generateTestEvents(simon.client, 30, calendarStart, calendarEnd, function(events) {

                        // Add the events to the serie
                        var eventIds = _.pluck(events, 'id');
                        SeriesTestsUtil.assertAddSeriesEvents(simon.client, serie.id, eventIds, function() {

                            // Get the serie's event calendar
                            SeriesTestsUtil.assertGetSeriesEvents(simon.client, serie.id, null, null, null, null, function(firstPage) {
                                // Verify the first 10 events are returned
                                assert.strictEqual(firstPage.results.length, 10);

                                // Get the next 10 events
                                SeriesTestsUtil.assertGetSeriesEvents(simon.client, serie.id, null, 10, null, null, function(secondPage) {
                                    // Verify 10 events are returned
                                    assert.strictEqual(secondPage.results.length, 10);

                                    // Verify these events are not returned in the first set of results
                                    // and that they are further in the future
                                    var firstPageEventIds = _.pluck(firstPage.results, 'id');
                                    _.each(secondPage.results, function(event) {
                                        assert.ok(!_.contains(firstPageEventIds, event.id));
                                        assert.ok(event.start >= firstPage.results[9].start);
                                    });

                                    // Get the last 10
                                    SeriesTestsUtil.assertGetSeriesEvents(simon.client, serie.id, null, 20, null, null, function(thirdPage) {
                                        // Verify 10 events are returned
                                        assert.strictEqual(thirdPage.results.length, 10);

                                        // Verify these events are not returned in the second set of results
                                        // and that they are further in the future
                                        var secondPageEventIds = _.pluck(secondPage.results, 'id');
                                        _.each(thirdPage.results, function(event) {
                                            assert.ok(!_.contains(firstPageEventIds, event.id));
                                            assert.ok(!_.contains(secondPageEventIds, event.id));
                                            assert.ok(event.start >= secondPage.results[9].start);
                                        });

                                        // There should be no more results
                                        SeriesTestsUtil.assertGetSeriesEvents(simon.client, serie.id, null, 30, null, null, function(thirdPage) {
                                            assert.strictEqual(thirdPage.results.length, 0);

                                            // Verify the limit parameter
                                            SeriesTestsUtil.assertGetSeriesEvents(simon.client, serie.id, 5, 0, null, null, function(page) {
                                                assert.strictEqual(page.results.length, 5);
                                                return callback();
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that organisers their personal information is hidden
         */
        it('verify organisers their personal information is hidden', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 2, false, function(simon, nico) {

                // Generate a test serie with some events
                var calendarStart = moment().subtract(1, 'day').format();
                var calendarEnd = moment().add(30, 'day').format();
                SeriesTestsUtil.generateSerieWithEvents(simon.client, 1, 10, calendarStart, calendarEnd, function(series) {
                    var serie = series[0];
                    var event = serie.events[0];

                    // Add Nico as an organiser
                    var update = {};
                    update[nico.profile.id] = true;
                    EventsTestUtil.assertUpdateEventOrganisers(simon.client, event.id, update, function() {

                        // Get the series events
                        SeriesTestsUtil.assertGetSeriesEvents(simon.client, serie.id, null, null, null, null, function(events) {

                            // Assert nico's personal information is hidden
                            var seenNico = false;
                            _.each(events.results, function(event) {
                                _.each(event.organisers, function(organiser) {
                                    if (_.isObject(organiser) && organiser.id === nico.profile.id) {
                                        UsersTestsUtil.assertUser(organiser, {'expectedUser': nico.profile, 'canViewAllFields': false});
                                        seenNico = true;
                                    }
                                });
                            });
                            assert.ok(seenNico);
                            return callback();
                        });
                    });
                });
            });
        });
    });
});
