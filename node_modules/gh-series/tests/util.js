/**
 * Copyright (c) 2014 "Fronteer LTD"
 * Grasshopper Serie Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var _ = require('lodash');
var assert = require('assert');

var EventsTestsUtil = require('gh-events/tests/util');
var TestsUtil = require('gh-tests');

/**
 * Assert that a serie has all expected properties
 *
 * @param  {Serie}              serie               The serie to assert the properties for
 * @param  {Serie}              expectedSerie       The serie to which the provided serie should be compared
 * @throws {AssertionError}                         Error thrown when an assertion failed
 */
var assertSerie = module.exports.assertSerie = function(serie, expectedSerie) {
    assert.ok(serie);
    assert.ok(serie.id);
    assert.ok(serie.AppId);
    assert.ok(serie.displayName);
    assert.ok(serie.createdAt);
    assert.ok(serie.updatedAt);
    assert.strictEqual(serie.id, expectedSerie.id);
    assert.strictEqual(serie.AppId, expectedSerie.AppId);
    assert.strictEqual(serie.displayName, expectedSerie.displayName);
    assert.strictEqual(serie.createdAt, expectedSerie.createdAt);
    assert.strictEqual(serie.updatedAt, expectedSerie.updatedAt);
};

/**
 * Assert that a new serie can be created
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {String}             displayName                     The name of the serie
 * @param  {Object}             [opts]                          A set of optional parameters
 * @param  {Number}             [opts.app]                      The id of the application to which this serie will belong
 * @param  {String}             [opts.description]              The description of the serie
 * @param  {Number}             [opts.group]                    The id of the group that can manage the serie
 * @param  {Function}           callback                        Standard callback function
 * @param  {Serie}              callback.serie                  The created serie
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertCreateSerie = module.exports.assertCreateSerie = function(client, displayName, opts, callback) {
    client.serie.createSerie(displayName, opts, function(err, createdSerie, response) {
        assert.ok(!err);
        assert.ok(createdSerie);
        assert.ok(createdSerie.id);
        assert.ok(createdSerie.createdAt);
        assert.ok(createdSerie.updatedAt);
        assert.strictEqual(createdSerie.displayName, displayName);
        return callback(createdSerie);
    });
};

/**
 * Assert that a serie can not be created
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {String}             displayName                     The name of the serie
 * @param  {Object}             [opts]                          A set of optional parameters
 * @param  {Number}             [opts.app]                      The id of the application to which this serie will belong
 * @param  {String}             [opts.description]              The description of the serie
 * @param  {Number}             [opts.group]                    The id of the group that can manage the serie
 * @param  {Number}             code                            The expected HTTP error code
 * @param  {Function}           callback                        Standard callback function
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertCreateSerieFails = module.exports.assertCreateSerieFails = function(client, displayName, opts, code, callback) {
    client.serie.createSerie(displayName, opts, function(err, serie, response) {
        assert.ok(err);
        assert.strictEqual(err.code, code);
        assert.ok(!serie);

        return callback();
    });
};

/**
 * Assert that a serie can be retrieved
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Number}             id                              The id of the serie to retrieve
 * @param  {Serie}              [expectedSerie]                 The expected serie to be retrieved
 * @param  {Function}           callback                        Standard callback function
 * @param  {Serie}              callback.serie                  The retrieved serie
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertGetSerie = module.exports.assertGetSerie = function(client, id, expectedSerie, callback) {
    client.serie.getSerie(id, function(err, serie) {
        assert.ok(!err);
        assert.ok(serie);
        assert.strictEqual(serie.id, id);
        if (expectedSerie) {
            assertSerie(serie, expectedSerie);
        }
        return callback(serie);
    });
};

/**
 * Assert that a serie can not be retrieved
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Number}             id                              The id of the serie to retrieve
 * @param  {Number}             code                            The expected HTTP error code
 * @param  {Function}           callback                        Standard callback function
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertGetSerieFails = module.exports.assertGetSerieFails = function(client, id, code, callback) {
    client.serie.getSerie(id, function(err, serie) {
        assert.ok(err);
        assert.strictEqual(err.code, code);
        assert.ok(!serie);
        return callback();
    });
};

/**
 * Assert that a serie can be updated
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Number}             id                              The id of the serie to update
 * @param  {Object}             update                          The updates to persist
 * @param  {Function}           callback                        Standard callback function
 * @param  {Serie}              callback.serie                  The updated serie
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertUpdateSerie = module.exports.assertUpdateSerie = function(client, id, update, callback) {
    client.serie.updateSerie(id, update, function(err, serie) {
        assert.ok(!err);
        assert.ok(serie);
        assert.strictEqual(serie.id, id);
        return callback(serie);
    });
};

/**
 * Assert that an serie can be updated
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Number}             id                              The id of the serie to update
 * @param  {Object}             update                          The updates to persist
 * @param  {Number}             code                            The expected HTTP error code
 * @param  {Function}           callback                        Standard callback function
 * @param  {Serie}              callback.serie                  The updated serie
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertUpdateSerieFails = module.exports.assertUpdateSerieFails = function(client, id, update, code, callback) {
    client.serie.updateSerie(id, update, function(err, serie) {
        assert.ok(err);
        assert.strictEqual(err.code, code);
        assert.ok(!serie);
        return callback();
    });
};

/**
 * Assert that a serie can be updated
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Number}             id                              The id of the serie to delete
 * @param  {Function}           callback                        Standard callback function
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertDeleteSerie = module.exports.assertDeleteSerie = function(client, id, callback) {
    client.serie.deleteSerie(id, function(err) {
        assert.ok(!err);
        return callback();
    });
};

/**
 * Assert that a serie can be updated
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Number}             id                              The id of the serie to delete
 * @param  {Number}             code                            The expected HTTP error code
 * @param  {Function}           callback                        Standard callback function
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertDeleteSerieFails = module.exports.assertDeleteSerieFails = function(client, id, code, callback) {
    client.serie.deleteSerie(id, function(err) {
        assert.ok(err);
        assert.strictEqual(err.code, code);
        return callback();
    });
};

/**
 * Assert that events can be added to a serie
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Number}             id                              The id of the serie to add events to
 * @param  {Number[]}           events                          The id(s) of the event(s) to add to a serie
 * @param  {Function}           callback                        Standard callback function
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertAddSeriesEvents = module.exports.assertAddSeriesEvents = function(client, id, events, callback) {
    client.serie.addSeriesEvents(id, events, function(err) {
        assert.ok(!err);
        return callback();
    });
};

/**
 * Assert that events can not be added to a serie
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Number}             id                              The id of the serie to add events to
 * @param  {Number[]}           events                          The id(s) of the event(s) to add to a serie
 * @param  {Number}             code                            The expected HTTP error code
 * @param  {Function}           callback                        Standard callback function
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertAddSeriesEventsFails = module.exports.assertAddSeriesEventsFails = function(client, id, events, code, callback) {
    client.serie.addSeriesEvents(id, events, function(err) {
        assert.ok(err);
        assert.strictEqual(err.code, code);
        return callback();
    });
};


/**
 * Assert that events can be removed from a serie
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Number}             id                              The id of the serie to remove events from
 * @param  {Number[]}           events                          The id(s) of the event(s) to remove from a serie
 * @param  {Function}           callback                        Standard callback function
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertDeleteSeriesEvents = module.exports.assertDeleteSeriesEvents = function(client, id, events, callback) {
    client.serie.deleteSeriesEvents(id, events, function(err) {
        assert.ok(!err);
        return callback();
    });
};

/**
 * Assert that events can not be removed from a serie
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Number}             id                              The id of the serie to remove events from
 * @param  {Number[]}           events                          The id(s) of the event(s) to remove from a serie
 * @param  {Number}             code                            The expected HTTP error code
 * @param  {Function}           callback                        Standard callback function
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertDeleteSeriesEventsFails = module.exports.assertDeleteSeriesEventsFails = function(client, id, events, code, callback) {
    client.serie.deleteSeriesEvents(id, events, function(err) {
        assert.ok(err);
        assert.strictEqual(err.code, code);
        return callback();
    });
};

/**
 * Assert that the events for a serie can be retrieved
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Number}             id                              The id of the serie for wich to get the events
 * @param  {Number}             [limit]                         The number of events that should be retrieved, defaults to 10
 * @param  {Number}             [offset]                        The number to start paging from, defaults to 0
 * @param  {Boolean}            [includeUpcoming]               Whether to only include upcoming events. Defaults to `true`
 * @param  {Number[]}           [events]                        The id(s) of the event(s) that should be in this calendar
 * @param  {Function}           callback                        Standard callback function
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertGetSeriesEvents = module.exports.assertGetSeriesEvents = function(client, id, limit, offset, upcoming, expectedEvents, callback) {
    client.serie.getSeriesEvents(id, limit, offset, upcoming, function(err, events) {
        assert.ok(!err);
        assert.ok(events);
        assert.ok(events.results);

        // Assert that the events are sorted based on their start times
        for (var i = 1; i < events.results.length; i++) {
            assert.ok(events.results[i].start > events.results[i - 1].start);
        }

        // Assert that the returned events are the ones we expected
        if (expectedEvents) {
            assert.strictEqual(events.results.length, expectedEvents.length);
            for (i = 0; i < events.results.length; i++) {
                assert.strictEqual(events.results[i].id, expectedEvents[i].id);
            }
        }

        return callback(events);
    });
};

/**
 * Assert that the events for a serie can not be retrieved
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Number}             id                              The id of the serie for wich to get the events
 * @param  {Number}             [limit]                         The number of events that should be retrieved, defaults to 10
 * @param  {Number}             [offset]                        The number to start paging from, defaults to 0
 * @param  {Boolean}            [includeUpcoming]               Whether to only include upcoming events. Defaults to `true`
 * @param  {Number}             code                            The expected HTTP error code
 * @param  {Function}           callback                        Standard callback function
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertGetSeriesEventsFails = module.exports.assertGetSeriesEventsFails = function(client, id, limit, offset, upcoming, code, callback) {
    client.serie.getSeriesEvents(id, limit, offset, upcoming, function(err, events) {
        assert.ok(err);
        assert.strictEqual(err.code, code);
        return callback();
    });
};

/**
 * Assert that the event calendar for a serie can be retrieved
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Number}             id                              The id of the serie for wich to get the event calendar
 * @param  {String}             start                           The start date for the calendar
 * @param  {String}             end                             The end date for the calendar
 * @param  {Event[]}            [events]                        The event(s) that should be in this calendar
 * @param  {Function}           callback                        Standard callback function
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertGetSeriesCalendar = module.exports.assertGetSeriesCalendar = function(client, id, start, end, expectedEvents, callback) {
    client.serie.getSeriesCalendar(id, start, end, function(err, calendar, response) {
        assert.ok(!err);

        // Assert the response is JSON
        assert.strictEqual(response.headers['content-type'], 'application/json; charset=utf-8');

        // Assert the returned results
        assert.ok(calendar);
        assert.ok(calendar.results);

        // Assert that the events are sorted based on their start times
        for (var i = 1; i < calendar.results.length; i++) {
            assert.ok(calendar.results[i].start > calendar.results[i - 1].start);
        }

        // Assert that the returned events are the ones we expected
        if (expectedEvents) {
            assert.strictEqual(calendar.results.length, expectedEvents.length);
            for (i = 0; i < calendar.results.length; i++) {
                assert.strictEqual(calendar.results[i].id, expectedEvents[i].id);
                assert.strictEqual(calendar.results[i].displayName, expectedEvents[i].displayName);
            }
        }

        return callback(calendar);
    });
};

/**
 * Assert that the json calendar for a serie can not be retrieved
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Number}             id                              The id of the serie for wich to get the event calendar
 * @param  {String}             start                           The start date for the calendar
 * @param  {String}             end                             The end date for the calendar
 * @param  {Number}             code                            The expected HTTP error code
 * @param  {Function}           callback                        Standard callback function
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertGetSeriesCalendarFails = module.exports.assertGetSeriesCalendarFails = function(client, id, start, end, code, callback) {
    client.serie.getSeriesCalendar(id, start, end, function(err, calendar) {
        assert.ok(err);
        assert.strictEqual(err.code, code);
        return callback();
    });
};

/**
 * Assert that the RSS event calendar for a serie can be retrieved
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Number}             id                              The id of the serie for wich to get the event calendar
 * @param  {String}             start                           The start date for the calendar
 * @param  {String}             end                             The end date for the calendar
 * @param  {Function}           callback                        Standard callback function
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertGetSeriesCalendarRss = module.exports.assertGetSeriesCalendarRss = function(client, id, start, end, expectedEvents, callback) {
    client.serie.getSeriesCalendarRss(id, start, end, function(err, calendar, response) {
        assert.ok(!err);

        // Assert the response is RSS
        assert.strictEqual(response.headers['content-type'], 'application/rss+xml; charset=utf-8');

        // Parss the RSS calendar
        TestsUtil.parseRssCalendar(calendar, function(calendar) {

            // Check if the returned events are the ones we expected
            if (expectedEvents) {
                if (_.isEmpty(expectedEvents)) {
                    // If no items should be returned, the RSS feed will not contain an `<item>` tag
                    assert.ok(!calendar.item);
                } else {
                    assert.strictEqual(calendar.item.length, expectedEvents.length);
                    for (i = 0; i < calendar.item.length; i++) {
                        var guid = calendar.item[i].guid[0];
                        var id = parseInt(guid.split('/').pop(), 10);
                        assert.strictEqual(id, expectedEvents[i].id);
                        assert.strictEqual(calendar.item[i].title[0], expectedEvents[i].displayName);
                    }
                }
            }

            return callback(calendar);
        });
    });
};

/**
 * Assert that the RSS calendar for a serie can not be retrieved
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Number}             id                              The id of the serie for wich to get the event calendar
 * @param  {String}             start                           The start date for the calendar
 * @param  {String}             end                             The end date for the calendar
 * @param  {Number}             code                            The expected HTTP error code
 * @param  {Function}           callback                        Standard callback function
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertGetSeriesCalendarRssFails = module.exports.assertGetSeriesCalendarRssFails = function(client, id, start, end, code, callback) {
    client.serie.getSeriesCalendarRss(id, start, end, function(err, calendar) {
        assert.ok(err);
        assert.strictEqual(err.code, code);
        return callback();
    });
};

/**
 * Assert that the iCal event calendar for a serie can be retrieved
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Number}             id                              The id of the serie for wich to get the event calendar
 * @param  {String}             start                           The start date for the calendar
 * @param  {String}             end                             The end date for the calendar
 * @param  {Function}           callback                        Standard callback function
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertGetSeriesCalendarIcal = module.exports.assertGetSeriesCalendarIcal = function(client, id, start, end, expectedEvents, callback) {
    client.serie.getSeriesCalendarIcal(id, start, end, function(err, calendar, response) {
        assert.ok(!err);

        // Assert the response is iCal
        assert.strictEqual(response.headers['content-type'], 'text/calendar; charset=utf-8');

        // Parse the iCal calendar
        TestsUtil.parseIcalCalendar(calendar, function(calendar) {

            // Check if the returned events are the ones we expected
            if (expectedEvents) {
                assert.strictEqual(calendar.subComponents.length, expectedEvents.length);
                for (i = 0; i < calendar.subComponents.length; i++) {
                    var uid = calendar.subComponents[i].fields.UID;
                    var id = parseInt(uid, 10);
                    assert.strictEqual(id, expectedEvents[i].id);
                    assert.strictEqual(calendar.subComponents[i].fields.DESCRIPTION, expectedEvents[i].displayName);
                }
            }

            return callback(calendar);
        });
    });
};

/**
 * Assert that the iCal calendar for a serie can not be retrieved
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Number}             id                              The id of the serie for wich to get the event calendar
 * @param  {String}             start                           The start date for the calendar
 * @param  {String}             end                             The end date for the calendar
 * @param  {Number}             code                            The expected HTTP error code
 * @param  {Function}           callback                        Standard callback function
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertGetSeriesCalendarIcalFails = module.exports.assertGetSeriesCalendarIcalFails = function(client, id, start, end, code, callback) {
    client.serie.getSeriesCalendarIcal(id, start, end, function(err, calendar) {
        assert.ok(err);
        assert.strictEqual(err.code, code);
        return callback();
    });
};

/**
 * Generate one or more series that each have a number of events
 *
 * @param  {RestClient}         client                  The REST client to make the requests with
 * @param  {Number}             nrOfSeries              The number of series that should be created
 * @param  {Number}             eventsPerSerie          The number of events in each serie
 * @param  {String}             rangeStart              The datetime when the events can start
 * @param  {String}             rangeEnd                The datetime when the events should end
 * @param  {Function}           callback                Standard callback function
 * @param  {Serie[]}            callback.series         The created series. Each serie will also hold an `events` key that lists all the events that were created for the serie
 */
var generateSerieWithEvents = module.exports.generateSerieWithEvents = function(client, nrOfSeries, eventsPerSerie, rangeStart, rangeEnd, callback, _series) {
    _series = _series || [];
    if (nrOfSeries === 0) {
        return callback(_series);
    }

    // Create the serie
    var displayName = TestsUtil.generateString(30);
    assertCreateSerie(client, displayName, null, function(serie) {

        // Create the events
        EventsTestsUtil.generateTestEvents(client, eventsPerSerie, rangeStart, rangeEnd, function(events) {

            // Add the events to the serie
            var eventIds = _.pluck(events, 'id');
            assertAddSeriesEvents(client, serie.id, eventIds, function() {
                serie.events = events;
                _series.push(serie);

                // Move on to the next serie
                generateSerieWithEvents(client, nrOfSeries - 1, eventsPerSerie, rangeStart, rangeEnd, callback, _series);
            });
        });
    });
};
