/**
 * Copyright (c) 2014 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var _ = require('lodash');
var assert = require('assert');
var moment = require('moment');

var EventsTestUtil = require('gh-events/tests/util');
var TestsUtil = require('gh-tests');

var SeriesTestUtil = require('./util');

describe('Series - calendar', function() {

    describe('JSON', function() {

        /**
         * Test that verifies that a series calendar can be retrieved as JSON
         */
        it('verify a series calendar can be retrieved as JSON', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, false, function(simon) {

                // Generate a test serie with some events
                var calendarStart = moment().subtract(1, 'day').format();
                var calendarEnd = moment().add(30, 'day').format();
                SeriesTestUtil.generateSerieWithEvents(simon.client, 1, 10, calendarStart, calendarEnd, function(series) {
                    var serie = series[0];

                    // Get the calendar
                    SeriesTestUtil.assertGetSeriesCalendar(simon.client, serie.id, calendarStart, calendarEnd, serie.events, function() {

                        // Verify date filtering by generating a window that should contain no events
                        var rangeStart = moment().subtract(10, 'day').format();
                        var rangeEnd = moment().subtract(5, 'day').format();
                        SeriesTestUtil.assertGetSeriesCalendar(simon.client, serie.id, rangeStart, rangeEnd, [], function() {
                            return callback();
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies validation when retrieving a series calendar as JSON
         */
        it('verify validation when retrieving a series calendar as JSON', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, false, function(simon) {

                // Create a test serie
                SeriesTestUtil.assertCreateSerie(simon.client, 'Test serie', null, function(serie) {

                    var calendarStart = moment().subtract(1, 'day').format();
                    var calendarEnd = moment().add(30, 'day').format();

                    // Missing start date
                    SeriesTestUtil.assertGetSeriesCalendarFails(simon.client, serie.id, null, calendarEnd, 400, function() {

                        // Invalid start date
                        SeriesTestUtil.assertGetSeriesCalendarFails(simon.client, serie.id, 'invalid', calendarEnd, 400, function() {

                            // Missing end date
                            SeriesTestUtil.assertGetSeriesCalendarFails(simon.client, serie.id, calendarStart, null, 400, function() {

                                // Invalid end date
                                SeriesTestUtil.assertGetSeriesCalendarFails(simon.client, serie.id, calendarStart, 'invalid', 400, function() {

                                    // End date before start date
                                    SeriesTestUtil.assertGetSeriesCalendarFails(simon.client, serie.id, calendarEnd, calendarStart, 400, function() {
                                        return callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    describe('RSS', function() {

        /**
         * Test that verifies that a series calendar can be retrieved as RSS
         */
        it('verify a series calendar can be retrieved as RSS', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, false, function(simon) {

                // Generate a test serie with some events
                var calendarStart = moment().subtract(1, 'day').format();
                var calendarEnd = moment().add(30, 'day').format();
                SeriesTestUtil.generateSerieWithEvents(simon.client, 1, 10, calendarStart, calendarEnd, function(series) {
                    var serie = series[0];

                    // Get the calendar
                    SeriesTestUtil.assertGetSeriesCalendarRss(simon.client, serie.id, calendarStart, calendarEnd, serie.events, function(calendar) {

                        // Verify date filtering by generating a window that should contain no events
                        var rangeStart = moment().subtract(10, 'day').format();
                        var rangeEnd = moment().subtract(5, 'day').format();
                        SeriesTestUtil.assertGetSeriesCalendarRss(simon.client, serie.id, rangeStart, rangeEnd, [], function(calendar) {
                            return callback();
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies validation when retrieving a series calendar as JSON
         */
        it('verify validation when retrieving a series calendar as JSON', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, false, function(simon) {

                // Create a test serie
                SeriesTestUtil.assertCreateSerie(simon.client, 'Test serie', null, function(serie) {

                    var calendarStart = moment().subtract(1, 'day').format();
                    var calendarEnd = moment().add(30, 'day').format();

                    // Missing start date
                    SeriesTestUtil.assertGetSeriesCalendarRssFails(simon.client, serie.id, null, calendarEnd, 400, function() {

                        // Invalid start date
                        SeriesTestUtil.assertGetSeriesCalendarRssFails(simon.client, serie.id, 'invalid', calendarEnd, 400, function() {

                            // Missing end date
                            SeriesTestUtil.assertGetSeriesCalendarRssFails(simon.client, serie.id, calendarStart, null, 400, function() {

                                // Invalid end date
                                SeriesTestUtil.assertGetSeriesCalendarRssFails(simon.client, serie.id, calendarStart, 'invalid', 400, function() {

                                    // End date before start date
                                    SeriesTestUtil.assertGetSeriesCalendarRssFails(simon.client, serie.id, calendarEnd, calendarStart, 400, function() {
                                        return callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    describe('iCal', function() {

        /**
         * Test that verifies that a series calendar can be retrieved as iCal
         */
        it('verify a series calendar can be retrieved as iCal', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, false, function(simon) {

                // Generate a test serie with some events
                var calendarStart = moment().subtract(1, 'day').format();
                var calendarEnd = moment().add(30, 'day').format();
                SeriesTestUtil.generateSerieWithEvents(simon.client, 1, 10, calendarStart, calendarEnd, function(series) {
                    var serie = series[0];

                    // Get the calendar
                    SeriesTestUtil.assertGetSeriesCalendarIcal(simon.client, serie.id, calendarStart, calendarEnd, serie.events, function() {

                        // Verify date filtering by generating a window that should contain no events
                        var rangeStart = moment().subtract(10, 'day').format();
                        var rangeEnd = moment().subtract(5, 'day').format();
                        SeriesTestUtil.assertGetSeriesCalendarIcal(simon.client, serie.id, rangeStart, rangeEnd, [], function() {
                            return callback();
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies validation when retrieving a series calendar as JSON
         */
        it('verify validation when retrieving a series calendar as JSON', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, false, function(simon) {

                // Create a test serie
                SeriesTestUtil.assertCreateSerie(simon.client, 'Test serie', null, function(serie) {

                    var calendarStart = moment().subtract(1, 'day').format();
                    var calendarEnd = moment().add(30, 'day').format();

                    // Missing start date
                    SeriesTestUtil.assertGetSeriesCalendarIcalFails(simon.client, serie.id, null, calendarEnd, 400, function() {

                        // Invalid start date
                        SeriesTestUtil.assertGetSeriesCalendarIcalFails(simon.client, serie.id, 'invalid', calendarEnd, 400, function() {

                            // Missing end date
                            SeriesTestUtil.assertGetSeriesCalendarIcalFails(simon.client, serie.id, calendarStart, null, 400, function() {

                                // Invalid end date
                                SeriesTestUtil.assertGetSeriesCalendarIcalFails(simon.client, serie.id, calendarStart, 'invalid', 400, function() {

                                    // End date before start date
                                    SeriesTestUtil.assertGetSeriesCalendarIcalFails(simon.client, serie.id, calendarEnd, calendarStart, 400, function() {
                                        return callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });
});
