/**
 * Copyright (c) 2014 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var _ = require('lodash');

var EventsDAO = require('gh-events/lib/internal/dao');
var log = require('gh-core/lib/logger').logger('gh-series');
var Validator = require('gh-core/lib/validator').Validator;

var SeriesDAO = require('./internal/dao');

/**
 * Create a serie
 *
 * @param  {Context}        ctx                         Standard context containing the current user and the current app
 * @param  {Number}         [appId]                     The id of the application that this serie will belong to
 * @param  {String}         displayName                 The name of the serie
 * @param  {String}         description                 The description of the serie
 * @param  {Number}         group                       The id of the group that can manage the event
 * @param  {Function}       callback                    Standard callback function
 * @param  {Object}         callback.err                An error object, if any
 * @param  {Serie}          callback.serie              The created serie
 */
var createSerie = module.exports.createSerie = function(ctx, appId, displayName, description, group, callback) {
    appId = appId || req.ctx.app.id;

    // TODO: Validate current user is logged in
    // TODO: Validate app
    // TODO: Validate group
    var validator = new Validator();
    validator.check(displayName, {'code': 400, 'msg': 'A valid displayName must be provided'}).isShortString();
    validator.check(group, {'code': 400, 'msg': 'A group must be provided'}).isInt();
    if (description) {
        validator.check(description, {'code': 400, 'msg': 'If provided, a description cannot contain more than 1000 characters'}).isMediumString();
    }
    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    }
    
    SeriesDAO.createSerie(appId, displayName, description, group, callback);
};

/**
 * Update a serie
 *
 * @param  {Context}        ctx                         Standard context containing the current user and the current app
 * @param  {Number}         id                          The id of the serie to update
 * @param  {Object}         update                      The updates to persist. At least one field should be specified
 * @param  {String}         [update.displayName]        The name of the serie
 * @param  {String}         [update.description]        The description of the serie
 * @param  {Number}         [update.group]              The id of the group that can manage the event
 * @param  {Function}       callback                    Standard callback function
 * @param  {Object}         callback.err                An error object, if any
 * @param  {Serie}          callback.serie              The updated serie
 */
var updateSerie = module.exports.updateSerie = function(ctx, id, update, callback) {
    // TODO: Validate current user can update
    // TODO: Validate group
    var validator = new Validator();
    validator.check(id, {'code': 400, 'msg': 'A valid serie id must be provided'}).isInt();
    var updatedFields = _.keys(update);
    validator.check(updatedFields, {'code': 400, 'msg': 'At least one of displayName, description or group should be specified'}).notEmpty();
    if (update.displayName) {
        validator.check(update.displayName, {'code': 400, 'msg': 'A valid displayName must be provided'}).isShortString();
    }
    if (update.group) {
        validator.check(update.group, {'code': 400, 'msg': 'A group must be provided'}).isInt();
    }
    if (update.description) {
        validator.check(update.description, {'code': 400, 'msg': 'If provided, a description cannot contain more than 1000 characters'}).isMediumString();
    }
    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    }

    // Ensure the serie exist and the current user can access it
    getSerie(ctx, id, function(err, serie) {
        if (err) {
            return callback(err);
        }

        SeriesDAO.updateSerie(serie, update, callback);
    });
};

/**
 * Get a serie
 *
 * @param  {Context}        ctx                 Standard context containing the current user and the current app
 * @param  {Number}         id                  The id of the serie to retrieve
 * @param  {Function}       callback            Standard callback function
 * @param  {Object}         callback.err        An error object, if any
 * @param  {Serie}          callback.serie      The retrieved serie
 */
var getSerie = module.exports.getSerie = function(ctx, id, callback) {
    var validator = new Validator();
    validator.check(id, {'code': 400, 'msg': 'A valid serie id must be provided'}).isInt();
    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    }
    
    SeriesDAO.getSerie(id, function(err, serie) {
        if (err) {
            return callback(err);
        }

        // Ensure that the serie is either being requested from the app it belongs to
        // or from an authenticated user on the global admin
        if (serie.AppId !== ctx.app.id && !ctx.user.isGlobalAdmin()) {
            return callback({'code': 401, 'msg': 'This event cannot be retrieved on this application'});
        }

        return callback(null, serie);
    });
};

/**
 * Delete a serie
 *
 * @param  {Context}        ctx                 Standard context containing the current user and the current app
 * @param  {Number}         id                  The id of the serie to delete
 * @param  {Function}       callback            Standard callback function
 * @param  {Object}         callback.err        An error object, if any
 */
var deleteSerie = module.exports.deleteSerie = function(ctx, id, callback) {
    var validator = new Validator();
    validator.check(id, {'code': 400, 'msg': 'A valid serie id must be provided'}).isInt();
    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    }
    
    getSerie(ctx, id, function(err, serie) {
        if (err) {
            return callback(err);
        }

        // Ensure that the serie is either being requested from the app it belongs to
        // or from an authenticated user on the global admin
        if (serie.AppId !== ctx.app.id && !ctx.user.isGlobalAdmin()) {
            return callback({'code': 401, 'msg': 'This event cannot be retrieved on this application'});
        }

        // TODO: Authorization
        SeriesDAO.deleteSerie(serie, callback);
    });
};
