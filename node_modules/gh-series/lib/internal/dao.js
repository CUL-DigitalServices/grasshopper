/**
 * Copyright (c) 2014 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var DB = require('gh-core/lib/db');
var log = require('gh-core/lib/logger').logger('gh-series');

/**
 * Create a serie
 *
 * @param  {Number}         appId                       The id of the application that this serie will belong to
 * @param  {String}         displayName                 The name of the serie
 * @param  {String}         description                 The description of the serie
 * @param  {Number}         group                       The id of the group that can manage the event
 * @param  {Function}       callback                    Standard callback function
 * @param  {Object}         callback.err                An error object, if any
 * @param  {Serie}          callback.serie              The created serie
 */
var createSerie = module.exports.createSerie = function(appId, displayName, description, group, callback) {
    var serie = {
        'AppId': appId,
        'description': description,
        'displayName': displayName,
        'GroupId': group
    };
    DB.Serie.create(serie).complete(function(err, serie) {
        if (err) {
            log().error({'err': err}, 'Failed to create a new serie');
            return callback({'code': 500, 'msg': err.message});
        }

        return callback(null, serie);
    });
};

/**
 * Update a serie
 *
 * @param  {Serie}          serie                       The serie to update
 * @param  {object}         update                      The updates to persist
 * @param  {Function}       callback                    Standard callback function
 * @param  {Object}         callback.err                An error object, if any
 * @param  {Serie}          callback.serie              The created serie
 */
var updateSerie = module.exports.updateSerie = function(serie, update, callback) {
    serie.updateAttributes(update).complete(function(err, serie) {
        if (err) {
            log().error({'err': err}, 'Failed to update a serie');
            return callback({'code': 500, 'msg': err.message});
        }

        return callback(null, serie);
    });
};

/**
 * Get a serie
 *
 * @param  {Number}         id                          The id of the serie to retrieve
 * @param  {Function}       callback                    Standard callback function
 * @param  {Object}         callback.err                An error object, if any
 * @param  {Serie}          callback.serie              The retrieved serie
 */
var getSerie = module.exports.getSerie = function(id, callback) {
    DB.Serie.find(id).complete(function(err, serie) {
        if (err) {
            log().error({'err': err}, 'Failed to retrieve a serie');
            return callback({'code': 500, 'msg': err.message});
        } else if (!serie) {
            log().debug({'id': id}, 'A serie with the specified id could not be found');
            return callback({'code': 404, 'msg': 'Could not find a serie by that id'});
        }

        return callback(null, serie);
    });
};

/**
 * Update a serie
 *
 * @param  {Serie}          serie                       The serie to delete
 * @param  {Function}       callback                    Standard callback function
 * @param  {Object}         callback.err                An error object, if any
 * @param  {Serie}          callback.serie              The updated serie
 */
var deleteSerie = module.exports.deleteSerie = function(serie, callback) {
    serie.destroy().complete(function(err) {
        if (err) {
            log().error({'err': err}, 'Failed to delete a serie');
            return callback({'code': 500, 'msg': err.message});
        }

        log().debug({'serie': serie}, 'Deleted a serie');
        return callback();
    });
};
