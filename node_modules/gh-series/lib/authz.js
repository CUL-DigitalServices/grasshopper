/**
 * Copyright (c) 2014 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var GroupsDAO = require('gh-groups/lib/internal/dao');

/**
 * Determine whether or not the user in context can create a serie
 *
 * @param  {Context}    ctx                         Standard context object containing the current user and the current application
 * @param  {Function}   callback                    Standard callback function
 * @param  {Object}     callback.err                An error that occurred, if any
 * @param  {Boolean}    callback.canCreate          `true` if the user in context has the appropriate permission. `false` otherwise
 */
var canCreateSeries = module.exports.canCreateSeries = function(ctx, callback) {
    // Anonymous users cannot update a serie
    if (!ctx.user) {
        return callback(null, false);
    }

    // Authenticated users can create a serie
    // TODO: This needs to depend on a config value
    return callback(null, true);
};

/**
 * Determine whether or not the user in context can update a serie
 *
 * @param  {Context}    ctx                         Standard context object containing the current user and the current application
 * @param  {Serie}      serie                       The serie that the current user wants to update
 * @param  {Function}   callback                    Standard callback function
 * @param  {Object}     callback.err                An error that occurred, if any
 * @param  {Boolean}    callback.canUpdate          `true` if the user in context has the appropriate permission. `false` otherwise
 */
var canUpdateSerie = module.exports.canUpdateSerie = function(ctx, serie, callback) {
    // Anonymous users cannot update a serie
    if (!ctx.user) {
        return callback(null, false);

    // App administrators (or global admins) can update a serie
    } else if (ctx.user.canAdmin(serie.AppId)) {
        return callback(null, true);
    }

    // At this point we need to check if the user is a member of the serie's group
    GroupsDAO.isMember(serie.Group, ctx.user, callback);
};

/**
 * Determine whether or not the user in context can delete a serie
 *
 * @param  {Context}    ctx                         Standard context object containing the current user and the current application
 * @param  {Serie}      serie                       The serie that the current user wants to delete
 * @param  {Function}   callback                    Standard callback function
 * @param  {Object}     callback.err                An error that occurred, if any
 * @param  {Boolean}    callback.canDelete          `true` if the user in context has the appropriate permission. `false` otherwise
 */
var canDeleteSerie = module.exports.canDeleteSerie = function(ctx, serie, callback) {
    // Deleting a serie requires the same permissions as updating a serie
    return canUpdateSerie(ctx, serie, callback);
};

/**
 * Determine whether or not the user in context can add events to a serie
 *
 * @param  {Context}    ctx                         Standard context object containing the current user and the current application
 * @param  {Serie}      serie                       The serie to which the current user wants to add events
 * @param  {Function}   callback                    Standard callback function
 * @param  {Object}     callback.err                An error that occurred, if any
 * @param  {Boolean}    callback.canAdd             `true` if the user in context has the appropriate permission. `false` otherwise
 */
var canAddSeriesEvents = module.exports.canAddSeriesEvents = function(ctx, serie, callback) {
    // Adding events to a serie requires the same permissions as updating a serie
    return canUpdateSerie(ctx, serie, callback);
};

/**
 * Determine whether or not the user in context can delete events from a serie
 *
 * @param  {Context}    ctx                         Standard context object containing the current user and the current application
 * @param  {Serie}      serie                       The serie from which the current user wants to delete events
 * @param  {Function}   callback                    Standard callback function
 * @param  {Object}     callback.err                An error that occurred, if any
 * @param  {Boolean}    callback.canDelete          `true` if the user in context has the appropriate permission. `false` otherwise
 */
var canDeleteSeriesEvents = module.exports.canDeleteSeriesEvents = function(ctx, serie, callback) {
    // Deleting events from a serie requires the same permissions as updating a serie
    return canUpdateSerie(ctx, serie, callback);
};

/**
 * Determine whether or not the user in context can subscribe a user to a serie
 *
 * @param  {Context}    ctx                         Standard context object containing the current user and the current application
 * @param  {Serie}      serie                       The serie to subscribe a user to
 * @param  {User}       user                        The user to subscribe to a serie
 * @param  {Function}   callback                    Standard callback function
 * @param  {Object}     callback.err                An error that occurred, if any
 * @param  {Boolean}    callback.canSubscribe       `true` if the user in context has the appropriate permission. `false` otherwise
 */
var canSubscribeSerie = module.exports.canSubscribeSerie = function(ctx, serie, user, callback) {
    // Anonymous users cannot subscribe anyone to a serie
    if (!ctx.user) {
        return callback(null, false);

    // Application admins or global admins can subscribe users to series
    } else if (ctx.user.canAdmin(serie.AppId) && ctx.user.canAdmin(user.AppId)) {
        return callback(null, true);

    // Regular users can only subscribe themselves to a serie
    } else if (ctx.user.id === user.id) {
        return callback(null, true);
    }

    // Regular users cannot subscribe anyone else to a serie
    return callback(null, false);
};

/**
 * Determine whether or not the user in context can unsubscribe a user from a serie
 *
 * @param  {Context}    ctx                         Standard context object containing the current user and the current application
 * @param  {Serie}      serie                       The serie to unsubscribe a user from
 * @param  {User}       user                        The user to unsubscribe from a serie
 * @param  {Function}   callback                    Standard callback function
 * @param  {Object}     callback.err                An error that occurred, if any
 * @param  {Boolean}    callback.canUnsubscribe     `true` if the user in context has the appropriate permission. `false` otherwise
 */
var canUnsubscribeSerie = module.exports.canUnsubscribeSerie = function(ctx, serie, user, callback) {
    // Anonymous users cannot unsubscribe anyone from a serie
    if (!ctx.user) {
        return callback(null, false);

    // Application admins or global admins can unsubscribe users from series
    } else if (ctx.user.canAdmin(serie.AppId) && ctx.user.canAdmin(user.AppId)) {
        return callback(null, true);

    // Regular users can only unsubscribe themselves from a serie
    } else if (ctx.user.id === user.id) {
        return callback(null, true);
    }

    // Regular users cannot unsubscribe anyone else from a serie
    return callback(null, false);
};
