/**
 * Copyright (c) 2014 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var _ = require('lodash');

var DB = require('gh-core/lib/db');
var log = require('gh-core/lib/logger').logger('gh-orgunit');

/**
 * Create an organisational unit
 *
 * @param  {Number}         appId               The id of the application on which to create the organisational unit
 * @param  {String}         displayName         The name of the organisational unit
 * @param  {String}         type                The organisational unit type (e.g. `tripos`, `part`)
 * @param  {String}         [description]       The description of the organisational unit
 * @param  {Number}         groupId             The id of the group that can manage the organisational unit
 * @param  {Number}         [parentId]          The id of the parent organisational unit
 * @param  {Function}       callback            Standard callback function
 * @param  {Object}         callback.err        An error object, if any
 * @param  {OrgUnit}        callback.orgUnit    The created organisational unit
 */
var createOrgUnit = module.exports.createOrgUnit = function(appId, displayName, type, description, groupId, parentId, callback) {
    var orgUnit = {
        'AppId': appId,
        'description': description,
        'displayName': displayName,
        'GroupId': groupId,
        'ParentId': parentId,
        'type': type
    };
    DB.OrgUnit.create(orgUnit).complete(function(err, orgUnit) {
        if (err) {
            log().error({'err': err}, 'Failed to create organisational unit');
            return callback({'code': 500, 'msg': 'Failed to create an organisational unit'});
        }

        return callback(null, orgUnit);
    });
};

/**
 * Update an organisational unit
 *
 * @param  {OrgUnit}        orgUnit             The organisational unit to update
 * @param  {Object}         opts                The values to update
 * @param  {String}         [opts.displayName]  Updated organisational unit name
 * @param  {String}         [opts.description]  Updated organisational unit description
 * @param  {String}         [opts.type]         Updated organisational unit type
 * @param  {Number}         [opts.GroupId]      Updated organisational unit group
 * @param  {Number}         [opts.ParentId]     Updated organisational unit parent
 * @param  {Function}       callback            Standard callback function
 * @param  {Object}         callback.err        An error object, if any
 * @param  {OrgUnit}        callback.orgUnit    The updated organisational unit
 */
var updateOrgUnit = module.exports.updateOrgUnit = function(orgUnit, opts, callback) {
    orgUnit.updateAttributes(opts).complete(function(err, orgUnit) {
        if (err) {
            log().error({'err': err}, 'Failed to update an organisational unit');
            return callback({'code': 500, 'msg': err.message});
        }

        log().debug({'orgUnit': orgUnit, 'update': opts}, 'Updated an organisational unit');
        return callback(null, orgUnit);
    });
};

/**
 * Delete an organisational unit
 *
 * @param  {OrgUnit}        orgUnit             The organisational unit to delete
 * @param  {Function}       callback            Standard callback function
 * @param  {Object}         callback.err        An error object, if any
 */
var deleteOrgUnit = module.exports.deleteOrgUnit = function(orgUnit, callback) {
    orgUnit.destroy().complete(function(err) {
        if (err) {
            log().error({'err': err}, 'Failed to delete an organisational unit');
            return callback({'code': 500, 'msg': err.message});
        }

        log().debug({'orgUnit': orgUnit}, 'Deleted an organisational unit');
        return callback();
    });
};

/**
 * Get an organisational unit
 *
 * @param  {Number}         id                  The id of the organisational unit to retrieve
 * @param  {Boolean}        [includeSeries]     Whether to include the event series associated to the organisational unit. Defaults to `false`
 * @param  {Function}       callback            Standard callback function
 * @param  {Object}         callback.err        An error object, if any
 * @param  {OrgUnit}        callback.orgUnit    The retrieved organisational unit
 */
var getOrgUnit = module.exports.getOrgUnit = function(id, includeSeries, callback) {
    var options = {
        'where': {'id': id},
        'include': [DB.Group]
    };
    if (includeSeries) {
        options.include.push(DB.Serie);
    }
    DB.OrgUnit.find(options).complete(function(err, orgUnit) {
        if (err) {
            log().error({'err': err, 'id': id, 'includeSeries': includeSeries}, 'Failed to get an organisational unit');
            return callback({'code': 500, 'msg': 'Failed to get an organisational unit'});
        } else if (!orgUnit) {
            log().debug({'err': err, 'id': id, 'includeSeries': includeSeries}, 'Could not find an organisational unit');
            return callback({'code': 404, 'msg': 'Could not find an organisational unit'});
        }

        return callback(null, orgUnit);
    });
};

/**
 * Get the organisational units for an application
 *
 * @param  {Number}         appId               The id of the app to get the organisational units for
 * @param  {Number}         [parentId]          The id of the parent to retrieve the organisational units for
 * @param  {String[]}       [types]             The organisational unit type[s] to filter the organisational unit by
 * @param  {Boolean}        [includeSeries]     Whether to include the event series associated to the organisational units. Defaults to `false`
 * @param  {Function}       callback            Standard callback function
 * @param  {Object}         callback.err        An error object, if any
 * @param  {OrgUnit}        callback.orgUnits   The matching organisational units
 */
var getOrgUnits = module.exports.getOrgUnits = function(appId, parentId, types, includeSeries, callback) {
    var options = {
        'where': {'AppId': appId}
    };
    if (parentId) {
        options.where.ParentId = parentId;
    }
    if (!_.isEmpty(types)) {
        options.where.type = types;
    }
    if (includeSeries) {
        options.include = [DB.Serie];
    }
    DB.OrgUnit.findAll(options).complete(function(err, orgUnits) {
        if (err) {
            log().error({
                'err': err,
                'appId': appId,
                'parentId': parentId,
                'types': types,
                'includeSeries': includeSeries
            }, 'Failed to get the organisational units for an app');
            return callback({'code': 500, 'msg': 'Failed to get the organisational units for an app'});
        }

        return callback(null, orgUnits);
    });
};


////////////
// Series //
////////////

/**
 * Get the event series for an organisational unit
 *
 * @param  {OrgUnit}        orgUnit             The organisational unit to retrieve the event series for
 * @param  {Number}         limit               The maximum number of results to retrieve
 * @param  {Number}         offset              The paging number of the results to retrieve
 * @param  {Boolean}        upcoming            Whether to only include event series with upcoming events
 * @param  {Function}       callback            Standard callback function
 * @param  {Object}         callback.err        An error object, if any
 * @param  {Serie[]}        callback.series     The retrieved series
 */
var getOrgUnitSeries = module.exports.getOrgUnitSeries = function(orgUnit, limit, offset, upcoming, callback) {
    // TODO: upcoming
    orgUnit.getSeries({'limit': limit, 'offset': offset}).complete(function(err, series) {
        if (err) {
            log().error({
                'err': err,
                'limit': limit,
                'offset': offset,
                'id': orgUnit.id
            }, 'Failed to get the series for an organisational unit');
            return callback({'code': 500, 'msg': 'Failed to get the series for an organisational unit'});
        }

        return callback(null, series);
    });
};

/**
 * Add an event series to an organisational unit
 *
 * @param  {OrgUnit}        orgUnit             The organisational unit to add the serie(s) to
 * @param  {Serie[]}        series              The serie(s) to add to the organisational unit
 * @param  {Function}       callback            Standard callback function
 * @param  {Object}         callback.err        An error object, if any
 */
var addOrgUnitSeries = module.exports.addOrgUnitSeries = function(orgUnit, series, callback) {
    orgUnit.addSeries(series).complete(function(err) {
        if (err) {
            log().error({
                'err': err,
                'id': orgUnit.id,
                'series': _.pluck(series, 'id')
            }, 'Unable to add series to an organisational unit');
            return callback({'code': 500, 'msg': 'Unable to add series to an organisational unit'});
        }

        return callback();
    });
};

/**
 * Remove an event series from an organisational unit
 *
 * @param  {OrgUnit}        orgUnit             The organisational unit to remove the serie(s) from
 * @param  {Serie[]}        series              The serie(s) to remove from the organisational unit
 * @param  {Function}       callback            Standard callback function
 * @param  {Object}         callback.err        An error object, if any
 */
var deleteOrgUnitSeries = module.exports.deleteOrgUnitSeries = function(orgUnit, series, callback) {
    orgUnit.removeSeries(series).complete(function(err) {
        if (err) {
            log().error({
                'err': err,
                'id': orgUnit.id,
                'series': _.pluck(series, 'id')
            }, 'Unable to remove series from an organisational unit');
            return callback({'code': 500, 'msg': 'Unable to remove series from an organisational unit'});
        }

        return callback();
    });
};
