/**
 * Copyright (c) 2014 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var GrassHopper = require('gh-core');

/**
 * @REST getOrgUnits
 *
 * Get the organisational units in the current app
 *
 * @Server      app
 * @Method      GET
 * @Path        /orgunit
 * @QueryParam  {boolean}           [includeSeries]     Whether to include the event series associated to the organisational units. Defaults to `false`
 * @QueryParam  {number}            [parent]            The id of the parent to retrieve the organisational units for
 * @QueryParam  {string[]}          [type]              The organisational unit type[s] to filter the organisational unit by
 * @Return      {OrgUnit[]}                             The organisational units in the current app
 */
GrassHopper.appServer.on('get', '/api/orgunit', function(req, res) {
    res.send(501);
});

/**
 * @REST getOrgUnitsByApp
 *
 * Get the organisational units in an app
 *
 * @Server      admin
 * @Method      GET
 * @Path        /orgunit
 * @QueryParam  {number}            app                 The id of the app to get the organisational units for
 * @QueryParam  {boolean}           [includeSeries]     Whether to include the event series associated to the organisational units. Defaults to `false`
 * @QueryParam  {number}            [parent]            The id of the parent to retrieve the organisational units for
 * @QueryParam  {string[]}          [type]              The organisational unit type[s] to filter the organisational unit by
 * @Return      {OrgUnit[]}                             The organisational units in the app
 */
GrassHopper.globalAdminServer.on('get', '/api/orgunit', function(req, res) {
    res.send(501);
});

/**
 * @REST getOrgUnit
 *
 * Get an organisational unit
 *
 * @Server      admin,app
 * @Method      GET
 * @Path        /orgunit/{id}
 * @PathParam   {number}            id                  The id of the organisational unit to retrieve
 * @QueryParam  {boolean}           [includeSeries]     Whether to include the event series associated to the organisational unit. Defaults to `false`
 * @Return      {OrgUnit}                               The requested organisational unit
 */
var getOrgUnit = function(req, res) {
    res.send(501);
};

GrassHopper.globalAdminServer.on('get', '/api/orgunit/:id', getOrgUnit);
GrassHopper.appServer.on('get', '/api/orgunit/:id', getOrgUnit);

/**
 * @REST getOrgUnitSeries
 *
 * Get the event series in an organisational unit
 *
 * @Server      admin,app
 * @Method      GET
 * @Path        /orgunit/{id}/series
 * @PathParam   {number}            id                  The id of the organisational unit to retrieve the event series for
 * @QueryParam  {number}            [items]             The maximum number of results to retreive. Default: 10
 * @QueryParam  {number}            [page]              The paging number of the results to retrieve
 * @QueryParam  {boolean}           [upcoming]          Whether to only include event series with upcoming events. Defaults to `false`
 * @Return      {SeriesList}                            The event series in the organisational unit
 */
var getOrgUnitSeries = function(req, res) {
    res.send(501);
};

GrassHopper.globalAdminServer.on('get', '/api/orgunit/:id/series', getOrgUnitSeries);
GrassHopper.appServer.on('get', '/api/orgunit/:id/series', getOrgUnitSeries);

/**
 * @REST getOrgUnitCalendar
 *
 * Get the calendar for an organisational unit
 *
 * @Server      admin,app
 * @Method      GET
 * @Path        /orgunit/{id}/calendar
 * @PathParam   {number}            id                  The id of the organisational unit to get the calendar for
 * @QueryParam  {boolean}           from                The timestamp (millis since epoch) from which to get the calendar for the organisation unit
 * @QueryParam  {boolean}           to                  The timestamp (millis since epoch) until which to get the calendar for the organisation unit
 * @Return      {Event[]}                               The requested organisational unit calendar
 */
var getOrgUnitCalendar = function(req, res) {
    res.send(501);
};

GrassHopper.globalAdminServer.on('get', '/api/orgunit/:id/calendar', getOrgUnitCalendar);
GrassHopper.appServer.on('get', '/api/orgunit/:id/calendar', getOrgUnitCalendar);

/**
 * @REST getOrgUnitCalendarIcal
 *
 * Get the calendar for an organisational unit in iCal
 *
 * @Server      admin,app
 * @Method      GET
 * @Path        /orgunit/{id}/calendar.ical
 * @PathParam   {number}            id                  The id of the organisational unit to get the calendar for in iCal format
 * @Return      {ical}                                  The requested organisational unit calendar in iCal format
 */
var getOrgUnitCalendarIcal = function(req, res) {
    res.send(501);
};

GrassHopper.globalAdminServer.on('get', '/api/orgunit/:id/calendar.ical', getOrgUnitCalendarIcal);
GrassHopper.appServer.on('get', '/api/orgunit/:id/calendar.ical', getOrgUnitCalendarIcal);

/**
 * @REST getOrgUnitCalendarRss
 *
 * Get the calendar for an organisational unit in RSS
 *
 * @Server      admin,app
 * @Method      GET
 * @Path        /orgunit/{id}/calendar.rss
 * @PathParam   {number}            id                  The id of the organisational unit to get the calendar for in RSS format
 * @Return      {rss}                                   The requested organisational unit calendar in RSS format
 */
var getOrgUnitCalendarRss = function(req, res) {
    res.send(501);
};

GrassHopper.globalAdminServer.on('get', '/api/orgunit/:id/calendar.rss', getOrgUnitCalendarRss);
GrassHopper.appServer.on('get', '/api/orgunit/:id/calendar.rss', getOrgUnitCalendarRss);

/**
 * @REST getOrgUnitUpcoming
 *
 * Get the upcoming events in an organisational unit
 *
 * @Server      admin,app
 * @Method      GET
 * @Path        /orgunit/{id}/upcoming
 * @PathParam   {number}            id                  The id of the organisational unit to get the upcoming events for
 * @QueryParam  {number}            [items]             The maximum number of results to retreive. Default: 10
 * @QueryParam  {number}            [page]              The paging number of the results to retrieve
 * @Return      {EventList}                             The upcoming events in the organisational unit
 */
var getOrgUnitUpcoming = function(req, res) {
    res.send(501);
};

GrassHopper.globalAdminServer.on('get', '/api/orgunit/:id/upcoming', getOrgUnitUpcoming);
GrassHopper.appServer.on('get', '/api/orgunit/:id/upcoming', getOrgUnitUpcoming);

/**
 * @REST createOrgUnit
 *
 * Create a new organisational unit in the current app
 *
 * @Server      app
 * @Method      POST
 * @Path        /orgunit
 * @FormParam   {string}            displayName         The name of the organisational unit
 * @FormParam   {string}            type                The organisational unit type (e.g. `tripos`, `part`)
 * @FormParam   {string}            [description]       The description of the organisational unit
 * @FormParam   {number}            [group]             The id of the group that can manage the organisational unit. Defaults to creating a new group with the current user as a member
 * @FormParam   {string}            [parent]            The id of the parent organisational unit
 * @Return      {OrgUnit}                               The created organisational unit
 */
GrassHopper.appServer.on('post', '/api/orgunit', function(req, res) {
    res.send(501);
});

/**
 * @REST createOrgUnitByApp
 *
 * Create a new organisational unit in an app
 *
 * @Server      admin
 * @Method      POST
 * @Path        /orgunit
 * @FormParam   {number}            app                 The id of the app to create the organisational unit for
 * @FormParam   {string}            displayName         The name of the organisational unit
 * @FormParam   {string}            type                The organisational unit type (e.g. `tripos`, `part`)
 * @FormParam   {string}            [description]       The description of the organisational unit
 * @FormParam   {number}            [group]             The id of the group that can manage the organisational unit. Defaults to creating a new group with the current user as a member
 * @FormParam   {string}            [parent]            The id of the parent organisational unit
 * @Return      {OrgUnit}                               The created organisational unit
 */
GrassHopper.globalAdminServer.on('post', '/api/orgunit', function(req, res) {
    res.send(501);
});

/**
 * @REST updateOrgUnit
 *
 * Update an organisational unit
 *
 * @Server      admin,app
 * @Method      POST
 * @Path        /orgunit/{id}
 * @PathParam   {number}            id                  The id of the organisational unit to update
 * @FormParam   {string}            [description]       Updated organisational unit description
 * @FormParam   {string}            [displayName]       Updated organisational unit name
 * @FormParam   {group}             [group]             Updated id of the group that can manage the organisational unit
 * @FormParam   {number}            [parent]            Updated id of the parent organisational unit
 * @FormParam   {string}            [type]              Updated organisational unit type (e.g. `tripos`, `part`)
 * @Return      {OrgUnit}                               The updated organisational unit
 */
var updateOrgUnit = function(req, res) {
    res.send(501);
};

GrassHopper.globalAdminServer.on('post', '/api/orgunit/:id', updateOrgUnit);
GrassHopper.appServer.on('post', '/api/orgunit/:id', updateOrgUnit);

/**
 * @REST addOrgUnitSeries
 *
 * Add an event series to an organisational unit
 *
 * @Server      admin,app
 * @Method      POST
 * @Path        /orgunit/{id}/series
 * @PathParam   {number}            id                  The id of the organisational unit to add an event series to
 * @FormParam   {string[]}          serie               The id of the event series to add to the organisational unit
 * @Return      {void}
 */
var addOrgUnitSeries = function(req, res) {
    res.send(501);
};

GrassHopper.globalAdminServer.on('post', '/api/orgunit/:id/series', addOrgUnitSeries);
GrassHopper.appServer.on('post', '/api/orgunit/:id/series', addOrgUnitSeries);

/**
 * @REST addOrgUnitEvents
 *
 * Add an event to an organisational unit
 *
 * @Server      admin,app
 * @Method      POST
 * @Path        /orgunit/{id}/events
 * @PathParam   {number}            id                  The id of the organisational unit to add an event to
 * @FormParam   {string[]}          event               The id of the event to add to the organisational unit
 * @Return      {void}
 */
var addOrgUnitEvents = function(req, res) {
    res.send(501);
};

GrassHopper.globalAdminServer.on('post', '/api/orgunit/:id/events', addOrgUnitEvents);
GrassHopper.appServer.on('post', '/api/orgunit/:id/events', addOrgUnitEvents);

/**
 * @REST deleteOrgUnitSeries
 *
 * Remove an event series from an organisational unit
 *
 * @Server      admin,app
 * @Method      DELETE
 * @Path        /orgunit/{id}/series
 * @PathParam   {number}            id                  The id of the organisational unit to remove an event series from
 * @FormParam   {string[]}          serie               The id of the event series to remove from the organisational unit
 * @Return      {void}
 */
var deleteOrgUnitSeries = function(req, res) {
    res.send(501);
};

GrassHopper.globalAdminServer.on('delete', '/api/orgunit/:id/series', deleteOrgUnitSeries);
GrassHopper.appServer.on('delete', '/api/orgunit/:id/series', deleteOrgUnitSeries);

/**
 * @REST deleteOrgUnitEvents
 *
 * Remove an event from an organisational unit
 *
 * @Server      admin,app
 * @Method      DELETE
 * @Path        /orgunit/{id}/events
 * @PathParam   {number}            id                  The id of the organisational unit to remove an event from
 * @FormParam   {string[]}          event               The id of the event to remove from the organisational unit
 * @Return      {void}
 */
var deleteOrgUnitEvents = function(req, res) {
    res.send(501);
};

GrassHopper.globalAdminServer.on('delete', '/api/orgunit/:id/events', deleteOrgUnitEvents);
GrassHopper.appServer.on('delete', '/api/orgunit/:id/events', deleteOrgUnitEvents);

/**
 * @REST deleteOrgUnit
 *
 * Delete an organisational unit
 *
 * @Server      admin,app
 * @Method      DELETE
 * @Path        /orgunit/{id}
 * @PathParam   {number}            id                  The id of the organisational unit to delete
 * @Return      {void}
 */
var deleteOrgUnit = function(req, res) {
    res.send(501);
};

GrassHopper.globalAdminServer.on('delete', '/api/orgunit/:id', deleteOrgUnit);
GrassHopper.appServer.on('delete', '/api/orgunit/:id', deleteOrgUnit);

/**
 * @REST subscribeOrgUnit
 *
 * Subscribe to the event series and events in an organisational unit
 *
 * @Server      admin,app
 * @Method      POST
 * @Path        /orgunit/{id}/subscribe
 * @PathParam   {number}            id                  The id of the organisational unit to subscribe to the event series and events for
 * @Return      {void}
 */
var subscribeOrgUnit = function(req, res) {
    res.send(501);
};

GrassHopper.globalAdminServer.on('post', '/api/orgunit/:id/subscribe', subscribeOrgUnit);
GrassHopper.appServer.on('post', '/api/orgunit/:id/subscribe', subscribeOrgUnit);
