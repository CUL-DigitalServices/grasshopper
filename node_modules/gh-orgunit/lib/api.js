/**
 * Copyright (c) 2014 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var _ = require('lodash');

var GrasshopperUtil = require('gh-core/lib/util');
var GroupsAPI = require('gh-groups');
var GroupsDAO = require('gh-groups/lib/internal/dao');
var log = require('gh-core/lib/logger').logger('gh-orgunit');
var SeriesDAO = require('gh-series/lib/internal/dao');
var Validator = require('gh-core/lib/validator').Validator;

var OrgUnitAuthz = require('./authz');
var OrgUnitDAO = require('./internal/dao');

/**
 * Create an organisational unit
 *
 * @param  {Context}        ctx                 Standard context containing the current user and the current app
 * @param  {Number}         appId               The id of the application on which to create the organisational unit
 * @param  {String}         displayName         The name of the organisational unit
 * @param  {String}         type                The organisational unit type (e.g. `tripos`, `part`)
 * @param  {String}         description         The description of the organisational unit
 * @param  {Number}         groupId             The id of the group that can manage the organisational unit. Defaults to creating a new group with the current user as a member
 * @param  {Number}         parentId            The id of the parent organisational unit
 * @param  {Function}       callback            Standard callback function
 * @param  {Object}         callback.err        An error object, if any
 * @param  {OrgUnit}        callback.orgUnit    The created organisational unit
 */
var createOrgUnit = module.exports.createOrgUnit = function(ctx, appId, displayName, type, description, groupId, parentId, callback) {
    // Ensure that the app id is a valid number
    appId = GrasshopperUtil.getNumberParam(appId);

    var validator = new Validator();
    validator.check(null, {'code': 401, 'msg': 'Only application administrators can create an organisational unit'}).isAdmin(ctx, appId);
    validator.check(appId, {'code': 400, 'msg': 'A valid app id must be provided'}).isInt();
    validator.check(displayName, {'code': 400, 'msg': 'A valid displayName must be provided'}).notEmpty();
    validator.check(displayName, {'code': 400, 'msg': 'A valid displayName must be provided'}).isShortString();
    validator.check(type, {'code': 400, 'msg': 'A valid type must be provided'}).notEmpty();
    validator.check(type, {'code': 400, 'msg': 'A valid type must be between 1 and 16 characters long'}).len(1, 16);
    if (description) {
        validator.check(description, {'code': 400, 'msg': 'A valid description must be provided'}).isMediumString();
    }
    if (groupId) {
        validator.check(groupId, {'code': 400, 'msg': 'A valid group must be a positive integer'}).isInt();
    }
    if (parentId) {
        validator.check(parentId, {'code': 400, 'msg': 'A valid parent organisational unit id must be a positive integer'}).isInt();
    }
    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    }
    
    // Ensure that the group id (if any) is a valid number
    groupId = GrasshopperUtil.getNumberParam(groupId);

    // Ensure that the parent id (if any) is a valid number
    parentId = GrasshopperUtil.getNumberParam(parentId);

    // Ensure the current user can create an organisational unit
    OrgUnitAuthz.canCreateOrgUnit(ctx, appId, function(err, canCreate) {
        if (err) {
            return callback(err);
        } else if (!canCreate) {
            log().warn({
                'actor': ctx.user.id,
                'displayName': displayName,
                'parentId': parentId
            }, 'An unauthorized attempt at creating an organisational unit occurred');
            return callback({'code': 401, 'msg': 'You are not allowed to create an organisational unit'});
        }

        // If a parent was specified, ensure it exists
        _getOptionalOrgUnit(ctx, parentId, function(err, parent) {
            if (err) {
                return callback(err);

            // Ensure the parent is from the same application
            } else if (parent && parent.AppId !== appId) {
                return callback({'code': 400, 'msg': 'You cannot create an organisational unit under an organisational unit from another application'});
            }

            // If a group was specified, ensure it exists. Create
            // a group if none was specified
            GroupsAPI.getOrCreateGroup(ctx, appId, groupId, function(err, group) {
                if (err) {
                    return callback(err);
                }

                // Create the organisational unit
                OrgUnitDAO.createOrgUnit(appId, displayName, type, description, group.id, parentId, callback);
            });
        });
    });
};

/**
 * Get an organisational unit
 *
 * @param  {Context}        ctx                 Standard context containing the current user and the current app
 * @param  {Number}         id                  The id of the organisational unit to retrieve
 * @param  {Boolean}        [includeSeries]     Whether to include the event series associated to the organisational units. Defaults to `false`
 * @param  {Function}       callback            Standard callback function
 * @param  {Object}         callback.err        An error object, if any
 * @param  {OrgUnit}        callback.orgUnit    The created organisational unit
 */
var getOrgUnit = module.exports.getOrgUnit = function(ctx, id, includeSeries, callback) {
    // Ensure that the id is a valid number
    id = GrasshopperUtil.getNumberParam(id);

    // Ensure that the includeSeries flag is a boolean
    includeSeries = GrasshopperUtil.getBooleanParam(includeSeries, false);

    var validator = new Validator();
    validator.check(id, {'code': 400, 'msg': 'A valid organisational unit id is a positive integer'}).isInt();
    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    }

    OrgUnitDAO.getOrgUnit(id, includeSeries, callback);
};

/**
 * Get the organisational units for an application
 *
 * @param  {Context}        ctx                 Standard context containing the current user and the current app
 * @param  {Number}         appId               The id of the app to get the organisational units for
 * @param  {Number}         [parentId]          The id of the parent to retrieve the organisational units for
 * @param  {String[]}       [types]             The organisational unit type[s] to filter the organisational unit by
 * @param  {Boolean}        [includeSeries]     Whether to include the event series associated to the organisational units. Defaults to `false`
 * @param  {Function}       callback            Standard callback function
 * @param  {Object}         callback.err        An error object, if any
 * @param  {OrgUnit}        callback.orgUnits   The matching organisational units
 */
var getOrgUnits = module.exports.getOrgUnits = function(ctx, appId, parentId, types, includeSeries, callback) {
    // Ensure that the app id (if any) is a valid number
    appId = GrasshopperUtil.getNumberParam(appId);

    // Ensure that the parent id (if any) is a valid number
    parentId = GrasshopperUtil.getNumberParam(parentId);

    var validator = new Validator();
    validator.check(appId, {'code': 400, 'msg': 'A valid application id is a positive integer'}).isInt();
    if (parentId) {
        validator.check(parentId, {'code': 400, 'msg': 'A valid organisational unit id is a positive integer'}).isInt();
    }
    if (types) {
        validator.check(null, {'code': 400, 'msg': 'Types must be specified as an array'}).isArray(types);
        _.each(types, function(type) {
            validator.check(type, {'code': 400, 'msg': 'A valid type must be between 1 and 16 characters long'}).len(1, 16);
        });
    }
    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    } else if (appId !== ctx.app.id && (!ctx.user || !ctx.user.isGlobalAdmin())) {
        return callback({'code': 401, 'msg': 'You cannot get the organisational units from another application'});
    }

    // Get the parent organisational unit, if any
    _getOptionalOrgUnit(ctx, parentId, function(err, parent) {
        if (err) {
            return callback(err);
        } else if (parent && parent.AppId !== appId && !ctx.user.isGlobalAdmin()) {
            return callback({'code': 401, 'msg': 'You cannot get the organisational units under an organisational unit from another application'});
        }

        // Get the organisational units in the application
        OrgUnitDAO.getOrgUnits(appId, parentId, types, includeSeries, function(err, orgUnits) {
            if (err) {
                return callback(err);
            }

            // If the current user is anonymous or no organisational
            // units were found, we return them as is
            if (!ctx.user || _.isEmpty(orgUnits)) {
                // Add a `canManage` property to each group
                var augmentedOrgUnits = _.map(orgUnits, function(orgUnit) {
                    var augmentedOrgUnit = orgUnit.values;
                    augmentedOrgUnit.canManage = false;
                    return augmentedOrgUnit;
                });
                return callback(null, augmentedOrgUnits);
            }

            // Otherwise we get the groups the current user is a member of so we can mark
            // those organisational units that the user can edit
            // TODO: Make this optional?
            GroupsDAO.getUserGroups(ctx.user.id, 10000, 0, function(err, groups) {
                if (err) {
                    return callback(err);
                }

                // Add a `canManage` property to each group
                var augmentedOrgUnits = _.map(orgUnits, function(orgUnit) {
                    // Serialize the organisational unit
                    var augmentedOrgUnit = orgUnit.values;

                    // Check if the current user is a member of the group that
                    // this organisational unit belongs to
                    var canManage = !_.isUndefined(_.find(groups, {'id': orgUnit.GroupId}));
                    augmentedOrgUnit.canManage = canManage;
                    return augmentedOrgUnit;
                });
                return callback(null, augmentedOrgUnits);
            });
        });
    });
};

/**
 * Update an organisational unit
 *
 * @param  {Context}        ctx                     Standard context containing the current user and the current app
 * @param  {Number}         id                      The id of the organisational unit to update
 * @param  {Object}         opts                    The values to update
 * @param  {String}         [opts.displayName]      Updated organisational unit name
 * @param  {String}         [opts.description]      Updated organisational unit description
 * @param  {String}         [opts.type]             Updated organisational unit type
 * @param  {Number}         [opts.groupId]          Updated organisational unit group
 * @param  {Number}         [opts.parent]           Updated organisational unit parent
 * @param  {Function}       callback                Standard callback function
 * @param  {Object}         callback.err            An error object, if any
 */
var updateOrgUnit = module.exports.updateOrgUnit = function(ctx, id, opts, callback) {
    // Ensure that the orgunit id is a valid number
    id = GrasshopperUtil.getNumberParam(id);

    var validator = new Validator();
    validator.check(null, {'code': 401, 'msg': 'Only application administrators can update an organisational unit'}).isLoggedInUser(ctx);
    validator.check(id, {'code': 400, 'msg': 'A valid orgunit id must be provided'}).isInt();
    validator.check(_.keys(opts).length, {'code': 400, 'msg': 'At least 1 update value must be provided'}).min(1);

    var update = {};

    if (opts) {
        if (opts.displayName) {
            validator.check(opts.displayName, {'code': 400, 'msg': 'A valid displayName must be provided'}).notEmpty();
            validator.check(opts.displayName, {'code': 400, 'msg': 'A valid displayName must be provided'}).isShortString();
            update.displayName = opts.displayName;
        }
        if (opts.type) {
            validator.check(opts.type, {'code': 400, 'msg': 'A valid type must be provided'}).notEmpty();
            validator.check(opts.type, {'code': 400, 'msg': 'A valid type must be between 1 and 16 characters long'}).len(1, 16);
            update.type = opts.type;
        }
        if (opts.description) {
            validator.check(opts.description, {'code': 400, 'msg': 'A valid description must be provided'}).isMediumString();
            update.description = opts.description;
        }
        if (opts.group) {
            validator.check(opts.group, {'code': 400, 'msg': 'A valid group must be a positive integer'}).isInt();
            update.GroupId = GrasshopperUtil.getNumberParam(opts.group);
        }
        if (opts.parent) {
            validator.check(opts.parent, {'code': 400, 'msg': 'A valid parent organisational unit id must be a positive integer'}).isInt();
            update.parentId = GrasshopperUtil.getNumberParam(opts.parent);
        }
    }
    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    }

    // Check if the org unit exists
    OrgUnitDAO.getOrgUnit(id, false, function(err, orgUnit) {
        if (err) {
            return callback(err);
        }

        // Ensure the current user can update the organisational unit
        OrgUnitAuthz.canUpdateOrgUnit(ctx, orgUnit, function(err, canUpdate) {
            if (err) {
                return callback(err);
            } else if (!canUpdate) {
                log().warn({
                    'actor': ctx.user.id,
                    'id': orgUnit.id
                }, 'An unauthorized attempt at updating an organisational unit occurred');
                return callback({'code': 401, 'msg': 'You are not allowed to update the organisational unit'});
            }

            // If a parent was specified, ensure it exists
            _getOptionalOrgUnit(ctx, update.parentId, function(err, parent) {
                if (err) {
                    return callback(err);

                // Ensure the parent is from the same application
                } else if (parent && parent.AppId !== orgUnit.appId) {
                    return callback({'code': 400, 'msg': 'You cannot make an organisational unit from another application a parent of this one'});
                }

                // If a group was specified, ensure it exists
                update.GroupId = update.GroupId || orgUnit.GroupId;
                GroupsDAO.getGroup(update.GroupId, function(err, group) {
                    if (err) {
                        return callback(err);
                    } else if (group.AppId !== orgUnit.AppId) {
                        return callback({'code': 400, 'msg': 'You cannot use a group from another application'});
                    }

                    // Update the organisational unit
                    OrgUnitDAO.updateOrgUnit(orgUnit, update, callback);
                });
            });
        });
    });
};

/**
 * Delete an organisational unit
 *
 * @param  {Context}        ctx             Standard context containing the current user and the current app
 * @param  {Number}         id              The id of the organisational unit to delete
 * @param  {Function}       callback        Standard callback function
 * @param  {Object}         callback.err    An error object, if any
 */
var deleteOrgUnit = module.exports.deleteOrgUnit = function(ctx, id, callback) {
    // Ensure that the orgunit id is a valid number
    id = GrasshopperUtil.getNumberParam(id);

    var validator = new Validator();
    validator.check(null, {'code': 401, 'msg': 'Only application administrators can update an organisational unit'}).isLoggedInUser(ctx);
    validator.check(id, {'code': 400, 'msg': 'A valid orgunit id must be provided'}).isInt();
    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    }

    // Ensure the organisational unit exists
    OrgUnitDAO.getOrgUnit(id, false, function(err, orgUnit) {
        if (err) {
            return callback(err);
        }

        // Ensure the current user can delete the organisational unit
        OrgUnitAuthz.canDeleteOrgUnit(ctx, orgUnit, function(err, canDelete) {
            if (err) {
                return callback(err);
            } else if (!canDelete) {
                log().warn({
                    'actor': ctx.user.id,
                    'id': orgUnit.id
                }, 'An unauthorized attempt at deleting an organisational unit occurred');
                return callback({'code': 401, 'msg': 'You are not allowed to delete the organisational unit'});
            }

            // Delete the organisational unit
            OrgUnitDAO.deleteOrgUnit(orgUnit, callback);
        });
    });
};


////////////
// Series //
////////////

/**
 * Get the event series in an organisational unit
 *
 * @param  {Context}        ctx                 Standard context containing the current user and the current app
 * @param  {number}         id                  The id of the organisational unit to retrieve the event series for
 * @param  {number}         [limit]             The maximum number of results to retrieve. Default: 10
 * @param  {number}         [offset]            The paging number of the results to retrieve
 * @param  {Function}       callback            Standard callback function
 * @param  {Object}         callback.err        An error object, if any
 * @param  {OrgUnit}        callback.orgUnit    The created organisational unit
 */
var getOrgUnitSeries = module.exports.getOrgUnitSeries = function(ctx, id, limit, offset, upcoming, callback) {
    // Ensure that the paging values are valid
    limit = GrasshopperUtil.getNumberParam(limit, 10, 1, 25);
    offset = GrasshopperUtil.getNumberParam(offset, 0, 0);

    // Ensure that the upcoming flag is a boolean
    upcoming = GrasshopperUtil.getBooleanParam(upcoming, false);

    var validator = new Validator();
    validator.check(id, {'code': 400, 'msg': 'A valid organisational unit id is a positive integer'}).isInt();
    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    }

    // Ensure the organisational unit exists
    getOrgUnit(ctx, id, false, function(err, orgUnit) {
        if (err) {
            return callback(err);
        }

        // Get the series for the organisational unit
        OrgUnitDAO.getOrgUnitSeries(orgUnit, limit, offset, upcoming, callback);
    });
};

/**
 * Add an event series to an organisational unit
 *
 * @param  {Context}        ctx                 Standard context containing the current user and the current app
 * @param  {Number}         id                  The id of the organisational unit to add the serie(s) to
 * @param  {Number[]}       series              The id(s) of the serie(s) to add to the organisational unit
 * @param  {Function}       callback            Standard callback function
 * @param  {Object}         callback.err        An error object, if any
 */
var addOrgUnitSeries = module.exports.addOrgUnitSeries = function(ctx, id, series, callback) {
    // Ensure that the orgunit id is a valid number
    id = GrasshopperUtil.getNumberParam(id);

    var validator = new Validator();
    validator.check(null, {'code': 401, 'msg': 'You need to be authenticated in order to add series to an organisational unit'}).isLoggedInUser(ctx);
    validator.check(id, {'code': 400, 'msg': 'A valid organisational unit id is a positive integer'}).isInt();
    validator.check(null, {'code': 400, 'msg': 'At least 1 serie needs to be specified'}).isArray(series);
    if (series) {
        validator.check(series.length, {'code': 400, 'msg': 'At least 1 serie needs to be specified'}).min(1);
        _.each(series, function(serie) {
            validator.check(serie, {'code': 400, 'msg': 'A valid serie id is a positive integer'}).isInt();
        });
    }
    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    }

    // Ensure the organisational unit exists
    OrgUnitDAO.getOrgUnit(id, false, function(err, orgUnit) {
        if (err) {
            return callback(err);
        }

        // Ensure the series exist
        SeriesDAO.getSeries(series, function(err, series) {
            if (err) {
                return callback(err);
            }

            // Ensure the series are from the same application as the organisational unit
            var otherAppSeries = _.filter(series, function(serie) {
                return (orgUnit.AppId !== serie.AppId);
            });
            if (!_.isEmpty(otherAppSeries)) {
                return callback({'code': 400, 'msg': 'Some of the provided series belong to another application'});
            }

            // Ensure the current user can add series to the organisational unit
            OrgUnitAuthz.canAddOrgUnitSeries(ctx, orgUnit, function(err, canAdd) {
                if (err) {
                    return callback(err);
                } else if (!canAdd) {
                    log().warn({
                        'actor': ctx.user.id,
                        'displayName': orgUnit.displayName
                    }, 'An unauthorized attempt at adding series to an organisational unit occurred');
                    return callback({'code': 401, 'msg': 'You are not allowed to add series to the organisational unit'});
                }

                OrgUnitDAO.addOrgUnitSeries(orgUnit, series, callback);
            });
        });
    });
};

/**
 * Remove an event series from an organisational unit
 *
 * @param  {Context}        ctx                 Standard context containing the current user and the current app
 * @param  {Number}         id                  The id of the organisational unit to remove the serie(s) from
 * @param  {Number[]}       series              The id(s) of the serie(s) to remove from the organisational unit
 * @param  {Function}       callback            Standard callback function
 * @param  {Object}         callback.err        An error object, if any
 */
var deleteOrgUnitSeries = module.exports.deleteOrgUnitSeries = function(ctx, id, series, callback) {
    // Ensure that the orgunit id is a valid number
    id = GrasshopperUtil.getNumberParam(id);

    var validator = new Validator();
    validator.check(null, {'code': 401, 'msg': 'You need to be authenticated in order to delete series from an organisational unit'}).isLoggedInUser(ctx);
    validator.check(id, {'code': 400, 'msg': 'A valid organisational unit id is a positive integer'}).isInt();
    validator.check(null, {'code': 400, 'msg': 'At least 1 serie needs to be specified'}).isArray(series);
    if (series) {
        validator.check(series.length, {'code': 400, 'msg': 'At least 1 serie needs to be specified'}).min(1);
        _.each(series, function(serie) {
            validator.check(serie, {'code': 400, 'msg': 'A valid serie id is a positive integer'}).isInt();
        });
    }
    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    }

    series = _.map(series, function(serieId) {
        return GrasshopperUtil.getNumberParam(serieId);
    });

    // Ensure the organisational unit exists
    OrgUnitDAO.getOrgUnit(id, true, function(err, orgUnit) {
        if (err) {
            return callback(err);
        }

        // Ensure the series are part of the organisational unit
        var serieObjects = _.filter(orgUnit.Series, function(serie) {
            return _.contains(series, serie.id);
        });
        if (serieObjects.length !== series.length) {
            return callback({'code': 400, 'msg': 'One or more of the specified series are not part of the organisational unit'});
        }

        // Ensure the current user can add series to the organisational unit
        OrgUnitAuthz.canDeleteOrgUnitSeries(ctx, orgUnit, function(err, canDelete) {
            if (err) {
                return callback(err);
            } else if (!canDelete) {
                log().warn({
                    'actor': ctx.user.id,
                    'displayName': orgUnit.displayName
                }, 'An unauthorized attempt at deleting series from an organisational unit occurred');
                return callback({'code': 401, 'msg': 'You are not allowed to delete series from the organisational unit'});
            }

            OrgUnitDAO.deleteOrgUnitSeries(orgUnit, serieObjects, callback);
        });
    });
};


///////////////
// Utilities //
///////////////

/**
 * Get an organisational unit, if no `orgUnitId` was specified, `null`
 * will be returned rather than a 404 error. If an id was specified
 * that does not point to an existing orgUnit a 404 error will be returned.
 *
 * @param  {Context}        ctx                     Standard context containing the current user and the current app
 * @param  {Number}         orgUnitId               The id of the organisational unit to retrieve
 * @param  {Function}       callback                Standard callback function
 * @param  {Object}         callback.err            An error object, if any
 * @param  {Group}          [callback.orgUnit]      The retrieved organisational unit or null, if the provided `orgUnitId` was `null`
 * @api private
 */
var _getOptionalOrgUnit = function(ctx, orgUnitId, callback) {
    if (!orgUnitId) {
        return callback(null, null);
    }

    OrgUnitDAO.getOrgUnit(orgUnitId, false, callback);
};
