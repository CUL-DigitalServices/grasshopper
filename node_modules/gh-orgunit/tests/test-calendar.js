/**
 * Copyright (c) 2015 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var _ = require('lodash');
var assert = require('assert');
var moment = require('moment');

var EventsTestsUtil = require('gh-events/tests/util');
var SeriesTestsUtil = require('gh-series/tests/util');
var TestsUtil = require('gh-tests');

var OrgUnitTestsUtil = require('./util');

describe('Organisational units - calendars', function() {

    describe('JSON', function() {

        /**
         * Test that verifies getting an organisational unit's calendar
         */
        it('verify getting a calendar', function(callback) {
            OrgUnitTestsUtil.createSimpleTree(global.tests.admins.cam2013.client, function(course, subject, part, module, series) {

                // Get the events under the module
                var events = _.union(series[0].events, series[1].events, series[2].events, series[3].events);
                events = _.sortBy(events, 'start');

                // Verify the feed contains the correct events (and in the correct order)
                var start = moment(new Date(_.first(events).start)).subtract(1, 'day').format();
                var end = moment(new Date(_.last(events).end)).add(1, 'day').format();
                OrgUnitTestsUtil.assertGetOrgUnitCalendar(global.tests.admins.cam2013.client, module.id, start, end, events, function(calendar) {
                    return callback();
                });
            });
        });

        /**
         * Test that verifies validation when getting an organisational unit's calendar
         */
        it('verify validation when getting a calendar', function(callback) {
            OrgUnitTestsUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'Test org unit', 'course', null, function(orgUnit) {

                var start = moment().format();
                var end = moment().add(2, 'hour').format();

                // Invalid organisational unit id
                OrgUnitTestsUtil.assertGetOrgUnitCalendarFails(global.tests.admins.cam2013.client, 'Not a number', start, end, 400, function() {

                    // Missing organisational unit id
                    OrgUnitTestsUtil.assertGetOrgUnitCalendarFails(global.tests.admins.cam2013.client, -1, start, end, 404, function() {
                        OrgUnitTestsUtil.assertGetOrgUnitCalendarFails(global.tests.admins.cam2013.client, 234234234, start, end, 404, function() {

                            // Mising start date
                            OrgUnitTestsUtil.assertGetOrgUnitCalendarFails(global.tests.admins.cam2013.client, orgUnit.id, null, end, 400, function() {

                                // Missing end date
                                OrgUnitTestsUtil.assertGetOrgUnitCalendarFails(global.tests.admins.cam2013.client, orgUnit.id, start, null, 400, function() {

                                    // Invalid start date
                                    OrgUnitTestsUtil.assertGetOrgUnitCalendarFails(global.tests.admins.cam2013.client, orgUnit.id, 'bleh', end, 400, function() {

                                        // Invalid end date
                                        OrgUnitTestsUtil.assertGetOrgUnitCalendarFails(global.tests.admins.cam2013.client, orgUnit.id, start, 'bleh', 400, function() {

                                            // The start date cannot come after the end date
                                            OrgUnitTestsUtil.assertGetOrgUnitCalendarFails(global.tests.admins.cam2013.client, orgUnit.id, end, start, 400, function() {
                                                return callback();
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies authorization when getting a calendar
         */
        it('verify authorization when getting a calendar', function(callback) {
            OrgUnitTestsUtil.assertCreateOrgUnit(global.tests.admins.oxford2014.client, 'Test org unit', 'course', null, function(orgUnit) {

                var start = moment().format();
                var end = moment().add(2, 'hour').format();

                // Anonymous users from other applications can't access the organisational unit's calendar
                TestsUtil.getAnonymousAppUserClient(global.tests.apps.cam2013, function(anonymousClient) {
                    OrgUnitTestsUtil.assertGetOrgUnitCalendarFails(anonymousClient, orgUnit.id, start, end, 401, function() {

                        // Anonymous users from the application can access the organisational unit's calendar
                        TestsUtil.getAnonymousAppUserClient(global.tests.apps.oxford2014, function(anonymousOxfordClient) {
                            OrgUnitTestsUtil.assertGetOrgUnitCalendar(anonymousOxfordClient, orgUnit.id, start, end, null, function() {

                                // Regular users from other applications can't access the organisational unit's calendar
                                TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, false, function(camUser) {
                                    OrgUnitTestsUtil.assertGetOrgUnitCalendarFails(camUser.client, orgUnit.id, start, end, 401, function() {

                                        // Regular users from the same application can access the organisational unit's calendar
                                        TestsUtil.generateTestUsers(global.tests.apps.oxford2014, 1, false, function(oxfordUser) {
                                            OrgUnitTestsUtil.assertGetOrgUnitCalendar(oxfordUser.client, orgUnit.id, start, end, null, function() {

                                                // Application admins from other applications can't access the organisational unit's calendar
                                                OrgUnitTestsUtil.assertGetOrgUnitCalendarFails(global.tests.admins.cam2013.client, orgUnit.id, start, end, 401, function() {

                                                    // Application admins from the same application can access the organisational unit's calendar
                                                    OrgUnitTestsUtil.assertGetOrgUnitCalendar(global.tests.admins.oxford2014.client, orgUnit.id, start, end, null, function() {

                                                        // Anonymous users on the global admin application can't access the organisational unit's calendar
                                                        TestsUtil.getAnonymousGlobalAdminRestClient(function(anonymousGlobalClient) {
                                                            OrgUnitTestsUtil.assertGetOrgUnitCalendarFails(anonymousGlobalClient, orgUnit.id, start, end, 401, function() {

                                                                // Global admins can access the organisational unit's calendar
                                                                TestsUtil.getGlobalAdminRestClient(function(globalAdminRestClient) {
                                                                    OrgUnitTestsUtil.assertGetOrgUnitCalendar(globalAdminRestClient, orgUnit.id, start, end, null, function() {
                                                                        return callback();
                                                                    });
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    describe('iCal', function() {

        /**
         * Test that verifies getting an organisational unit's calendar in iCal format
         */
        it('verify getting a calendar', function(callback) {
            OrgUnitTestsUtil.createSimpleTree(global.tests.admins.cam2013.client, function(course, subject, part, module, series) {

                // Verify the feed contains the correct events (and in the correct order)
                var events = _.union(series[0].events, series[1].events, series[2].events, series[3].events);
                events = _.sortBy(events, 'start');
                OrgUnitTestsUtil.assertGetOrgUnitCalendarIcal(global.tests.admins.cam2013.client, module.id, events, function(calendar) {
                    return callback();
                });
            });
        });

        /**
         * Test that verifies validation when getting an organisational unit's calendar in iCal format
         */
        it('verify validation when getting a calendar', function(callback) {
            // Invalid organisational unit id
            OrgUnitTestsUtil.assertGetOrgUnitCalendarIcalFails(global.tests.admins.cam2013.client, 'Not a number', 400, function() {

                // Missing organisational unit
                OrgUnitTestsUtil.assertGetOrgUnitCalendarIcalFails(global.tests.admins.cam2013.client, -1, 404, function() {
                    OrgUnitTestsUtil.assertGetOrgUnitCalendarIcalFails(global.tests.admins.cam2013.client, 345345345, 404, function() {
                        return callback();
                    });
                });
            });
        });

        /**
         * Test that verifies authorization when getting a calendar
         */
        it('verify authorization when getting a calendar', function(callback) {
            OrgUnitTestsUtil.assertCreateOrgUnit(global.tests.admins.oxford2014.client, 'Test org unit', 'course', null, function(orgUnit) {

                var start = moment().format();
                var end = moment().add(2, 'hour').format();

                // Anonymous users from other applications can't access the organisational unit's calendar
                TestsUtil.getAnonymousAppUserClient(global.tests.apps.cam2013, function(anonymousClient) {
                    OrgUnitTestsUtil.assertGetOrgUnitCalendarIcalFails(anonymousClient, orgUnit.id, 401, function() {

                        // Anonymous users from the application can access the organisational unit's calendar
                        TestsUtil.getAnonymousAppUserClient(global.tests.apps.oxford2014, function(anonymousOxfordClient) {
                            OrgUnitTestsUtil.assertGetOrgUnitCalendarIcal(anonymousOxfordClient, orgUnit.id, null, function() {

                                // Regular users from other applications can't access the organisational unit's calendar
                                TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, false, function(camUser) {
                                    OrgUnitTestsUtil.assertGetOrgUnitCalendarIcalFails(camUser.client, orgUnit.id, 401, function() {

                                        // Regular users from the same application can access the organisational unit's calendar
                                        TestsUtil.generateTestUsers(global.tests.apps.oxford2014, 1, false, function(oxfordUser) {
                                            OrgUnitTestsUtil.assertGetOrgUnitCalendarIcal(oxfordUser.client, orgUnit.id, null, function() {

                                                // Application admins from other applications can't access the organisational unit's calendar
                                                OrgUnitTestsUtil.assertGetOrgUnitCalendarIcalFails(global.tests.admins.cam2013.client, orgUnit.id, 401, function() {

                                                    // Application admins from the same application can access the organisational unit's calendar
                                                    OrgUnitTestsUtil.assertGetOrgUnitCalendarIcal(global.tests.admins.oxford2014.client, orgUnit.id, null, function() {

                                                        // Anonymous users on the global admin application can't access the organisational unit's calendar
                                                        TestsUtil.getAnonymousGlobalAdminRestClient(function(anonymousGlobalClient) {
                                                            OrgUnitTestsUtil.assertGetOrgUnitCalendarIcalFails(anonymousGlobalClient, orgUnit.id, 401, function() {

                                                                // Global admins can access the organisational unit's calendar
                                                                TestsUtil.getGlobalAdminRestClient(function(globalAdminRestClient) {
                                                                    OrgUnitTestsUtil.assertGetOrgUnitCalendarIcal(globalAdminRestClient, orgUnit.id, null, function() {
                                                                        return callback();
                                                                    });
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    describe('RSS', function() {

        /**
         * Test that verifies getting an organisational unit's calendar in RSS format
         */
        it('verify getting a calendar', function(callback) {
            OrgUnitTestsUtil.createSimpleTree(global.tests.admins.cam2013.client, function(course, subject, part, module, series) {

                // Verify the feed contains the correct events (and in the correct order)
                var events = _.union(series[0].events, series[1].events, series[2].events, series[3].events);
                events = _.sortBy(events, 'start');
                OrgUnitTestsUtil.assertGetOrgUnitCalendarRss(global.tests.admins.cam2013.client, module.id, events, function(calendar) {
                    return callback();
                });
            });
        });

        /**
         * Test that verifies validation when getting an organisational unit's calendar in RSS format
         */
        it('verify validation when getting a calendar', function(callback) {
            // Invalid organisational unit id
            OrgUnitTestsUtil.assertGetOrgUnitCalendarRssFails(global.tests.admins.cam2013.client, 'Not a number', 400, function() {

                // Missing organisational unit
                OrgUnitTestsUtil.assertGetOrgUnitCalendarRssFails(global.tests.admins.cam2013.client, -1, 404, function() {
                    OrgUnitTestsUtil.assertGetOrgUnitCalendarRssFails(global.tests.admins.cam2013.client, 345345345, 404, function() {
                        return callback();
                    });
                });
            });
        });

        /**
         * Test that verifies authorization when getting a calendar
         */
        it('verify authorization when getting a calendar', function(callback) {
            OrgUnitTestsUtil.assertCreateOrgUnit(global.tests.admins.oxford2014.client, 'Test org unit', 'course', null, function(orgUnit) {

                var start = moment().format();
                var end = moment().add(2, 'hour').format();

                // Anonymous users from other applications can't access the organisational unit's calendar
                TestsUtil.getAnonymousAppUserClient(global.tests.apps.cam2013, function(anonymousClient) {
                    OrgUnitTestsUtil.assertGetOrgUnitCalendarRssFails(anonymousClient, orgUnit.id, 401, function() {

                        // Anonymous users from the application can access the organisational unit's calendar
                        TestsUtil.getAnonymousAppUserClient(global.tests.apps.oxford2014, function(anonymousOxfordClient) {
                            OrgUnitTestsUtil.assertGetOrgUnitCalendarRss(anonymousOxfordClient, orgUnit.id, null, function() {

                                // Regular users from other applications can't access the organisational unit's calendar
                                TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, false, function(camUser) {
                                    OrgUnitTestsUtil.assertGetOrgUnitCalendarRssFails(camUser.client, orgUnit.id, 401, function() {

                                        // Regular users from the same application can access the organisational unit's calendar
                                        TestsUtil.generateTestUsers(global.tests.apps.oxford2014, 1, false, function(oxfordUser) {
                                            OrgUnitTestsUtil.assertGetOrgUnitCalendarRss(oxfordUser.client, orgUnit.id, null, function() {

                                                // Application admins from other applications can't access the organisational unit's calendar
                                                OrgUnitTestsUtil.assertGetOrgUnitCalendarRssFails(global.tests.admins.cam2013.client, orgUnit.id, 401, function() {

                                                    // Application admins from the same application can access the organisational unit's calendar
                                                    OrgUnitTestsUtil.assertGetOrgUnitCalendarRss(global.tests.admins.oxford2014.client, orgUnit.id, null, function() {

                                                        // Anonymous users on the global admin application can't access the organisational unit's calendar
                                                        TestsUtil.getAnonymousGlobalAdminRestClient(function(anonymousGlobalClient) {
                                                            OrgUnitTestsUtil.assertGetOrgUnitCalendarRssFails(anonymousGlobalClient, orgUnit.id, 401, function() {

                                                                // Global admins can access the organisational unit's calendar
                                                                TestsUtil.getGlobalAdminRestClient(function(globalAdminRestClient) {
                                                                    OrgUnitTestsUtil.assertGetOrgUnitCalendarRss(globalAdminRestClient, orgUnit.id, null, function() {
                                                                        return callback();
                                                                    });
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });
});
