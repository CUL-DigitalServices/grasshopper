/**
 * Copyright (c) 2014 "Fronteer LTD"
 * Grasshopper Serie Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var _ = require('lodash');
var assert = require('assert');
var moment = require('moment');

var EventsTestsUtil = require('gh-events/tests/util');
var SeriesTestsUtil = require('gh-series/tests/util');
var TestsUtil = require('gh-tests');
var UsersTestsUtil = require('gh-users/tests/util');

var OrgUnitTestsUtil = require('./util');

describe('Organisational units', function() {

    describe('Subscribing', function() {

        /**
         * Test that verifies that a user can subscribe to a organisational unit
         */
        it('verify a user can subscribe to an organisational unit', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, false, function(simon) {

                // Generate an organasiational unit structure that holds some series
                OrgUnitTestsUtil.createSimpleTree(global.tests.admins.cam2013.client, function(courseUnit, subjectUnit, partUnit, moduleUnit, series) {

                    // Subscribe to the module
                    OrgUnitTestsUtil.assertSubscribeOrgUnit(simon.client, moduleUnit.id, null, function() {
                        return callback();
                    });
                });
            });
        });

        /**
         * Test that verifies validation when a user subscribes to an organisational unit
         */
        it('verify validation when a user subscribes to an organisational unit', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, false, function(simon) {


                // Generate a test organisational unit
                OrgUnitTestsUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'Test orgunit', 'test', null, function(orgUnit) {

                    // Invalid organisational unit id
                    OrgUnitTestsUtil.assertSubscribeOrgUnitFails(simon.client, 'Not a number', simon.profile.id, 400, function() {

                        // Unknown organisational unit id
                        OrgUnitTestsUtil.assertSubscribeOrgUnitFails(simon.client, -1, simon.profile.id, 404, function() {
                            OrgUnitTestsUtil.assertSubscribeOrgUnitFails(simon.client, 234234234234, simon.profile.id, 404, function() {

                                // Invalid user id
                                OrgUnitTestsUtil.assertSubscribeOrgUnitFails(simon.client, orgUnit.id, 'Not a number', 400, function() {

                                    // Unknown user id
                                    OrgUnitTestsUtil.assertSubscribeOrgUnitFails(simon.client, orgUnit.id, -1, 404, function() {
                                        OrgUnitTestsUtil.assertSubscribeOrgUnitFails(simon.client, orgUnit.id, 234242423423, 404, function() {
                                            return callback();
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies authorization when a user subscribes to an organisational unit
         */
        it('verify authorization when a user subscribes to an organisational unit', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 2, false, function(camUser, anotherCamUser) {
                TestsUtil.generateTestUsers(global.tests.apps.oxford2014, 1, false, function(oxfordUser) {

                    // Generate some test organisational units
                    OrgUnitTestsUtil.createSimpleTree(global.tests.admins.cam2013.client, function(courseUnit, subjectUnit, partUnit, moduleUnit, series) {

                        // Anonymous users cannot subscribe to organisational units
                        TestsUtil.getAnonymousAppUserClient(global.tests.apps.cam2013, function(anonymousClient) {
                            OrgUnitTestsUtil.assertSubscribeOrgUnitFails(anonymousClient, moduleUnit.id, camUser.profile.id, 401, function() {

                                // Users cannot subscribe to organisational units from another app
                                OrgUnitTestsUtil.assertSubscribeOrgUnitFails(oxfordUser.client, moduleUnit.id, oxfordUser.profile.id, 401, function() {

                                    // Users cannot subscribe other users
                                    OrgUnitTestsUtil.assertSubscribeOrgUnitFails(camUser.client, moduleUnit.id, anotherCamUser.profile.id, 401, function() {
                                        OrgUnitTestsUtil.assertSubscribeOrgUnitFails(camUser.client, moduleUnit.id, oxfordUser.profile.id, 401, function() {

                                            // App admins can subscribe users
                                            OrgUnitTestsUtil.assertSubscribeOrgUnit(global.tests.admins.cam2013.client, partUnit.id, camUser.profile.id, function() {

                                                // App admins cannot subscribe users from other applications
                                                OrgUnitTestsUtil.assertSubscribeOrgUnitFails(global.tests.admins.cam2013.client, partUnit.id, oxfordUser.profile.id, 401, function() {

                                                    // Global admins can subscribe users
                                                    TestsUtil.getGlobalAdminRestClient(function(globalAdminClient) {
                                                        OrgUnitTestsUtil.assertSubscribeOrgUnit(globalAdminClient, subjectUnit.id, camUser.profile.id, function() {
                                                            return callback();
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that a user can subscribe to an organisational unit without any series or events
         */
        it('verify a user can subscribe to an organisational unit without any series or events', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, false, function(simon) {

                // Generate a test organisational unit without any series or events
                OrgUnitTestsUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'Test orgunit', 'type', null, function(orgUnit) {

                    // Subscribe to the organisational
                    OrgUnitTestsUtil.assertSubscribeOrgUnit(simon.client, orgUnit.id, null, function() {
                        return callback();
                    });
                });
            });
        });
    });

    describe('Unsubscribing', function() {

        /**
         * Test that verifies that a user can unsubscribe from an organisational unit
         */
        it('verify a user can unsubscribe from an organisational unit', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, false, function(simon) {

                // Generate an organasiational unit structure that holds some series
                OrgUnitTestsUtil.createSimpleTree(global.tests.admins.cam2013.client, function(courseUnit, subjectUnit, partUnit, moduleUnit, series) {

                    // Subscribe to the module
                    OrgUnitTestsUtil.assertSubscribeOrgUnit(simon.client, moduleUnit.id, null, function() {

                        // Unsubscribe from the module
                        OrgUnitTestsUtil.assertUnsubscribeOrgUnit(simon.client, moduleUnit.id, null, function() {
                            return callback();
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies validation when a user unsubscribes from an organisational unit
         */
        it('verify validation when a user unsubscribes from an organisational unit', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, false, function(simon) {

                // Generate a test organisational unit
                OrgUnitTestsUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'Test orgunit', 'test', null, function(orgUnit) {

                    // Invalid organisational unit id
                    OrgUnitTestsUtil.assertUnsubscribeOrgUnitFails(simon.client, 'Not a number', simon.profile.id, 400, function() {

                        // Unknown organisational unit id
                        OrgUnitTestsUtil.assertUnsubscribeOrgUnitFails(simon.client, -1, simon.profile.id, 404, function() {
                            OrgUnitTestsUtil.assertUnsubscribeOrgUnitFails(simon.client, -1, simon.profile.id, 404, function() {

                                // Invalid user id
                                OrgUnitTestsUtil.assertUnsubscribeOrgUnitFails(simon.client, orgUnit.id, 'Not a number', 400, function() {

                                    // Unknown user id
                                    OrgUnitTestsUtil.assertUnsubscribeOrgUnitFails(simon.client, orgUnit.id, -1, 404, function() {
                                        OrgUnitTestsUtil.assertUnsubscribeOrgUnitFails(simon.client, orgUnit.id, 23423423423, 404, function() {
                                            return callback();
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies authorization when a user unsubscribes from an organisational unit
         */
        it('verify authorization when a user unsubscribes from an organisational unit', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 2, false, function(camUser, anotherCamUser) {
                TestsUtil.generateTestUsers(global.tests.apps.oxford2014, 1, false, function(oxfordUser) {

                    // Generate some test series with some events on the cambridge app
                    OrgUnitTestsUtil.createSimpleTree(global.tests.admins.cam2013.client, function(courseUnit, subjectUnit, partUnit, moduleUnit, series) {

                        // Subscribe to some organisational units
                        OrgUnitTestsUtil.assertSubscribeOrgUnit(camUser.client, moduleUnit.id, camUser.profile.id, function() {
                            OrgUnitTestsUtil.assertSubscribeOrgUnit(camUser.client, partUnit.id, camUser.profile.id, function() {
                                OrgUnitTestsUtil.assertSubscribeOrgUnit(camUser.client, subjectUnit.id, camUser.profile.id, function() {

                                    // Anonymous users cannot unsubscribe from an organisational unit
                                    TestsUtil.getAnonymousAppUserClient(global.tests.apps.cam2013, function(anonymousClient) {
                                        OrgUnitTestsUtil.assertUnsubscribeOrgUnitFails(anonymousClient, moduleUnit.id, camUser.profile.id, 401, function() {

                                            // Users cannot unsubscribe other users
                                            OrgUnitTestsUtil.assertUnsubscribeOrgUnitFails(anotherCamUser.client, moduleUnit.id, camUser.profile.id, 401, function() {

                                                // Users cannot unsubscribe other users from other applications
                                                OrgUnitTestsUtil.assertUnsubscribeOrgUnitFails(oxfordUser.client, moduleUnit.id, camUser.profile.id, 401, function() {

                                                    // Users can unsubscribe themselves
                                                    OrgUnitTestsUtil.assertUnsubscribeOrgUnit(camUser.client, moduleUnit.id, camUser.profile.id, function() {

                                                        // App admins can unsubscribe users
                                                        OrgUnitTestsUtil.assertUnsubscribeOrgUnit(global.tests.admins.cam2013.client, partUnit.id, camUser.profile.id, function() {

                                                            // App admins cannot unsubscribe users from other applications
                                                            OrgUnitTestsUtil.assertUnsubscribeOrgUnitFails(global.tests.admins.cam2013.client, partUnit.id, oxfordUser.profile.id, 401, function() {

                                                                // Global admins can unsubscribe users
                                                                TestsUtil.getGlobalAdminRestClient(function(globalAdminClient) {
                                                                    OrgUnitTestsUtil.assertUnsubscribeOrgUnit(globalAdminClient, courseUnit.id, camUser.profile.id, function() {
                                                                        return callback();
                                                                    });
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });
});
