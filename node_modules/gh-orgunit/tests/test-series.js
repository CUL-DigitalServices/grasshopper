/**
 * Copyright (c) 2014 "Fronteer LTD"
 * Grasshopper OrgUnit Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var _ = require('lodash');
var assert = require('assert');

var GroupsTestUtil = require('gh-groups/tests/util');
var SeriesTestUtil = require('gh-series/tests/util');
var TestsUtil = require('gh-tests');

var OrgUnitTestUtil = require('./util');

describe('Organisational units - Series', function() {

    describe('Adding series to an organisational unit', function() {

        /**
         * Test that verifies adding a serie to an organisational unit
         */
        it('verify adding a serie to an organisational unit', function(callback) {
            // Create an organisational unit
            OrgUnitTestUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'Test org unit', 'course', null, function(orgUnit) {

                // Create a serie
                SeriesTestUtil.assertCreateSerie(global.tests.admins.cam2013.client, 'Test serie', null, function(serie) {

                    // Add the serie to the organisational unit
                    OrgUnitTestUtil.assertAddOrgUnitSeries(global.tests.admins.cam2013.client, orgUnit.id, [serie.id], callback);
                });
            });
        });

        /**
         * Test that verifies authorization when adding a serie to an organisational unit
         */
        it('verify adding a serie to an organisational unit authorization', function(callback) {
            // Create an organisational unit
            OrgUnitTestUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'Test org unit', 'course', null, function(orgUnit) {

                // Create a serie
                SeriesTestUtil.assertCreateSerie(global.tests.admins.cam2013.client, 'Test serie', null, function(serie) {

                    // Anonymous users cannot add series to organisational units
                    TestsUtil.getAnonymousAppUserClient(global.tests.apps.cam2013, function(anonymousClient) {
                        OrgUnitTestUtil.assertAddOrgUnitSeriesFails(anonymousClient, orgUnit.id, [serie.id], 401, function() {
                            TestsUtil.getAnonymousGlobalAdminRestClient(function(anonymousGlobalClient) {
                                OrgUnitTestUtil.assertAddOrgUnitSeriesFails(anonymousGlobalClient, orgUnit.id, [serie.id], 401, function() {

                                    // Regular users can't add series to organisational units either
                                    TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, false, function(simon) {
                                        OrgUnitTestUtil.assertAddOrgUnitSeriesFails(simon.client, orgUnit.id, [serie.id], 401, function() {

                                            // Application admins can't add series to organisational units from other applications
                                            OrgUnitTestUtil.assertAddOrgUnitSeriesFails(global.tests.admins.oxford2014.client, orgUnit.id, [serie.id], 401, function() {
                                                return callback();
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies validation when adding a serie to an organisational unit
         */
        it('verify adding a serie to an organisational unit validation', function(callback) {
            // Create an organisational unit
            OrgUnitTestUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'Test org unit', 'course', null, function(orgUnit) {

                // Create a serie
                SeriesTestUtil.assertCreateSerie(global.tests.admins.cam2013.client, 'Test serie', null, function(serie) {

                    // Invalid organisational unit id
                    OrgUnitTestUtil.assertAddOrgUnitSeriesFails(global.tests.admins.cam2013.client, 'not a number', [serie.id], 400, function() {
                        OrgUnitTestUtil.assertAddOrgUnitSeriesFails(global.tests.admins.cam2013.client, -1, [serie.id], 404, function() {

                            // Invalid serie id
                            OrgUnitTestUtil.assertAddOrgUnitSeriesFails(global.tests.admins.cam2013.client, orgUnit.id, 'not a number', 400, function() {
                                OrgUnitTestUtil.assertAddOrgUnitSeriesFails(global.tests.admins.cam2013.client, orgUnit.id, -1, 404, function() {
                                    OrgUnitTestUtil.assertAddOrgUnitSeriesFails(global.tests.admins.cam2013.client, orgUnit.id, [serie.id, 'not a number'], 400, function() {
                                        OrgUnitTestUtil.assertAddOrgUnitSeriesFails(global.tests.admins.cam2013.client, orgUnit.id, [serie.id, -1], 404, function() {
                                            return callback();
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that a serie cannot be added to an organisational unit from another application
         */
        it('verify a serie cannot be added to an organisational unit from another application', function(callback) {
            OrgUnitTestUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'Test org unit', 'course', null, function(orgUnit2013) {
                SeriesTestUtil.assertCreateSerie(global.tests.admins.cam2013.client, 'Test serie', null, function(serie2013) {
                    OrgUnitTestUtil.assertCreateOrgUnit(global.tests.admins.cam2014.client, 'Test org unit', 'course', null, function(orgUnit2014) {
                        SeriesTestUtil.assertCreateSerie(global.tests.admins.cam2014.client, 'Test serie', null, function(serie2014) {

                            OrgUnitTestUtil.assertAddOrgUnitSeriesFails(global.tests.admins.cam2013.client, orgUnit2013.id, [serie2014.id], 400, function() {
                                OrgUnitTestUtil.assertAddOrgUnitSeriesFails(global.tests.admins.cam2013.client, orgUnit2014.id, [serie2013.id], 400, function() {
                                    return callback();
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    describe('Deleting series from an organisational unit', function() {

        /**
         * Test that verifies deleting a serie from an organisational unit
         */
        it('verify deleting a serie from an organisational unit', function(callback) {
            // Create an organisational unit
            OrgUnitTestUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'Test org unit', 'course', null, function(orgUnit) {

                // Create a serie
                SeriesTestUtil.assertCreateSerie(global.tests.admins.cam2013.client, 'Test serie', null, function(serie) {

                    // Add the serie from the organisational unit
                    OrgUnitTestUtil.assertAddOrgUnitSeries(global.tests.admins.cam2013.client, orgUnit.id, [serie.id], function() {

                        // Delete the serie from the organisational unit
                        OrgUnitTestUtil.assertDeleteOrgUnitSeries(global.tests.admins.cam2013.client, orgUnit.id, [serie.id], callback);
                    });
                });
            });
        });

        /**
         * Test that verifies authorization when deleting a serie from an organisational unit
         */
        it('verify deleting a serie from an organisational unit authorization', function(callback) {
            // Create an organisational unit
            OrgUnitTestUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'Test org unit', 'course', null, function(orgUnit) {

                // Create a serie
                SeriesTestUtil.assertCreateSerie(global.tests.admins.cam2013.client, 'Test serie', null, function(serie) {

                    // Add the serie from the organisational unit
                    OrgUnitTestUtil.assertAddOrgUnitSeries(global.tests.admins.cam2013.client, orgUnit.id, [serie.id], function() {

                        // Anonymous users cannot delete series from organisational units
                        TestsUtil.getAnonymousAppUserClient(global.tests.apps.cam2013, function(anonymousClient) {
                            OrgUnitTestUtil.assertDeleteOrgUnitSeriesFails(anonymousClient, orgUnit.id, [serie.id], 401, function() {
                                TestsUtil.getAnonymousGlobalAdminRestClient(function(anonymousGlobalClient) {
                                    OrgUnitTestUtil.assertDeleteOrgUnitSeriesFails(anonymousGlobalClient, orgUnit.id, [serie.id], 401, function() {

                                        // Regular users can't delete series from organisational units either
                                        TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, false, function(simon) {
                                            OrgUnitTestUtil.assertDeleteOrgUnitSeriesFails(simon.client, orgUnit.id, [serie.id], 401, function() {

                                                // Application admins can't delete series from organisational units on other applications
                                                OrgUnitTestUtil.assertDeleteOrgUnitSeriesFails(global.tests.admins.oxford2014.client, orgUnit.id, [serie.id], 401, function() {
                                                    return callback();
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies validation when deleting a serie to an organisational unit
         */
        it('verify adding a serie to an organisational unit validation', function(callback) {
            // Create an organisational unit
            OrgUnitTestUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'Test org unit', 'course', null, function(orgUnit) {

                // Create a serie
                SeriesTestUtil.assertCreateSerie(global.tests.admins.cam2013.client, 'Test serie', null, function(serie) {

                    // Invalid organisational unit id
                    OrgUnitTestUtil.assertDeleteOrgUnitSeriesFails(global.tests.admins.cam2013.client, 'not a number', [serie.id], 400, function() {
                        OrgUnitTestUtil.assertDeleteOrgUnitSeriesFails(global.tests.admins.cam2013.client, -1, [serie.id], 404, function() {

                            // Invalid serie id
                            OrgUnitTestUtil.assertDeleteOrgUnitSeriesFails(global.tests.admins.cam2013.client, orgUnit.id, 'not a number', 400, function() {
                                OrgUnitTestUtil.assertDeleteOrgUnitSeriesFails(global.tests.admins.cam2013.client, orgUnit.id, [serie.id, 'not a number'], 400, function() {
                                    return callback();
                                });
                            });
                        });
                    });
                });
            });
        });
    });
});
