/**
 * Copyright (c) 2014 "Fronteer LTD"
 * Grasshopper OrgUnit Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var _ = require('lodash');
var assert = require('assert');

/**
 * Assert that an organisational unit has all expected properties
 *
 * @param  {OrgUnit}              orgUnit               The organisational unit to assert the properties for
 * @param  {OrgUnit}              expectedOrgUnit       The organisational unit to which the provided organisational unit should be compared
 * @throws {AssertionError}                             Error thrown when an assertion failed
 */
var assertOrgUnit = module.exports.assertOrgUnit = function(orgUnit, expectedOrgUnit) {
    assert.ok(orgUnit);
    assert.ok(orgUnit.id);
    assert.ok(orgUnit.AppId);
    assert.ok(orgUnit.displayName);
    assert.ok(orgUnit.type);
    assert.ok(orgUnit.createdAt);
    assert.ok(orgUnit.updatedAt);
    assert.strictEqual(orgUnit.id, expectedOrgUnit.id);
    assert.strictEqual(orgUnit.AppId, expectedOrgUnit.AppId);
    assert.strictEqual(orgUnit.displayName, expectedOrgUnit.displayName);
    assert.strictEqual(orgUnit.type, expectedOrgUnit.type);
    assert.strictEqual(orgUnit.group, expectedOrgUnit.group);
    if (expectedOrgUnit.ParentId) {
        assert.strictEqual(orgUnit.ParentId, expectedOrgUnit.ParentId);
    } else {
        assert.ok(!orgUnit.ParentId);
    }
};

/**
 * Assert that a new organisational unit can be created
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {String}             displayName                     The name of the organisational unit
 * @param  {Number}             type                            The organisational unit type (e.g. `tripos`, `part`)
 * @param  {Object}             [opts]                          A set of optional parameters
 * @param  {Number}             [opts.app]                      The id of the application that this organisational unit will belong to
 * @param  {String}             [opts.description]              The description of the organisational unit
 * @param  {Number}             [opts.group]                    The id of the group that can manage the organisational unit. Defaults to creating a new group with the current user as a member
 * @param  {Number}             [opts.parent]                   The id of the parent organisational unit
 * @param  {Function}           callback                        Standard callback function
 * @param  {OrgUnit}            callback.orgUnit                The created organisational unit
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertCreateOrgUnit = module.exports.assertCreateOrgUnit = function(client, displayName, type, opts, callback) {
    opts = opts || {};

    client.orgUnit.createOrgUnit(displayName, type, opts, function(err, createdOrgUnit, response) {
        assert.ok(!err);
        assert.ok(createdOrgUnit);
        assert.ok(createdOrgUnit.id);
        assert.ok(createdOrgUnit.createdAt);
        assert.ok(createdOrgUnit.updatedAt);
        assert.strictEqual(createdOrgUnit.displayName, displayName);
        assert.strictEqual(createdOrgUnit.type, type);

        if (opts.description) {
            assert.strictEqual(createdOrgUnit.description, opts.description);
        }
        if (opts.group) {
            assert.strictEqual(createdOrgUnit.GroupId, opts.group);
        }
        if (opts.parent) {
            assert.strictEqual(createdOrgUnit.ParentId, opts.parent);
        }
        if (opts.app) {
            assert.strictEqual(createdOrgUnit.AppId, opts.app);
        }
        return callback(createdOrgUnit);
    });
};

/**
 * Assert that a new organisational unit can not be created
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {String}             displayName                     The name of the organisational unit
 * @param  {Number}             type                            The organisational unit type (e.g. `tripos`, `part`)
 * @param  {Object}             [opts]                          A set of optional parameters
 * @param  {Number}             [opts.app]                      The id of the application that this organisational unit will belong to
 * @param  {String}             [opts.description]              The description of the organisational unit
 * @param  {Number}             [opts.group]                    The id of the group that can manage the organisational unit. Defaults to creating a new group with the current user as a member
 * @param  {Number}             [opts.parent]                   The id of the parent organisational unit
 * @param  {Number}             code                            The expected HTTP error code
 * @param  {Function}           callback                        Standard callback function
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertCreateOrgUnitFails = module.exports.assertCreateOrgUnitFails = function(client, displayName, type, opts, code, callback) {
    client.orgUnit.createOrgUnit(displayName, type, opts, function(err, orgUnit, response) {
        assert.ok(err);
        assert.strictEqual(err.code, code);
        assert.ok(!orgUnit);
        return callback();
    });
};

/**
 * Assert that an organisational unit can be updated
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Number}             id                              The id of the organisational unit to update
 * @param  {Object}             opts                            The values to update the organisational unit with
 * @param  {String}             [opts.displayName]              Updated organisational unit name
 * @param  {String}             [opts.description]              Updated organisational unit description
 * @param  {String}             [opts.type]                     Updated organisational unit type
 * @param  {Number}             [opts.groupId]                  Updated organisational unit group
 * @param  {Number}             [opts.parent]                   Updated organisational unit parent
 * @param  {Function}           callback                        Standard callback function
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertUpdateOrgUnit = module.exports.assertUpdateOrgUnit = function(client, id, opts, callback) {
    client.orgUnit.updateOrgUnit(id, opts, function(err, orgUnit, response) {
        assert.ok(!err);
        if (opts.displayName) {
            assert.strictEqual(orgUnit.displayName, opts.displayName);
        }
        if (opts.description) {
            assert.strictEqual(orgUnit.description, opts.description);
        }
        if (opts.type) {
            assert.strictEqual(orgUnit.type, opts.type);
        }
        if (opts.group) {
            assert.strictEqual(orgUnit.GroupId, opts.group);
        }
        if (opts.parent) {
            assert.strictEqual(orgUnit.ParentId, opts.parent);
        }
        return callback(orgUnit);
    });
};

/**
 * Assert that an organisational unit can not be updated
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Number}             id                              The id of the organisational unit to update
 * @param  {Object}             opts                            The values to update the organisational unit with
 * @param  {String}             [opts.displayName]              Updated organisational unit name
 * @param  {String}             [opts.description]              Updated organisational unit description
 * @param  {String}             [opts.type]                     Updated organisational unit type
 * @param  {Number}             [opts.groupId]                  Updated organisational unit group
 * @param  {Number}             [opts.parent]                   Updated organisational unit parent
 * @param  {Number}             code                            The expected HTTP error code
 * @param  {Function}           callback                        Standard callback function
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertUpdateOrgUnitFails = module.exports.assertUpdateOrgUnitFails = function(client, id, opts, code, callback) {
    client.orgUnit.updateOrgUnit(id, opts, function(err, orgUnit, response) {
        assert.ok(err);
        assert.strictEqual(err.code, code);
        assert.ok(!orgUnit);
        return callback();
    });
};

/**
 * Assert that an organisational unit can be deleted
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Number}             id                              The id of the organisational unit to delete
 * @param  {Function}           callback                        Standard callback function
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertDeleteOrgUnit = module.exports.assertDeleteOrgUnit = function(client, id, callback) {
    client.orgUnit.deleteOrgUnit(id, function(err, orgUnit, response) {
        assert.ok(!err);
        return callback();
    });
};

/**
 * Assert that an organisational unit can not be deleted
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Number}             id                              The id of the organisational unit to delete
 * @param  {Number}             code                            The expected HTTP error code
 * @param  {Function}           callback                        Standard callback function
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertDeleteOrgUnitFails = module.exports.assertDeleteOrgUnitFails = function(client, id, code, callback) {
    client.orgUnit.deleteOrgUnit(id, function(err, orgUnit, response) {
        assert.ok(err);
        assert.strictEqual(err.code, code);
        assert.ok(!orgUnit);
        return callback();
    });
};

/**
 * Assert that an organisational unit can be retrieved
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Number}             id                              The id of the organisational unit to retrieve
 * @param  {Function}           callback                        Standard callback function
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertGetOrgUnit = module.exports.assertGetOrgUnit = function(client, id, callback) {
    client.orgUnit.getOrgUnit(id, function(err, orgUnit, response) {
        assert.ok(!err);
        return callback(orgUnit);
    });
};

/**
 * Assert that an organisational unit can not be retrieved
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Number}             id                              The id of the organisational unit to retrieve
 * @param  {Number}             code                            The expected HTTP error code
 * @param  {Function}           callback                        Standard callback function
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertGetOrgUnitFails = module.exports.assertGetOrgUnitFails = function(client, id, code, callback) {
    client.orgUnit.getOrgUnit(id, function(err, orgUnit, response) {
        assert.ok(err);
        assert.strictEqual(err.code, code);
        assert.ok(!orgUnit);
        return callback();
    });
};

/**
 * Assert that the organisational units for an app can be retrieved
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {number}             [app]                           The id of the app to get the organisational units for. Defaults to the current app
 * @param  {boolean}            [includeSeries]                 Whether to include the event series associated to the organisational units. Defaults to `false`
 * @param  {number}             [parent]                        The id of the parent to retrieve the organisational units for
 * @param  {string[]}           [type]                          The organisational unit type[s] to filter the organisational unit by
 * @param  {Function}           callback                        Standard callback function
 * @param  {OrgUnit}            callback.orgUnits               The retrieved organisational units
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertGetOrgUnits = module.exports.assertGetOrgUnits = function(client, app, includeSeries, parent, type, callback) {
    client.orgUnit.getOrgUnits(app, includeSeries, parent, type, function(err, orgUnits) {
        assert.ok(!err);
        assert.ok(orgUnits);

        // Assert the series are included when includeSeries was set to `true`
        if (includeSeries) {
            _.each(orgUnits.results, function(orgUnit) {
                assert.ok(orgUnit.Series);
            });
        }

        return callback(orgUnits);
    });
};

/**
 * Assert that an organisational unit can not be retrieved
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {number}             [app]                           The id of the app to get the organisational units for. Defaults to the current app
 * @param  {boolean}            [includeSeries]                 Whether to include the event series associated to the organisational units. Defaults to `false`
 * @param  {number}             [parent]                        The id of the parent to retrieve the organisational units for
 * @param  {string[]}           [type]                          The organisational unit type[s] to filter the organisational unit by
 * @param  {Number}             code                            The expected HTTP error code
 * @param  {Function}           callback                        Standard callback function
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertGetOrgUnitsFails = module.exports.assertGetOrgUnitsFails = function(client, app, includeSeries, parent, type, code, callback) {
    client.orgUnit.getOrgUnits(app, includeSeries, parent, type, function(err, orgUnits) {
        assert.ok(err);
        assert.strictEqual(err.code, code);
        assert.ok(!orgUnits);
        return callback();
    });
};

/**
 * Assert that the series for an organisational unit can be retrieved
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Number}             id                              The id of the organisational unit for which to retrieve the series
 * @param  {Number}             [limit]                         The maximum number of results to retrieve
 * @param  {Number}             [offset]                        The paging number of the results to retrieve
 * @param  {Function}           callback                        Standard callback function
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertGetOrgUnitSeries = module.exports.assertGetOrgUnitSeries = function(client, id, limit, offset, callback) {
    client.orgUnit.getOrgUnitSeries(id, limit, offset, function(err, series) {
        assert.ok(!err);
        return callback(series);
    });
};

/**
 * Get all the series under an organisational unit
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Number}             id                              The id of the organisational unit for which to retrieve the series
 * @param  {Function}           callback                        Standard callback function
 * @param  {Serie[]}            allSeries                       All the series under the organisational unit
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var getAllOrgUnitSeries = module.exports.getAllOrgUnitSeries = function(client, id, callback, _allSeries, _offset) {
    _allSeries = _allSeries || [];
    _offset = _offset || 0;

    // Get the first page of series
    assertGetOrgUnitSeries(client, id, 25, _offset, function(series) {
        _allSeries = _allSeries.concat(series);

        // If the backend responded with less than 25 series we've retrieved them all
        if (series.length < 25) {
            return callback(_allSeries);

        // Otherwise, we get the next set of series
        } else {
            getAllOrgUnitSeries(client, id, callback, _allSeries, _offset + 25);
        }
    });
};

/**
 * Assert that an organisational unit's series can be retrieved
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Number}             id                              The id of the organisational unit for which to retrieve the series
 * @param  {Number}             [limit]                         The maximum number of results to retrieve
 * @param  {Number}             [offset]                        The paging number of the results to retrieve
 * @param  {Number}             code                            The expected HTTP error code
 * @param  {Function}           callback                        Standard callback function
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertGetOrgUnitSeriesFails = module.exports.assertGetOrgUnitSeriesFails = function(client, id, limit, offset, code, callback) {
    client.orgUnit.getOrgUnitSeries(id, limit, offset, function(err, series) {
        assert.ok(err);
        assert.strictEqual(err.code, code);
        return callback(series);
    });
};

/**
 * Assert that one or more series can be added to an organisational unit
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Number}             id                              The id of the organisational unit to add the serie(s) to
 * @param  {Number[]}           serieIds                        The id of the serie(s) to add to the organisational unit
 * @param  {Function}           callback                        Standard callback function
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertAddOrgUnitSeries = module.exports.assertAddOrgUnitSeries = function(client, id, serieIds, callback) {
    client.orgUnit.addOrgUnitSeries(id, serieIds, function(err, body, response) {
        assert.ok(!err);

        // Verify all series were added to the organisational unit
        getAllOrgUnitSeries(client, id, function(allSeries) {
            _.each(serieIds, function(serieId) {
                assert.ok(_.find(allSeries, {'id': serieId}));
            });

            return callback();
        });
    });
};

/**
 * Assert that one or more series can not be added to an organisational unit
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Number}             id                              The id of the organisational unit to add the serie(s) to
 * @param  {Number[]}           serieIds                        The id of the serie(s) to add to the organisational unit
 * @param  {Number}             code                            The expected HTTP error code
 * @param  {Function}           callback                        Standard callback function
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertAddOrgUnitSeriesFails = module.exports.assertAddOrgUnitSeriesFails = function(client, id, serieIds, code, callback) {
    client.orgUnit.addOrgUnitSeries(id, serieIds, function(err, body, response) {
        assert.ok(err);
        assert.strictEqual(err.code, code);
        return callback();
    });
};

/**
 * Assert that one or more series can be deleted from an organisational unit
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Number}             id                              The id of the organisational unit to delete the serie(s) from
 * @param  {Number[]}           serieIds                        The id of the serie(s) to delete from the organisational unit
 * @param  {Function}           callback                        Standard callback function
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertDeleteOrgUnitSeries = module.exports.assertDeleteOrgUnitSeries = function(client, id, serieIds, callback) {
    client.orgUnit.deleteOrgUnitSeries(id, serieIds, function(err, body, response) {
        assert.ok(!err);

        // Verify all series were added to the organisational unit
        assertGetOrgUnitSeries(client, id, 1000, null, function(allSeries) {
            _.each(serieIds, function(serieId) {
                assert.ok(!_.find(allSeries, {'id': serieId}));
            });

            return callback();
        });
    });
};

/**
 * Assert that one or more series can not be deleted from an organisational unit
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Number}             id                              The id of the organisational unit to delete the serie(s) from
 * @param  {Number[]}           serieIds                        The id of the serie(s) to delete from the organisational unit
 * @param  {Number}             code                            The expected HTTP error code
 * @param  {Function}           callback                        Standard callback function
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertDeleteOrgUnitSeriesFails = module.exports.assertDeleteOrgUnitSeriesFails = function(client, id, serieIds, code, callback) {
    client.orgUnit.deleteOrgUnitSeries(id, serieIds, function(err, body, response) {
        assert.ok(err);
        assert.strictEqual(err.code, code);
        return callback();
    });
};
