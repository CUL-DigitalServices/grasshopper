/**
 * Copyright (c) 2015 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var _ = require('lodash');
var assert = require('assert');
var moment = require('moment');

var EventsTestsUtil = require('gh-events/tests/util');
var SeriesTestsUtil = require('gh-series/tests/util');
var TestsUtil = require('gh-tests');

var OrgUnitDAO = require('gh-orgunit/lib/internal/dao');
var OrgUnitTestsUtil = require('./util');

describe('Organisational units - export', function() {

    /**
     * Test that verifies a format can be selected when exporting to an organisational unit
     */
    it('verify the format when exporting an organisational unit', function(callback) {
        OrgUnitTestsUtil.createSimpleTree(global.tests.admins.cam2013.client, function(course, subject, part, module, series) {

            // Assert that the organisational unit can be exported into JSON
            OrgUnitTestsUtil.assertExportOrgUnit(global.tests.admins.cam2013.client, part.id, 'json', function(data) {

                // Assert that the organisational unit can be exported into CSV
                OrgUnitTestsUtil.assertExportOrgUnit(global.tests.admins.cam2013.client, part.id, 'csv', function(data) {

                    // Assert that the format defaults to JSON
                    OrgUnitTestsUtil.assertExportOrgUnit(global.tests.admins.cam2013.client, part.id, null, function(data) {
                        return callback();
                    });
                });
            });
        });
    });

    /**
     * Test that verifies validation when exporting an organisational unit
     */
    it('verify validation when exporting an organisational unit', function(callback) {
        OrgUnitTestsUtil.createSimpleTree(global.tests.admins.cam2013.client, function(course, subject, part, module, series) {

            // Invalid organisational unit id
            OrgUnitTestsUtil.assertExportOrgUnitFails(global.tests.admins.cam2013.client, 'not an id', 'json', 400, function() {

                // Unknown organisational unit id
                OrgUnitTestsUtil.assertExportOrgUnitFails(global.tests.admins.cam2013.client, -1, 'json', 404, function() {
                    OrgUnitTestsUtil.assertExportOrgUnitFails(global.tests.admins.cam2013.client, 234234234234, 'json', 404, function() {

                        // Invalid format
                        OrgUnitTestsUtil.assertExportOrgUnitFails(global.tests.admins.cam2013.client, part.id, 'invalid format', 400, function() {
                            return callback();
                        });
                    });
                });
            });
        });
    });

    /**
     * Test that verifies authorization when exporting an organisational unit
     */
    it('verify authorization when exporting an organisational unit', function(callback) {
        OrgUnitTestsUtil.createSimpleTree(global.tests.admins.cam2013.client, function(course, subject, part, module, series) {

            // Anonymous users cannot export an organisational unit
            TestsUtil.getAnonymousAppUserClient(global.tests.apps.cam2013, function(anonymousClient) {
                OrgUnitTestsUtil.assertExportOrgUnitFails(anonymousClient, part.id, null, 401, function() {
                    TestsUtil.getAnonymousGlobalAdminRestClient(function(anonymousGlobalClient) {
                        OrgUnitTestsUtil.assertExportOrgUnitFails(anonymousGlobalClient, part.id, null, 401, function() {

                            // Regular users from another application can't export an organisational unit
                            TestsUtil.generateTestUsers(global.tests.apps.oxford2014, 1, false, function(simon) {
                                OrgUnitTestsUtil.assertExportOrgUnitFails(simon.client, part.id, null, 401, function() {

                                    // Application administrators from another application can't export an organisational unit
                                    OrgUnitTestsUtil.assertExportOrgUnitFails(global.tests.admins.oxford2014.client, part.id, null, 401, function() {

                                        // Regular users from the same application can export an organisational unit
                                        TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, false, function(nico) {
                                            OrgUnitTestsUtil.assertExportOrgUnitFails(nico.client, part.id, null, 401, function() {

                                                // Application administrators from the same application can export an organisational unit
                                                OrgUnitTestsUtil.assertExportOrgUnit(global.tests.admins.cam2013.client, part.id, null, function(data) {

                                                    // Global administrators can export an organisational unit
                                                    TestsUtil.getGlobalAdminRestClient(function(globalAdminRestClient) {
                                                        OrgUnitTestsUtil.assertExportOrgUnit(globalAdminRestClient, part.id, null, function(data) {
                                                            return callback();
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    /**
     * Test that verifies that a tree that contains borrowed series can be imported
     */
    it('verify exporting a tree with borrowed series', function(callback) {
        // Create a tree
        OrgUnitTestsUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'root', 'course', null, function(root) {
            OrgUnitTestsUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'A', 'part', {'parent': root.id}, function(partA) {
                OrgUnitTestsUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'B', 'part', {'parent': root.id}, function(partB) {

                    // Create a series and stick it under both parts
                    var start = moment().format();
                    var end = moment().add(2, 'hour').format();
                    SeriesTestsUtil.generateSerieWithEvents(global.tests.admins.cam2013.client, 1, 5, start, end, function(series) {
                        series = series[0];
                        OrgUnitTestsUtil.assertAddOrgUnitSeries(global.tests.admins.cam2013.client, partA.id, [series.id], function() {
                            OrgUnitTestsUtil.assertAddOrgUnitSeries(global.tests.admins.cam2013.client, partB.id, [series.id], function() {

                                // Export the root node
                                OrgUnitTestsUtil.assertExportOrgUnit(global.tests.admins.cam2013.client, root.id, null, function(data) {
                                    // Sanity-check the series is present under both nodes
                                    assert.strictEqual(data.children[0].series[0].id, series.id);
                                    assert.strictEqual(data.children[1].series[0].id, series.id);
                                    return callback();
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    /**
     * Test that verifies that an unbalanced tree can be exported
     */
    it('verify exporting an unbalanced tree', function(callback) {
        OrgUnitTestsUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'root', 'course', null, function(root) {

            OrgUnitTestsUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'A', 'part', {'parent': root.id}, function(partA) {
                OrgUnitTestsUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'B', 'part', {'parent': root.id}, function(partB) {

                    // Add another organisational unit under part B
                    OrgUnitTestsUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'B-1', 'module', {'parent': partB.id}, function(module) {

                        // Create a test serie and event
                        SeriesTestsUtil.assertCreateSerie(global.tests.admins.cam2013.client, 'Test serie', null, function(series) {
                            var start = moment().format();
                            var end = moment().add(2, 'hour').format();
                            EventsTestsUtil.assertCreateEvent(global.tests.admins.cam2013.client, 'Test event', start, end, {'series': series.id}, function(event) {

                                // Add the series under both part A and the module
                                OrgUnitTestsUtil.assertAddOrgUnitSeries(global.tests.admins.cam2013.client, partA.id, [series.id], function() {
                                    OrgUnitTestsUtil.assertAddOrgUnitSeries(global.tests.admins.cam2013.client, module.id, [series.id], function() {

                                        // Export the root node
                                        OrgUnitTestsUtil.assertExportOrgUnit(global.tests.admins.cam2013.client, root.id, null, function(data) {

                                            // Although the test utility verifies lots of this, we still add a manual check
                                            // to ensure that no other children suddenly get added in the export
                                            assert.strictEqual(data.id, root.id);
                                            assert.strictEqual(data.displayName, root.displayName);
                                            assert.strictEqual(data.series.length, 0);

                                            // The root organisational unit has 2 parts
                                            assert.strictEqual(data.children.length, 2);

                                            // Part A has the series under it, but NO children
                                            var partAOrgUnit = _.find(data.children, {'id': partA.id});
                                            assert.strictEqual(partAOrgUnit.id, partA.id);
                                            assert.strictEqual(partAOrgUnit.displayName, partA.displayName);
                                            assert.strictEqual(partAOrgUnit.children.length, 0);
                                            assert.strictEqual(partAOrgUnit.series.length, 1);
                                            assert.strictEqual(partAOrgUnit.series[0].id, series.id);
                                            assert.strictEqual(partAOrgUnit.series[0].displayName, series.displayName);
                                            assert.strictEqual(partAOrgUnit.series[0].events.length, 1);
                                            assert.strictEqual(partAOrgUnit.series[0].events[0].id, event.id);
                                            assert.strictEqual(partAOrgUnit.series[0].events[0].displayName, event.displayName);
                                            assert.strictEqual(partAOrgUnit.series[0].events[0].start, event.start);
                                            assert.strictEqual(partAOrgUnit.series[0].events[0].end, event.end);

                                            // Part B has the module under it, but NO series
                                            var partBOrgUnit = _.find(data.children, {'id': partB.id});
                                            assert.strictEqual(partBOrgUnit.id, partB.id);
                                            assert.strictEqual(partBOrgUnit.displayName, partB.displayName);
                                            assert.strictEqual(partBOrgUnit.series.length, 0);
                                            assert.strictEqual(partBOrgUnit.children.length, 1);

                                            // The module has the series
                                            var moduleOrgUnit = partBOrgUnit.children[0];
                                            assert.strictEqual(moduleOrgUnit.id, module.id);
                                            assert.strictEqual(moduleOrgUnit.displayName, module.displayName);
                                            assert.strictEqual(moduleOrgUnit.series.length, 1);
                                            assert.strictEqual(moduleOrgUnit.series[0].id, series.id);
                                            assert.strictEqual(moduleOrgUnit.series[0].displayName, series.displayName);
                                            assert.strictEqual(moduleOrgUnit.series[0].events.length, 1);
                                            assert.strictEqual(moduleOrgUnit.series[0].events[0].id, event.id);
                                            assert.strictEqual(moduleOrgUnit.series[0].events[0].displayName, event.displayName);
                                            assert.strictEqual(moduleOrgUnit.series[0].events[0].start, event.start);
                                            assert.strictEqual(moduleOrgUnit.series[0].events[0].end, event.end);

                                            // Ensure the CSV export is correct
                                            OrgUnitTestsUtil.assertExportOrgUnit(global.tests.admins.cam2013.client, root.id, 'csv', function(records) {
                                                // As there are only 2 events (each with 1 organiser) in the entire tree,
                                                // there should only be 2 records in the exported CSV file
                                                assert.strictEqual(records.length, 2);

                                                // Expected keys
                                                var expectedColumns = [
                                                    'course_0_id', 'course_0_externalId', 'course_0_displayName', 'course_0_description', 'course_0_published', 'course_0_parentId',
                                                    'part_1_id', 'part_1_externalId', 'part_1_displayName', 'part_1_description', 'part_1_published', 'part_1_parentId',
                                                    'module_2_id', 'module_2_externalId', 'module_2_displayName', 'module_2_description', 'module_2_published', 'module_2_parentId',
                                                    'series_id', 'series_externalId', 'series_displayName', 'series_description',
                                                    'event_id', 'event_externalId', 'event_displayName', 'event_description', 'event_notes', 'event_location', 'event_start', 'event_end', 'organiser_id', 'organiser_shibbolethId', 'organiser_displayName'
                                                ].sort();
                                                _.each(records, function(record) {
                                                    var recordKeys = _.keys(record).sort();
                                                    assert.deepEqual(recordKeys, expectedColumns);
                                                });

                                                // There should be 1 record which has a value for module_id and one which doesn't
                                                records = _.partition(records, function(record) {
                                                    return (record.module_2_id === '' + module.id);
                                                });
                                                assert.strictEqual(records[0].length, 1);
                                                assert.strictEqual(records[1].length, 1);
                                                var moduleRecord = _.first(records[0]);
                                                var partRecord = _.first(records[1]);

                                                assert.strictEqual(partRecord.module_2_id, '');
                                                assert.strictEqual(partRecord.module_2_displayName, '');
                                                assert.strictEqual(partRecord.module_2_description, '');
                                                assert.strictEqual(partRecord.module_2_externalId, '');

                                                return callback();
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    it('verify exporting an organisational unit structure with types on multiple levels', function(callback) {
        OrgUnitTestsUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'root', 'A', null, function(root) {
            OrgUnitTestsUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'child1', 'A', {'parent': root.id}, function(child1) {
                OrgUnitTestsUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'child2', 'B', {'parent': root.id}, function(child2) {

                    // Verify we can export the organisational unit to JSON
                    OrgUnitTestsUtil.assertExportOrgUnit(global.tests.admins.cam2013.client, root.id, 'json', function(data) {

                        // Verify we can export the organisational unit to CSV
                        OrgUnitTestsUtil.assertExportOrgUnit(global.tests.admins.cam2013.client, root.id, 'csv', function(data) {
                            return callback();
                        });
                    });
                });
            });
        });
    });

    /**
     * Test that verifies exporting an organisational unit structure with a cycle in it
     */
    it('verify exporting an organisational unit structure with a cycle in it', function(callback) {
        OrgUnitTestsUtil.createSimpleTree(global.tests.admins.cam2013.client, function(course, subject, part, module, series) {

            // Verify we can still export the tree
            OrgUnitTestsUtil.assertExportOrgUnit(global.tests.admins.cam2013.client, course.id, null, function(data) {

                // Create a cycle
                OrgUnitDAO.getOrgUnit(course.id, false, function(err, courseOrgUnit) {
                    assert.ok(!err);
                    OrgUnitDAO.updateOrgUnit(courseOrgUnit, {'ParentId': module.id}, function(err) {
                        assert.ok(!err);

                        // Verify we can no longer export the tree
                        OrgUnitTestsUtil.assertExportOrgUnitFails(global.tests.admins.cam2013.client, course.id, null, 400, function() {
                            return callback();
                        });
                    });
                });
            });
        });
    });

    /**
     * Test that verifies that organisational units without children or series without events are exported
     */
    it('verify organisational units without children or series without events are included in the export', function(callback) {
        // Create the standard tree structure
        OrgUnitTestsUtil.createSimpleTree(global.tests.admins.cam2013.client, function(course, subject, part, module, series) {
            // Create and add an organisational unit without children or series
            OrgUnitTestsUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, TestsUtil.generateString(20), 'subject', {'parent': course.id}, function(noChildrenOrSeries) {
                // Create and add an organisational unit that will hold an empty series
                OrgUnitTestsUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, TestsUtil.generateString(20), 'subject', {'parent': course.id}, function(emptySeriesParent) {
                    SeriesTestsUtil.assertCreateSerie(global.tests.admins.cam2013.client, TestsUtil.generateString(20), null, function(series) {
                        OrgUnitTestsUtil.assertAddOrgUnitSeries(global.tests.admins.cam2013.client, emptySeriesParent.id, [series.id], function() {

                            // Export the tree into JSON
                            OrgUnitTestsUtil.assertExportOrgUnit(global.tests.admins.cam2013.client, course.id, null, function(data) {

                                // The course should have 3 children
                                assert.strictEqual(data.children.length, 3);

                                // Assert the organisational unit without any children or series has been exported
                                var exportedNoChildrenOrSeriesOrgUnit = _.find(data.children, {'id': noChildrenOrSeries.id});
                                assert.ok(exportedNoChildrenOrSeriesOrgUnit);
                                assert.strictEqual(exportedNoChildrenOrSeriesOrgUnit.displayName, noChildrenOrSeries.displayName);

                                // Assert the series without any events was exported
                                var exportedEmptySeriesParent = _.find(data.children, {'id': emptySeriesParent.id});
                                assert.ok(exportedEmptySeriesParent);
                                assert.strictEqual(exportedEmptySeriesParent.displayName, emptySeriesParent.displayName);
                                assert.strictEqual(exportedEmptySeriesParent.series.length, 1);
                                assert.strictEqual(exportedEmptySeriesParent.series[0].displayName, series.displayName);

                                // Export the tree into CSV
                                OrgUnitTestsUtil.assertExportOrgUnit(global.tests.admins.cam2013.client, course.id, 'csv', function(data) {

                                    // The course should have 3 children
                                    var uniqueSubjectIds = _.chain(data).pluck('subject_1_id').uniq().value();
                                    assert.strictEqual(uniqueSubjectIds.length, 3);

                                    // Assert the organisational unit without any children or series has been exported
                                    var exportedNoChildrenOrSeriesOrgUnit = _.find(data, {'subject_1_id': '' + noChildrenOrSeries.id});
                                    assert.ok(exportedNoChildrenOrSeriesOrgUnit);
                                    assert.strictEqual(exportedNoChildrenOrSeriesOrgUnit.subject_1_displayName, noChildrenOrSeries.displayName);

                                    // Assert the series without any events was exported
                                    var exportedEmptySeriesParent = _.find(data, {'subject_1_id': '' + emptySeriesParent.id});
                                    assert.ok(exportedEmptySeriesParent);
                                    assert.strictEqual(exportedEmptySeriesParent.subject_1_displayName, emptySeriesParent.displayName);
                                    assert.strictEqual(exportedEmptySeriesParent.series_displayName, series.displayName);
                                    return callback();
                                });
                            });
                        });
                    });
                });
            });
        });
    });
});
