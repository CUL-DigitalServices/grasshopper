/**
 * Copyright (c) 2014 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var GrassHopper = require('gh-core');

/**
 * @REST getConfigSchema
 *
 * Get the configuration schema
 *
 * @Server      admin,app
 * @Method      GET
 * @Path        /config/schema
 * @Return      {ConfigSchema}                      The configuration schema
 */
var getConfigSchema = function(req, res) {
    res.send(501);
};

GrassHopper.globalAdminServer.on('get', '/api/config/schema', getConfigSchema);
GrassHopper.appServer.on('get', '/api/config/schema', getConfigSchema);

/**
 * @REST getConfig
 *
 * Get the configuration for the current app
 *
 * @Server      admin,app
 * @Method      GET
 * @Path        /config
 * @Return      {Config}                            The configuration for the current app
 */
var getConfig = function(req, res) {
    res.send(501);
};

GrassHopper.globalAdminServer.on('get', '/api/config', getConfig);
GrassHopper.appServer.on('get', '/api/config', getConfig);

/**
 * @REST getConfigByApp
 *
 * Get the configuration for an app
 *
 * @Server      admin
 * @Method      GET
 * @Path        /config/{appId}
 * @PathParam   {number}            appId           The id of the app to get the configuration for
 * @Return      {Config}                            The configuration for the specified app
 */
GrassHopper.globalAdminServer.on('get', '/api/config/:appId', function(req, res) {
    res.send(501);
});

/**
 * @REST updateConfig
 *
 * Update a configuration value for the current app
 *
 * @Server      admin,app
 * @Method      POST
 * @Path        /config
 * @BodyParam   {ConfigValues}      body            Configuration value(s) to update
 * @Return      {void}
 */
var updateConfig = function(req, res) {
    res.send(501);
};

GrassHopper.globalAdminServer.on('post', '/api/config', updateConfig);
GrassHopper.appServer.on('post', '/api/config', updateConfig);

/**
 * @REST updateConfigByApp
 *
 * Update a configuration value for an app
 *
 * @Server      admin
 * @Method      POST
 * @Path        /config/{appId}
 * @PathParam   {string}            appId           The id of the app to update the configuration value(s) for
 * @BodyParam   {ConfigValues}      body            Configuration value(s) to update
 * @Return      {void}
 */
GrassHopper.globalAdminServer.on('post', '/api/config/:appId', function(req, res) {
    res.send(501);
});

/**
 * @REST clearConfig
 *
 * Clear a configuration value for the current app
 *
 * @Server      admin,app
 * @Method      POST
 * @Path        /config/clear
 * @BodyParam   {string[]}          configFields    Name(s) of the configuration element(s) to clear
 * @Return      {void}
 */
var clearConfig = function(req, res) {
    res.send(501);
};

GrassHopper.globalAdminServer.on('post', '/api/config/clear', clearConfig);
GrassHopper.appServer.on('post', '/api/config/clear', clearConfig);

/**
 * @REST clearConfigByApp
 *
 * Clear a configuration value for an app
 *
 * @Server      admin
 * @Method      POST
 * @Path        /config/{appId}/clear
 * @PathParam   {string}            appId           The id of the app to clear the configuration value for
 * @BodyParam   {string[]}          configFields    Name(s) of the configuration element(s) to clear
 * @Return      {void}
 */
GrassHopper.globalAdminServer.on('post', '/api/config/:appId/clear', function(req, res) {
    res.send(501);
});
