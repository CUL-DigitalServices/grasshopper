/**
 * Copyright (c) 2014 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var _ = require('lodash');
var assert = require('assert');
var moment = require('moment');

var TestsUtil = require('gh-tests');

/**
 * Assert that a event has all expected properties
 *
 * @param  {Event}              event               The event to assert the properties for
 * @param  {Event}              expectedEvent       The event to which the provided event should be compared
 * @throws {AssertionError}                         Error thrown when an assertion failed
 */
var assertEvent = module.exports.assertEvent = function(event, expectedEvent) {
    assert.ok(event);
    assert.ok(event.id);
    assert.ok(event.AppId);
    assert.ok(event.displayName);
    assert.ok(event.createdAt);
    assert.ok(event.updatedAt);
    assert.ok(event.start);
    assert.ok(event.end);
    assert.strictEqual(event.id, expectedEvent.id);
    assert.strictEqual(event.AppId, expectedEvent.AppId);
    assert.strictEqual(event.displayName, expectedEvent.displayName);
    assert.strictEqual(event.createdAt, expectedEvent.createdAt);
    assert.strictEqual(event.updatedAt, expectedEvent.updatedAt);
    assert.strictEqual(event.start, expectedEvent.start);
    assert.strictEqual(event.end, expectedEvent.end);
    assert.strictEqual(event.description, expectedEvent.description);
    assert.strictEqual(event.GroupId, expectedEvent.GroupId);
    assert.strictEqual(event.location, expectedEvent.location);
    assert.strictEqual(event.notes, expectedEvent.notes);
    assert.deepEqual(event.organisers, expectedEvent.organisers);
};

/**
 * Assert that a new event can be created
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {String}             displayName                     The name of the event
 * @param  {Number}             start                           The timestamp (ISO 8601) at which the event starts
 * @param  {Number}             end                             The timestamp (ISO 8601) at which the event ends
 * @param  {Object}             [opts]                          A set of optional parameters
 * @param  {Number}             [opts.app]                      The id of the application that this event will belong to
 * @param  {String}             [opts.description]              The description of the event
 * @param  {Number}             [opts.group]                    The id of the group that can manage the event
 * @param  {String}             [opts.location]                 The location of the event
 * @param  {String}             [opts.notes]                    The notes for the event
 * @param  {String[]}           [opts.organiserOther]           The name(s) of the unrecognised user(s) that organise the event. If no organisers are added, the current user will be added as the organiser
 * @param  {Number[]}           [opts.organiserUser]            The id(s) of the recognised user(s) that organise the event
 * @param  {Number[]}           [opts.serie]                    The id(s) of the serie(s) that the event belongs to
 * @param  {Function}           callback                        Standard callback function
 * @param  {Event}              callback.event                  The created event
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertCreateEvent = module.exports.assertCreateEvent = function(client, displayName, start, end, opts, callback) {
    opts = opts || {};

    client.event.createEvent(displayName, start, end, opts, function(err, createdEvent, response) {
        assert.ok(!err);
        assert.ok(createdEvent);
        assert.ok(createdEvent.id);
        assert.ok(createdEvent.createdAt);
        assert.ok(createdEvent.updatedAt);
        assert.ok(createdEvent.start);
        assert.ok(createdEvent.end);
        assert.strictEqual(createdEvent.displayName, displayName);

        if (opts.description) {
            assert.strictEqual(createdEvent.description, opts.description);
        }
        if (opts.notes) {
            assert.strictEqual(createdEvent.notes, opts.notes);
        }
        if (opts.location) {
            assert.strictEqual(createdEvent.location, opts.location);
        }
        if (opts.organiserOther) {
            assert.ok(createdEvent.organisers);
            assert.ok(_.isArray(createdEvent.organisers));
            assert.ok(createdEvent.organisers.length >= opts.organiserOther.length);
            _.each(opts.organiserOther, function(organiserOther) {
                assert.ok(_.contains(createdEvent.organisers, organiserOther));
            });
        }
        if (opts.organiserUsers) {
            assert.ok(createdEvent.organisers);
            assert.ok(_.isArray(createdEvent.organisers));
            assert.ok(createdEvent.organisers.length >= opts.organiserUsers.length);
            _.each(opts.organiserUsers, function(organiserUserId) {
                assert.ok(_.where(createdEvent.organisers, {'id': organiserUserId}));
            });   
        }
        return callback(createdEvent);
    });
};

/**
 * Assert that an event can not be created
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {String}             displayName                     The name of the event
 * @param  {Number}             start                           The timestamp (ISO 8601) at which the event starts
 * @param  {Number}             end                             The timestamp (ISO 8601) at which the event ends
 * @param  {Object}             [opts]                          A set of optional parameters
 * @param  {Number}             [opts.app]                      The id of the application that this event will belong to
 * @param  {String}             [opts.description]              The description of the event
 * @param  {Number}             [opts.group]                    The id of the group that can manage the event
 * @param  {String}             [opts.location]                 The location of the event
 * @param  {String}             [opts.notes]                    The notes for the event
 * @param  {String}             [opts.organiserOther]           The name(s) of the unrecognised user(s) that organise the event. If no organisers are added, the current user will be added as the organiser
 * @param  {Number[]}           [opts.organiserUser]            The id(s) of the recognised user(s) that organise the event
 * @param  {Number[]}           [opts.serie]                    The id(s) of the serie(s) that the event belongs to
 * @param  {Number}             code                            The expected HTTP error code
 * @param  {Function}           callback                        Standard callback function
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertCreateEventFails = module.exports.assertCreateEventFails = function(client, displayName, start, end, opts, code, callback) {
    client.event.createEvent(displayName, start, end, opts, function(err, event, response) {
        assert.ok(err);
        assert.strictEqual(err.code, code);
        assert.ok(!event);

        return callback();
    });
};

/**
 * Assert that an event can be retrieved
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Number}             id                              The id of the event to retrieve
 * @param  {Event}              [expectedEvent]                 The expected event to be retrieved
 * @param  {Function}           callback                        Standard callback function
 * @param  {Event}              callback.event                  The retrieved event
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertGetEvent = module.exports.assertGetEvent = function(client, id, expectedEvent, callback) {
    client.event.getEvent(id, function(err, event) {
        assert.ok(!err);
        assert.ok(event);
        assert.strictEqual(event.id, id);
        if (expectedEvent) {
            assertEvent(event, expectedEvent);
        }
        return callback(event);
    });
};

/**
 * Assert that an event can not be retrieved
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Number}             id                              The id of the event to retrieve
 * @param  {Number}             code                            The expected HTTP error code
 * @param  {Function}           callback                        Standard callback function
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertGetEventFails = module.exports.assertGetEventFails = function(client, id, code, callback) {
    client.event.getEvent(id, function(err, event) {
        assert.ok(err);
        assert.strictEqual(err.code, code);
        assert.ok(!event);
        return callback();
    });
};

/**
 * Assert that an event can be updated
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Number}             id                              The id of the event to update
 * @param  {Object}             update                          The updates to persist
 * @param  {Function}           callback                        Standard callback function
 * @param  {Event}              callback.event                  The updated event
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertUpdateEvent = module.exports.assertUpdateEvent = function(client, id, update, callback) {
    client.event.updateEvent(id, update, function(err, event) {
        assert.ok(!err);
        assert.ok(event);
        assert.strictEqual(event.id, id);
        return callback(event);
    });
};

/**
 * Assert that an event can be updated
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Number}             id                              The id of the event to update
 * @param  {Object}             update                          The updates to persist
 * @param  {Number}             code                            The expected HTTP error code
 * @param  {Function}           callback                        Standard callback function
 * @param  {Event}              callback.event                  The updated event
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertUpdateEventFails = module.exports.assertUpdateEventFails = function(client, id, update, code, callback) {
    client.event.updateEvent(id, update, function(err, event) {
        assert.ok(err);
        assert.strictEqual(err.code, code);
        assert.ok(!event);
        return callback();
    });
};

/**
 * Assert that an event can be updated
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Number}             id                              The id of the event to delete
 * @param  {Function}           callback                        Standard callback function
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertDeleteEvent = module.exports.assertDeleteEvent = function(client, id, callback) {
    client.event.deleteEvent(id, function(err) {
        assert.ok(!err);
        return callback();
    });
};

/**
 * Assert that an event can be updated
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Number}             id                              The id of the event to delete
 * @param  {Number}             code                            The expected HTTP error code
 * @param  {Function}           callback                        Standard callback function
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertDeleteEventFails = module.exports.assertDeleteEventFails = function(client, id, code, callback) {
    client.event.deleteEvent(id, function(err) {
        assert.ok(err);
        assert.strictEqual(err.code, code);
        return callback();
    });
};

/**
 * Generate a set of test events. Each event will have a random duration
 * anywhere between 15 minutes to 8 hours
 *
 * @param  {Client}         client                  The REST client to make the request with
 * @param  {Number}         total                   The total number of events that should be created
 * @param  {String}         rangeStart              The datetime when the events can start
 * @param  {String}         rangeEnd                The datetime when the events should end
 * @param  {Function}       callback                Standard callback function
 * @param  {Event[]}        callback.events         The created events. The array will be sorted on the events their `created` timestamp
 * @throws {AssertionError}                         Error thrown when an assertion failed
 */
var generateTestEvents = module.exports.generateTestEvents = function(client, total, rangeStart, rangeEnd, callback, _events) {
    _events = _events || [];
    if (total === 0) {
        _events = _events.sort(function(a, b) {
            return a.start.localeCompare(b.start);
        });
        return callback(_events);
    }

    // Generate the start and end times of the event somewhere in our range
    var start = moment(rangeStart);
    var end = moment(rangeEnd);

    // Get the time between the two dates in seconds, but leave some time
    // for the duration of the event itself
    var diff = end.subtract(8, 'hour').diff(start, 'seconds');

    // Generate a random start date somewhere in the interval
    var startFuzzed = start.add(_.random(diff), 'second');
    var startFormatted = start.format();

    // The end date for the event is the start date + anything from 15 minutes to 8 hours
    var endFuzzed = startFuzzed.add(15, 'minute').add(_.random(28785), 'second');
    var endFormatted = endFuzzed.format();

    // Create the event
    var displayName = TestsUtil.generateString(30);
    assertCreateEvent(client, displayName, startFormatted, endFormatted, null, function(event) {
        _events.push(event);
        generateTestEvents(client, total - 1, rangeStart, rangeEnd, callback, _events);
    });
};
